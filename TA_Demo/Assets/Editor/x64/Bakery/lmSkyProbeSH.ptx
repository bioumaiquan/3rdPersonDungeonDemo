//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-23083092
// Cuda compilation tools, release 9.1, V9.1.85
// Based on LLVM 3.4svn
//

.version 6.1
.target sm_30
.address_size 64

	// .globl	_Z6oxMainv
.global .align 8 .b8 pixelID[8];
.global .align 8 .b8 resolution[8];
.global .align 4 .b8 normal[12];
.global .align 4 .b8 camPos[12];
.global .align 4 .b8 root[4];
.global .align 4 .u32 imageEnabled;
.global .texref lightmap;
.global .align 16 .b8 tileInfo[16];
.global .align 4 .u32 additive;
.global .align 1 .b8 image[1];
.global .align 1 .b8 image_HDR[1];
.global .align 1 .b8 image_HDR2[1];
.global .align 1 .b8 image_RNM0[1];
.global .align 1 .b8 image_RNM1[1];
.global .align 1 .b8 image_RNM2[1];
.global .align 1 .b8 image_RNM3[1];
.global .align 1 .b8 uvpos[1];
.global .align 1 .b8 uvnormal[1];
.global .align 1 .b8 rnd_seeds[1];
.global .texref sky;
.global .align 4 .b8 skyColor[12];
.global .align 4 .u32 samples;
.global .align 4 .u32 hemispherical;
.global .align 4 .b8 _ZN21rti_internal_typeinfo7pixelIDE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10resolutionE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6camPosE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4rootE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12imageEnabledE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8tileInfoE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8additiveE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8skyColorE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo7samplesE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo13hemisphericalE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 8 .b8 _ZN21rti_internal_typename7pixelIDE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10resolutionE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6camPosE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 16 .b8 _ZN21rti_internal_typename4rootE[9] = {114, 116, 79, 98, 106, 101, 99, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12imageEnabledE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8tileInfoE[6] = {117, 105, 110, 116, 52, 0};
.global .align 4 .b8 _ZN21rti_internal_typename8additiveE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8skyColorE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 4 .b8 _ZN21rti_internal_typename7samplesE[4] = {105, 110, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename13hemisphericalE[4] = {105, 110, 116, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum7pixelIDE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10resolutionE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6camPosE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4rootE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12imageEnabledE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8tileInfoE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8additiveE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8skyColorE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum7samplesE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum13hemisphericalE = 4919;
.global .align 16 .b8 _ZN21rti_internal_semantic7pixelIDE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic10resolutionE[12] = {114, 116, 76, 97, 117, 110, 99, 104, 68, 105, 109, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic6normalE[17] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic6camPosE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic4rootE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12imageEnabledE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8tileInfoE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8additiveE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8skyColorE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic7samplesE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic13hemisphericalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7pixelIDE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10resolutionE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6camPosE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4rootE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12imageEnabledE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8tileInfoE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8additiveE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8skyColorE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7samplesE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation13hemisphericalE[1];
.const .align 4 .b8 __cudart_i2opi_f[24] = {65, 144, 67, 60, 153, 149, 98, 219, 192, 221, 52, 245, 209, 87, 39, 252, 41, 21, 68, 78, 110, 131, 249, 162};

.visible .entry _Z6oxMainv(

)
{
	.local .align 4 .b8 	__local_depot0[32];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<106>;
	.reg .b16 	%rs<148>;
	.reg .f32 	%f<728>;
	.reg .b32 	%r<369>;
	.reg .b64 	%rd<286>;


	mov.u64 	%rd285, __local_depot0;
	cvta.local.u64 	%SP, %rd285;
	ld.global.v2.u32 	{%r100, %r101}, [pixelID];
	cvt.u64.u32	%rd22, %r100;
	cvt.u64.u32	%rd23, %r101;
	mov.u64 	%rd26, uvnormal;
	cvta.global.u64 	%rd21, %rd26;
	mov.u32 	%r98, 2;
	mov.u32 	%r99, 4;
	mov.u64 	%rd25, 0;
	// inline asm
	call (%rd20), _rt_buffer_get_64, (%rd21, %r98, %r99, %rd22, %rd23, %rd25, %rd25);
	// inline asm
	ld.u32 	%r1, [%rd20];
	shr.u32 	%r104, %r1, 16;
	cvt.u16.u32	%rs1, %r104;
	and.b16  	%rs7, %rs1, 255;
	cvt.u16.u32	%rs8, %r1;
	or.b16  	%rs9, %rs8, %rs7;
	setp.eq.s16	%p4, %rs9, 0;
	mov.f32 	%f679, 0f00000000;
	mov.f32 	%f680, %f679;
	mov.f32 	%f681, %f679;
	@%p4 bra 	BB0_2;

	ld.u8 	%rs10, [%rd20+1];
	and.b16  	%rs12, %rs8, 255;
	cvt.rn.f32.u16	%f148, %rs12;
	div.rn.f32 	%f149, %f148, 0f437F0000;
	fma.rn.f32 	%f150, %f149, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f151, %rs10;
	div.rn.f32 	%f152, %f151, 0f437F0000;
	fma.rn.f32 	%f153, %f152, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f154, %rs7;
	div.rn.f32 	%f155, %f154, 0f437F0000;
	fma.rn.f32 	%f156, %f155, 0f40000000, 0fBF800000;
	mul.f32 	%f157, %f153, %f153;
	fma.rn.f32 	%f158, %f150, %f150, %f157;
	fma.rn.f32 	%f159, %f156, %f156, %f158;
	sqrt.rn.f32 	%f160, %f159;
	rcp.rn.f32 	%f161, %f160;
	mul.f32 	%f679, %f150, %f161;
	mul.f32 	%f680, %f153, %f161;
	mul.f32 	%f681, %f156, %f161;

BB0_2:
	ld.global.v2.u32 	{%r105, %r106}, [pixelID];
	ld.global.v2.u32 	{%r108, %r109}, [tileInfo];
	add.s32 	%r2, %r105, %r108;
	add.s32 	%r3, %r106, %r109;
	setp.eq.f32	%p5, %f680, 0f00000000;
	setp.eq.f32	%p6, %f679, 0f00000000;
	and.pred  	%p7, %p6, %p5;
	setp.eq.f32	%p8, %f681, 0f00000000;
	and.pred  	%p9, %p7, %p8;
	@%p9 bra 	BB0_109;
	bra.uni 	BB0_3;

BB0_109:
	ld.global.u32 	%r368, [imageEnabled];
	and.b32  	%r296, %r368, 1;
	setp.eq.b32	%p99, %r296, 1;
	@!%p99 bra 	BB0_111;
	bra.uni 	BB0_110;

BB0_110:
	cvt.u64.u32	%rd173, %r3;
	cvt.u64.u32	%rd172, %r2;
	mov.u64 	%rd176, image;
	cvta.global.u64 	%rd171, %rd176;
	mov.u64 	%rd175, 0;
	// inline asm
	call (%rd170), _rt_buffer_get_64, (%rd171, %r98, %r99, %rd172, %rd173, %rd175, %rd175);
	// inline asm
	mov.u16 	%rs82, 0;
	st.v4.u8 	[%rd170], {%rs82, %rs82, %rs82, %rs82};
	ld.global.u32 	%r368, [imageEnabled];

BB0_111:
	cvt.u64.u32	%rd18, %r2;
	cvt.u64.u32	%rd19, %r3;
	and.b32  	%r299, %r368, 4;
	setp.eq.s32	%p100, %r299, 0;
	@%p100 bra 	BB0_115;

	ld.global.u32 	%r300, [additive];
	setp.eq.s32	%p101, %r300, 0;
	@%p101 bra 	BB0_114;

	mov.u64 	%rd189, image_HDR;
	cvta.global.u64 	%rd178, %rd189;
	mov.u32 	%r304, 8;
	mov.u64 	%rd188, 0;
	// inline asm
	call (%rd177), _rt_buffer_get_64, (%rd178, %r98, %r304, %rd18, %rd19, %rd188, %rd188);
	// inline asm
	ld.v4.u16 	{%rs89, %rs90, %rs91, %rs92}, [%rd177];
	// inline asm
	{  cvt.f32.f16 %f598, %rs89;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f599, %rs90;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f600, %rs91;}

	// inline asm
	// inline asm
	call (%rd183), _rt_buffer_get_64, (%rd178, %r98, %r304, %rd18, %rd19, %rd188, %rd188);
	// inline asm
	add.f32 	%f601, %f598, 0f00000000;
	add.f32 	%f602, %f599, 0f00000000;
	add.f32 	%f603, %f600, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs88, %f603;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs87, %f602;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs86, %f601;}

	// inline asm
	mov.u16 	%rs93, 0;
	st.v4.u16 	[%rd183], {%rs86, %rs87, %rs88, %rs93};
	bra.uni 	BB0_115;

BB0_3:
	ld.global.v2.u32 	{%r117, %r118}, [pixelID];
	cvt.u64.u32	%rd29, %r117;
	cvt.u64.u32	%rd30, %r118;
	mov.u64 	%rd39, uvpos;
	cvta.global.u64 	%rd28, %rd39;
	mov.u32 	%r114, 12;
	// inline asm
	call (%rd27), _rt_buffer_get_64, (%rd28, %r98, %r114, %rd29, %rd30, %rd25, %rd25);
	// inline asm
	ld.f32 	%f167, [%rd27+8];
	ld.f32 	%f168, [%rd27+4];
	ld.f32 	%f169, [%rd27];
	mul.f32 	%f170, %f169, 0f3456BF95;
	mul.f32 	%f171, %f168, 0f3456BF95;
	mul.f32 	%f172, %f167, 0f3456BF95;
	abs.f32 	%f173, %f679;
	div.rn.f32 	%f174, %f170, %f173;
	abs.f32 	%f175, %f680;
	div.rn.f32 	%f176, %f171, %f175;
	abs.f32 	%f177, %f681;
	div.rn.f32 	%f178, %f172, %f177;
	abs.f32 	%f179, %f174;
	abs.f32 	%f180, %f176;
	abs.f32 	%f181, %f178;
	mov.f32 	%f182, 0f38D1B717;
	max.f32 	%f183, %f179, %f182;
	max.f32 	%f184, %f180, %f182;
	max.f32 	%f185, %f181, %f182;
	fma.rn.f32 	%f7, %f679, %f183, %f169;
	fma.rn.f32 	%f8, %f680, %f184, %f168;
	fma.rn.f32 	%f9, %f681, %f185, %f167;
	ld.global.u32 	%r4, [hemispherical];
	setp.gt.f32	%p10, %f173, %f177;
	neg.f32 	%f186, %f680;
	selp.f32	%f187, %f186, 0f00000000, %p10;
	neg.f32 	%f188, %f681;
	selp.f32	%f189, %f679, %f188, %p10;
	selp.f32	%f190, 0f00000000, %f680, %p10;
	mul.f32 	%f191, %f189, %f189;
	fma.rn.f32 	%f192, %f187, %f187, %f191;
	fma.rn.f32 	%f193, %f190, %f190, %f192;
	sqrt.rn.f32 	%f194, %f193;
	rcp.rn.f32 	%f195, %f194;
	mul.f32 	%f10, %f187, %f195;
	mul.f32 	%f11, %f189, %f195;
	mul.f32 	%f12, %f190, %f195;
	ld.global.v2.u32 	{%r121, %r122}, [pixelID];
	cvt.u64.u32	%rd35, %r121;
	cvt.u64.u32	%rd36, %r122;
	mov.u64 	%rd40, rnd_seeds;
	cvta.global.u64 	%rd34, %rd40;
	// inline asm
	call (%rd33), _rt_buffer_get_64, (%rd34, %r98, %r99, %rd35, %rd36, %rd25, %rd25);
	// inline asm
	ld.global.u32 	%r363, [samples];
	mov.f32 	%f708, 0f00000000;
	setp.lt.s32	%p11, %r363, 1;
	@%p11 bra 	BB0_4;

	cvt.rn.f32.s32	%f201, %r363;
	rcp.rn.f32 	%f13, %f201;
	ld.u32 	%r365, [%rd33];
	mul.f32 	%f14, %f7, 0f3456BF95;
	mul.f32 	%f15, %f8, 0f3456BF95;
	mul.f32 	%f16, %f9, 0f3456BF95;
	mul.f32 	%f202, %f679, %f11;
	mul.f32 	%f203, %f680, %f10;
	sub.f32 	%f17, %f203, %f202;
	mul.f32 	%f204, %f681, %f10;
	mul.f32 	%f205, %f679, %f12;
	sub.f32 	%f18, %f205, %f204;
	mul.f32 	%f206, %f680, %f12;
	mul.f32 	%f207, %f681, %f11;
	sub.f32 	%f19, %f207, %f206;
	mov.f32 	%f708, 0f00000000;
	mov.u32 	%r338, 0;
	abs.f32 	%f282, %f15;
	abs.f32 	%f283, %f14;
	max.f32 	%f284, %f283, %f282;
	abs.f32 	%f285, %f16;
	max.f32 	%f286, %f284, %f285;
	mov.f32 	%f707, %f708;
	mov.f32 	%f706, %f708;
	mov.f32 	%f705, %f708;
	mov.f32 	%f704, %f708;

BB0_6:
	setp.lt.s32	%p12, %r363, 1;
	@%p12 bra 	BB0_57;

	mov.u32 	%r341, 0;

BB0_8:
	cvt.rn.f32.s32	%f671, %r338;
	mad.lo.s32 	%r127, %r365, 1664525, 1013904223;
	and.b32  	%r128, %r127, 16777215;
	cvt.rn.f32.u32	%f208, %r128;
	fma.rn.f32 	%f209, %f208, 0f33800000, %f671;
	mul.f32 	%f210, %f13, %f209;
	mad.lo.s32 	%r365, %r127, 1664525, 1013904223;
	and.b32  	%r129, %r365, 16777215;
	cvt.rn.f32.u32	%f211, %r129;
	cvt.rn.f32.s32	%f212, %r341;
	fma.rn.f32 	%f213, %f211, 0f33800000, %f212;
	mul.f32 	%f214, %f13, %f213;
	fma.rn.f32 	%f31, %f210, 0fC0000000, 0f3F800000;
	mul.f32 	%f215, %f31, %f31;
	mov.f32 	%f216, 0f3F800000;
	sub.f32 	%f217, %f216, %f215;
	mov.f32 	%f218, 0f00000000;
	max.f32 	%f219, %f218, %f217;
	sqrt.rn.f32 	%f32, %f219;
	mul.f32 	%f698, %f214, 0f40C90FDB;
	abs.f32 	%f34, %f698;
	setp.neu.f32	%p13, %f34, 0f7F800000;
	mov.f32 	%f692, %f698;
	@%p13 bra 	BB0_10;

	mov.f32 	%f672, 0f00000000;
	mul.rn.f32 	%f692, %f698, %f672;

BB0_10:
	mul.f32 	%f221, %f692, 0f3F22F983;
	cvt.rni.s32.f32	%r352, %f221;
	cvt.rn.f32.s32	%f222, %r352;
	neg.f32 	%f223, %f222;
	mov.f32 	%f224, 0f3FC90FDA;
	fma.rn.f32 	%f225, %f223, %f224, %f692;
	mov.f32 	%f226, 0f33A22168;
	fma.rn.f32 	%f227, %f223, %f226, %f225;
	mov.f32 	%f228, 0f27C234C5;
	fma.rn.f32 	%f693, %f223, %f228, %f227;
	abs.f32 	%f229, %f692;
	setp.leu.f32	%p14, %f229, 0f47CE4780;
	@%p14 bra 	BB0_21;

	add.u64 	%rd42, %SP, 4;
	cvta.to.local.u64 	%rd281, %rd42;
	mov.b32 	 %r15, %f692;
	shr.u32 	%r16, %r15, 23;
	shl.b32 	%r132, %r15, 8;
	or.b32  	%r17, %r132, -2147483648;
	mov.u32 	%r343, 0;
	mov.u64 	%rd282, 0;
	mov.u32 	%r344, %r343;

BB0_12:
	.pragma "nounroll";
	add.u64 	%rd280, %SP, 4;
	cvta.to.local.u64 	%rd279, %rd280;
	shl.b64 	%rd43, %rd282, 2;
	mov.u64 	%rd44, __cudart_i2opi_f;
	add.s64 	%rd45, %rd44, %rd43;
	ld.const.u32 	%r135, [%rd45];
	// inline asm
	{
	mad.lo.cc.u32   %r133, %r135, %r17, %r344;
	madc.hi.u32     %r344, %r135, %r17,  0;
	}
	// inline asm
	st.local.u32 	[%rd281], %r133;
	add.s32 	%r343, %r343, 1;
	cvt.s64.s32	%rd282, %r343;
	mul.wide.s32 	%rd48, %r343, 4;
	add.s64 	%rd281, %rd279, %rd48;
	setp.ne.s32	%p15, %r343, 6;
	@%p15 bra 	BB0_12;

	add.u64 	%rd277, %SP, 4;
	and.b32  	%r138, %r16, 255;
	add.s32 	%r139, %r138, -128;
	shr.u32 	%r140, %r139, 5;
	and.b32  	%r22, %r15, -2147483648;
	cvta.to.local.u64 	%rd50, %rd277;
	st.local.u32 	[%rd50+24], %r344;
	mov.u32 	%r141, 6;
	sub.s32 	%r142, %r141, %r140;
	mul.wide.s32 	%rd51, %r142, 4;
	add.s64 	%rd8, %rd50, %rd51;
	ld.local.u32 	%r345, [%rd8];
	ld.local.u32 	%r346, [%rd8+-4];
	and.b32  	%r25, %r16, 31;
	setp.eq.s32	%p16, %r25, 0;
	@%p16 bra 	BB0_15;

	mov.u32 	%r143, 32;
	sub.s32 	%r144, %r143, %r25;
	shr.u32 	%r145, %r346, %r144;
	shl.b32 	%r146, %r345, %r25;
	add.s32 	%r345, %r145, %r146;
	ld.local.u32 	%r147, [%rd8+-8];
	shr.u32 	%r148, %r147, %r144;
	shl.b32 	%r149, %r346, %r25;
	add.s32 	%r346, %r148, %r149;

BB0_15:
	shr.u32 	%r150, %r346, 30;
	shl.b32 	%r151, %r345, 2;
	add.s32 	%r347, %r150, %r151;
	shl.b32 	%r31, %r346, 2;
	shr.u32 	%r152, %r347, 31;
	shr.u32 	%r153, %r345, 30;
	add.s32 	%r32, %r152, %r153;
	setp.eq.s32	%p17, %r152, 0;
	@%p17 bra 	BB0_16;
	bra.uni 	BB0_17;

BB0_16:
	mov.u32 	%r348, %r22;
	mov.u32 	%r349, %r31;
	bra.uni 	BB0_18;

BB0_17:
	not.b32 	%r154, %r347;
	neg.s32 	%r349, %r31;
	setp.eq.s32	%p18, %r31, 0;
	selp.u32	%r155, 1, 0, %p18;
	add.s32 	%r347, %r155, %r154;
	xor.b32  	%r348, %r22, -2147483648;

BB0_18:
	clz.b32 	%r351, %r347;
	setp.eq.s32	%p19, %r351, 0;
	shl.b32 	%r156, %r347, %r351;
	mov.u32 	%r157, 32;
	sub.s32 	%r158, %r157, %r351;
	shr.u32 	%r159, %r349, %r158;
	add.s32 	%r160, %r159, %r156;
	selp.b32	%r40, %r347, %r160, %p19;
	mov.u32 	%r161, -921707870;
	mul.hi.u32 	%r350, %r40, %r161;
	setp.eq.s32	%p20, %r22, 0;
	neg.s32 	%r162, %r32;
	selp.b32	%r352, %r32, %r162, %p20;
	setp.lt.s32	%p21, %r350, 1;
	@%p21 bra 	BB0_20;

	mul.lo.s32 	%r163, %r40, -921707870;
	shr.u32 	%r164, %r163, 31;
	shl.b32 	%r165, %r350, 1;
	add.s32 	%r350, %r164, %r165;
	add.s32 	%r351, %r351, 1;

BB0_20:
	mov.u32 	%r166, 126;
	sub.s32 	%r167, %r166, %r351;
	shl.b32 	%r168, %r167, 23;
	add.s32 	%r169, %r350, 1;
	shr.u32 	%r170, %r169, 7;
	add.s32 	%r171, %r170, 1;
	shr.u32 	%r172, %r171, 1;
	add.s32 	%r173, %r172, %r168;
	or.b32  	%r174, %r173, %r348;
	mov.b32 	 %f693, %r174;

BB0_21:
	mul.rn.f32 	%f40, %f693, %f693;
	add.s32 	%r48, %r352, 1;
	and.b32  	%r49, %r48, 1;
	setp.eq.s32	%p22, %r49, 0;
	@%p22 bra 	BB0_23;
	bra.uni 	BB0_22;

BB0_23:
	mov.f32 	%f232, 0f3C08839E;
	mov.f32 	%f233, 0fB94CA1F9;
	fma.rn.f32 	%f694, %f233, %f40, %f232;
	bra.uni 	BB0_24;

BB0_22:
	mov.f32 	%f230, 0fBAB6061A;
	mov.f32 	%f231, 0f37CCF5CE;
	fma.rn.f32 	%f694, %f231, %f40, %f230;

BB0_24:
	@%p22 bra 	BB0_26;
	bra.uni 	BB0_25;

BB0_26:
	mov.f32 	%f675, 0f00000000;
	mov.f32 	%f237, 0fBE2AAAA3;
	fma.rn.f32 	%f238, %f694, %f40, %f237;
	fma.rn.f32 	%f695, %f238, %f40, %f675;
	bra.uni 	BB0_27;

BB0_25:
	mov.f32 	%f234, 0f3D2AAAA5;
	fma.rn.f32 	%f235, %f694, %f40, %f234;
	mov.f32 	%f236, 0fBF000000;
	fma.rn.f32 	%f695, %f235, %f40, %f236;

BB0_27:
	fma.rn.f32 	%f696, %f695, %f693, %f693;
	@%p22 bra 	BB0_29;

	mov.f32 	%f664, 0f3F800000;
	fma.rn.f32 	%f696, %f695, %f40, %f664;

BB0_29:
	and.b32  	%r175, %r48, 2;
	setp.eq.s32	%p25, %r175, 0;
	@%p25 bra 	BB0_31;

	mov.f32 	%f665, 0f00000000;
	mov.f32 	%f242, 0fBF800000;
	fma.rn.f32 	%f696, %f696, %f242, %f665;

BB0_31:
	@%p13 bra 	BB0_33;

	mov.f32 	%f674, 0f00000000;
	mul.rn.f32 	%f698, %f698, %f674;

BB0_33:
	mov.f32 	%f668, 0f27C234C5;
	mov.f32 	%f667, 0f33A22168;
	mov.f32 	%f666, 0f3FC90FDA;
	mul.f32 	%f244, %f698, 0f3F22F983;
	cvt.rni.s32.f32	%r362, %f244;
	cvt.rn.f32.s32	%f245, %r362;
	neg.f32 	%f246, %f245;
	fma.rn.f32 	%f248, %f246, %f666, %f698;
	fma.rn.f32 	%f250, %f246, %f667, %f248;
	fma.rn.f32 	%f699, %f246, %f668, %f250;
	abs.f32 	%f252, %f698;
	setp.leu.f32	%p27, %f252, 0f47CE4780;
	@%p27 bra 	BB0_44;

	add.u64 	%rd53, %SP, 4;
	cvta.to.local.u64 	%rd9, %rd53;
	mov.b32 	 %r51, %f698;
	shr.u32 	%r52, %r51, 23;
	shl.b32 	%r178, %r51, 8;
	or.b32  	%r53, %r178, -2147483648;
	mov.u32 	%r353, 0;
	mov.u64 	%rd283, %rd9;
	mov.u64 	%rd284, %rd25;
	mov.u32 	%r354, %r353;

BB0_35:
	.pragma "nounroll";
	shl.b64 	%rd54, %rd284, 2;
	mov.u64 	%rd55, __cudart_i2opi_f;
	add.s64 	%rd56, %rd55, %rd54;
	ld.const.u32 	%r181, [%rd56];
	// inline asm
	{
	mad.lo.cc.u32   %r179, %r181, %r53, %r354;
	madc.hi.u32     %r354, %r181, %r53,  0;
	}
	// inline asm
	st.local.u32 	[%rd283], %r179;
	add.s32 	%r353, %r353, 1;
	cvt.s64.s32	%rd284, %r353;
	mul.wide.s32 	%rd57, %r353, 4;
	add.s64 	%rd283, %rd9, %rd57;
	setp.ne.s32	%p28, %r353, 6;
	@%p28 bra 	BB0_35;

	add.u64 	%rd278, %SP, 4;
	and.b32  	%r184, %r52, 255;
	add.s32 	%r185, %r184, -128;
	shr.u32 	%r186, %r185, 5;
	and.b32  	%r58, %r51, -2147483648;
	cvta.to.local.u64 	%rd59, %rd278;
	st.local.u32 	[%rd59+24], %r354;
	mov.u32 	%r187, 6;
	sub.s32 	%r188, %r187, %r186;
	mul.wide.s32 	%rd60, %r188, 4;
	add.s64 	%rd15, %rd59, %rd60;
	ld.local.u32 	%r355, [%rd15];
	ld.local.u32 	%r356, [%rd15+-4];
	and.b32  	%r61, %r52, 31;
	setp.eq.s32	%p29, %r61, 0;
	@%p29 bra 	BB0_38;

	mov.u32 	%r189, 32;
	sub.s32 	%r190, %r189, %r61;
	shr.u32 	%r191, %r356, %r190;
	shl.b32 	%r192, %r355, %r61;
	add.s32 	%r355, %r191, %r192;
	ld.local.u32 	%r193, [%rd15+-8];
	shr.u32 	%r194, %r193, %r190;
	shl.b32 	%r195, %r356, %r61;
	add.s32 	%r356, %r194, %r195;

BB0_38:
	shr.u32 	%r196, %r356, 30;
	shl.b32 	%r197, %r355, 2;
	add.s32 	%r357, %r196, %r197;
	shl.b32 	%r67, %r356, 2;
	shr.u32 	%r198, %r357, 31;
	shr.u32 	%r199, %r355, 30;
	add.s32 	%r68, %r198, %r199;
	setp.eq.s32	%p30, %r198, 0;
	@%p30 bra 	BB0_39;
	bra.uni 	BB0_40;

BB0_39:
	mov.u32 	%r358, %r58;
	mov.u32 	%r359, %r67;
	bra.uni 	BB0_41;

BB0_40:
	not.b32 	%r200, %r357;
	neg.s32 	%r359, %r67;
	setp.eq.s32	%p31, %r67, 0;
	selp.u32	%r201, 1, 0, %p31;
	add.s32 	%r357, %r201, %r200;
	xor.b32  	%r358, %r58, -2147483648;

BB0_41:
	clz.b32 	%r361, %r357;
	setp.eq.s32	%p32, %r361, 0;
	shl.b32 	%r202, %r357, %r361;
	mov.u32 	%r203, 32;
	sub.s32 	%r204, %r203, %r361;
	shr.u32 	%r205, %r359, %r204;
	add.s32 	%r206, %r205, %r202;
	selp.b32	%r76, %r357, %r206, %p32;
	mov.u32 	%r207, -921707870;
	mul.hi.u32 	%r360, %r76, %r207;
	setp.eq.s32	%p33, %r58, 0;
	neg.s32 	%r208, %r68;
	selp.b32	%r362, %r68, %r208, %p33;
	setp.lt.s32	%p34, %r360, 1;
	@%p34 bra 	BB0_43;

	mul.lo.s32 	%r209, %r76, -921707870;
	shr.u32 	%r210, %r209, 31;
	shl.b32 	%r211, %r360, 1;
	add.s32 	%r360, %r210, %r211;
	add.s32 	%r361, %r361, 1;

BB0_43:
	mov.u32 	%r212, 126;
	sub.s32 	%r213, %r212, %r361;
	shl.b32 	%r214, %r213, 23;
	add.s32 	%r215, %r360, 1;
	shr.u32 	%r216, %r215, 7;
	add.s32 	%r217, %r216, 1;
	shr.u32 	%r218, %r217, 1;
	add.s32 	%r219, %r218, %r214;
	or.b32  	%r220, %r219, %r358;
	mov.b32 	 %f699, %r220;

BB0_44:
	mul.rn.f32 	%f57, %f699, %f699;
	and.b32  	%r84, %r362, 1;
	setp.eq.s32	%p35, %r84, 0;
	@%p35 bra 	BB0_46;
	bra.uni 	BB0_45;

BB0_46:
	mov.f32 	%f255, 0f3C08839E;
	mov.f32 	%f256, 0fB94CA1F9;
	fma.rn.f32 	%f700, %f256, %f57, %f255;
	bra.uni 	BB0_47;

BB0_45:
	mov.f32 	%f253, 0fBAB6061A;
	mov.f32 	%f254, 0f37CCF5CE;
	fma.rn.f32 	%f700, %f254, %f57, %f253;

BB0_47:
	@%p35 bra 	BB0_49;
	bra.uni 	BB0_48;

BB0_49:
	mov.f32 	%f673, 0f00000000;
	mov.f32 	%f260, 0fBE2AAAA3;
	fma.rn.f32 	%f261, %f700, %f57, %f260;
	fma.rn.f32 	%f701, %f261, %f57, %f673;
	bra.uni 	BB0_50;

BB0_48:
	mov.f32 	%f257, 0f3D2AAAA5;
	fma.rn.f32 	%f258, %f700, %f57, %f257;
	mov.f32 	%f259, 0fBF000000;
	fma.rn.f32 	%f701, %f258, %f57, %f259;

BB0_50:
	fma.rn.f32 	%f702, %f701, %f699, %f699;
	@%p35 bra 	BB0_52;

	mov.f32 	%f669, 0f3F800000;
	fma.rn.f32 	%f702, %f701, %f57, %f669;

BB0_52:
	and.b32  	%r221, %r362, 2;
	setp.eq.s32	%p38, %r221, 0;
	@%p38 bra 	BB0_54;

	mov.f32 	%f670, 0f00000000;
	mov.f32 	%f265, 0fBF800000;
	fma.rn.f32 	%f702, %f702, %f265, %f670;

BB0_54:
	mul.f32 	%f266, %f32, %f696;
	mul.f32 	%f267, %f32, %f702;
	mul.f32 	%f268, %f10, %f267;
	mul.f32 	%f269, %f11, %f267;
	mul.f32 	%f270, %f12, %f267;
	fma.rn.f32 	%f271, %f19, %f266, %f268;
	fma.rn.f32 	%f272, %f18, %f266, %f269;
	fma.rn.f32 	%f273, %f17, %f266, %f270;
	fma.rn.f32 	%f69, %f679, %f31, %f271;
	fma.rn.f32 	%f70, %f680, %f31, %f272;
	fma.rn.f32 	%f71, %f681, %f31, %f273;
	setp.gt.f32	%p39, %f70, 0f00000000;
	setp.eq.s32	%p40, %r4, 0;
	or.pred  	%p41, %p40, %p39;
	@!%p41 bra 	BB0_56;
	bra.uni 	BB0_55;

BB0_55:
	mov.u32 	%r336, 4;
	add.u64 	%rd61, %SP, 0;
	cvta.to.local.u64 	%rd62, %rd61;
	max.f32 	%f280, %f286, %f182;
	mov.u32 	%r225, 1065353216;
	st.local.u32 	[%rd62], %r225;
	ld.global.u32 	%r222, [root];
	mov.u32 	%r223, 1;
	mov.f32 	%f281, 0f6C4ECB8F;
	// inline asm
	call _rt_trace_64, (%r222, %f7, %f8, %f9, %f69, %f70, %f71, %r223, %f280, %f281, %rd61, %r336);
	// inline asm
	mul.f32 	%f288, %f680, %f70;
	fma.rn.f32 	%f289, %f679, %f69, %f288;
	fma.rn.f32 	%f290, %f681, %f71, %f289;
	ld.local.f32 	%f291, [%rd62];
	fma.rn.f32 	%f706, %f69, %f291, %f706;
	fma.rn.f32 	%f707, %f70, %f291, %f707;
	fma.rn.f32 	%f708, %f71, %f291, %f708;
	add.f32 	%f705, %f705, %f291;
	cvt.sat.f32.f32	%f292, %f290;
	fma.rn.f32 	%f704, %f292, %f291, %f704;
	ld.global.u32 	%r363, [samples];

BB0_56:
	add.s32 	%r341, %r341, 1;
	setp.lt.s32	%p42, %r341, %r363;
	@%p42 bra 	BB0_8;

BB0_57:
	add.s32 	%r338, %r338, 1;
	setp.lt.s32	%p43, %r338, %r363;
	@%p43 bra 	BB0_6;
	bra.uni 	BB0_58;

BB0_4:
	mov.f32 	%f707, %f708;
	mov.f32 	%f706, %f708;
	mov.f32 	%f705, %f708;
	mov.f32 	%f704, %f708;

BB0_58:
	mul.lo.s32 	%r226, %r363, %r363;
	cvt.rn.f32.s32	%f293, %r226;
	div.rn.f32 	%f294, %f704, %f293;
	div.rn.f32 	%f92, %f705, %f293;
	div.rn.f32 	%f93, %f706, %f293;
	div.rn.f32 	%f94, %f707, %f293;
	div.rn.f32 	%f95, %f708, %f293;
	add.f32 	%f295, %f294, %f294;
	ld.global.f32 	%f296, [skyColor];
	mul.f32 	%f96, %f295, %f296;
	ld.global.f32 	%f297, [skyColor+4];
	mul.f32 	%f97, %f295, %f297;
	ld.global.f32 	%f298, [skyColor+8];
	mul.f32 	%f98, %f295, %f298;
	ld.global.u32 	%r367, [imageEnabled];
	and.b32  	%r227, %r367, 1;
	setp.eq.b32	%p44, %r227, 1;
	@!%p44 bra 	BB0_93;
	bra.uni 	BB0_59;

BB0_59:
	abs.f32 	%f100, %f96;
	setp.lt.f32	%p45, %f100, 0f00800000;
	mul.f32 	%f304, %f100, 0f4B800000;
	selp.f32	%f305, 0fC3170000, 0fC2FE0000, %p45;
	selp.f32	%f306, %f304, %f100, %p45;
	mov.b32 	 %r228, %f306;
	and.b32  	%r229, %r228, 8388607;
	or.b32  	%r230, %r229, 1065353216;
	mov.b32 	 %f307, %r230;
	shr.u32 	%r231, %r228, 23;
	cvt.rn.f32.u32	%f308, %r231;
	add.f32 	%f309, %f305, %f308;
	setp.gt.f32	%p46, %f307, 0f3FB504F3;
	mul.f32 	%f310, %f307, 0f3F000000;
	add.f32 	%f311, %f309, 0f3F800000;
	selp.f32	%f312, %f310, %f307, %p46;
	selp.f32	%f313, %f311, %f309, %p46;
	add.f32 	%f314, %f312, 0fBF800000;
	add.f32 	%f300, %f312, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f299,%f300;
	// inline asm
	add.f32 	%f315, %f314, %f314;
	mul.f32 	%f316, %f299, %f315;
	mul.f32 	%f317, %f316, %f316;
	mov.f32 	%f318, 0f3C4CAF63;
	mov.f32 	%f319, 0f3B18F0FE;
	fma.rn.f32 	%f320, %f319, %f317, %f318;
	mov.f32 	%f321, 0f3DAAAABD;
	fma.rn.f32 	%f322, %f320, %f317, %f321;
	mul.rn.f32 	%f323, %f322, %f317;
	mul.rn.f32 	%f324, %f323, %f316;
	sub.f32 	%f325, %f314, %f316;
	neg.f32 	%f326, %f316;
	add.f32 	%f327, %f325, %f325;
	fma.rn.f32 	%f328, %f326, %f314, %f327;
	mul.rn.f32 	%f329, %f299, %f328;
	add.f32 	%f330, %f324, %f316;
	sub.f32 	%f331, %f316, %f330;
	add.f32 	%f332, %f324, %f331;
	add.f32 	%f333, %f329, %f332;
	add.f32 	%f334, %f330, %f333;
	sub.f32 	%f335, %f330, %f334;
	add.f32 	%f336, %f333, %f335;
	mov.f32 	%f337, 0f3F317200;
	mul.rn.f32 	%f338, %f313, %f337;
	mov.f32 	%f339, 0f35BFBE8E;
	mul.rn.f32 	%f340, %f313, %f339;
	add.f32 	%f341, %f338, %f334;
	sub.f32 	%f342, %f338, %f341;
	add.f32 	%f343, %f334, %f342;
	add.f32 	%f344, %f336, %f343;
	add.f32 	%f345, %f340, %f344;
	add.f32 	%f346, %f341, %f345;
	sub.f32 	%f347, %f341, %f346;
	add.f32 	%f348, %f345, %f347;
	mov.f32 	%f349, 0f3EE66666;
	mul.rn.f32 	%f350, %f349, %f346;
	neg.f32 	%f351, %f350;
	fma.rn.f32 	%f352, %f349, %f346, %f351;
	fma.rn.f32 	%f353, %f349, %f348, %f352;
	mov.f32 	%f354, 0f00000000;
	fma.rn.f32 	%f355, %f354, %f346, %f353;
	add.rn.f32 	%f356, %f350, %f355;
	neg.f32 	%f357, %f356;
	add.rn.f32 	%f358, %f350, %f357;
	add.rn.f32 	%f359, %f358, %f355;
	mov.b32 	 %r232, %f356;
	setp.eq.s32	%p47, %r232, 1118925336;
	add.s32 	%r233, %r232, -1;
	mov.b32 	 %f360, %r233;
	add.f32 	%f361, %f359, 0f37000000;
	selp.f32	%f362, %f360, %f356, %p47;
	selp.f32	%f101, %f361, %f359, %p47;
	mul.f32 	%f363, %f362, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f364, %f363;
	mov.f32 	%f365, 0fBF317200;
	fma.rn.f32 	%f366, %f364, %f365, %f362;
	mov.f32 	%f367, 0fB5BFBE8E;
	fma.rn.f32 	%f368, %f364, %f367, %f366;
	mul.f32 	%f369, %f368, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f370, %f369;
	add.f32 	%f371, %f364, 0f00000000;
	ex2.approx.f32 	%f372, %f371;
	mul.f32 	%f373, %f370, %f372;
	setp.lt.f32	%p48, %f362, 0fC2D20000;
	selp.f32	%f374, 0f00000000, %f373, %p48;
	setp.gt.f32	%p49, %f362, 0f42D20000;
	selp.f32	%f719, 0f7F800000, %f374, %p49;
	setp.eq.f32	%p50, %f719, 0f7F800000;
	@%p50 bra 	BB0_61;

	fma.rn.f32 	%f719, %f719, %f101, %f719;

BB0_61:
	mov.f32 	%f636, 0f3E666666;
	cvt.rzi.f32.f32	%f635, %f636;
	fma.rn.f32 	%f634, %f635, 0fC0000000, 0f3EE66666;
	abs.f32 	%f633, %f634;
	setp.lt.f32	%p51, %f96, 0f00000000;
	setp.eq.f32	%p52, %f633, 0f3F800000;
	and.pred  	%p1, %p51, %p52;
	mov.b32 	 %r234, %f719;
	xor.b32  	%r235, %r234, -2147483648;
	mov.b32 	 %f375, %r235;
	selp.f32	%f721, %f375, %f719, %p1;
	setp.eq.f32	%p53, %f96, 0f00000000;
	@%p53 bra 	BB0_64;
	bra.uni 	BB0_62;

BB0_64:
	add.f32 	%f378, %f96, %f96;
	selp.f32	%f721, %f378, 0f00000000, %p52;
	bra.uni 	BB0_65;

BB0_114:
	mov.u64 	%rd196, image_HDR;
	cvta.global.u64 	%rd191, %rd196;
	mov.u32 	%r306, 8;
	mov.u64 	%rd195, 0;
	// inline asm
	call (%rd190), _rt_buffer_get_64, (%rd191, %r98, %r306, %rd18, %rd19, %rd195, %rd195);
	// inline asm
	mov.f32 	%f604, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs94, %f604;}

	// inline asm
	mov.u16 	%rs95, 0;
	st.v4.u16 	[%rd190], {%rs94, %rs94, %rs94, %rs95};

BB0_115:
	ld.global.u32 	%r307, [additive];
	setp.eq.s32	%p102, %r307, 0;
	@%p102 bra 	BB0_117;

	mov.u64 	%rd209, image_RNM0;
	cvta.global.u64 	%rd198, %rd209;
	mov.u32 	%r311, 8;
	mov.u64 	%rd208, 0;
	// inline asm
	call (%rd197), _rt_buffer_get_64, (%rd198, %r98, %r311, %rd18, %rd19, %rd208, %rd208);
	// inline asm
	ld.v4.u16 	{%rs102, %rs103, %rs104, %rs105}, [%rd197];
	// inline asm
	{  cvt.f32.f16 %f605, %rs102;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f606, %rs103;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f607, %rs104;}

	// inline asm
	// inline asm
	call (%rd203), _rt_buffer_get_64, (%rd198, %r98, %r311, %rd18, %rd19, %rd208, %rd208);
	// inline asm
	add.f32 	%f608, %f605, 0f00000000;
	add.f32 	%f609, %f606, 0f00000000;
	add.f32 	%f610, %f607, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs101, %f610;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs100, %f609;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs99, %f608;}

	// inline asm
	mov.u16 	%rs106, 0;
	st.v4.u16 	[%rd203], {%rs99, %rs100, %rs101, %rs106};
	bra.uni 	BB0_118;

BB0_117:
	mov.u64 	%rd216, image_RNM0;
	cvta.global.u64 	%rd211, %rd216;
	mov.u32 	%r313, 8;
	mov.u64 	%rd215, 0;
	// inline asm
	call (%rd210), _rt_buffer_get_64, (%rd211, %r98, %r313, %rd18, %rd19, %rd215, %rd215);
	// inline asm
	mov.f32 	%f611, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs107, %f611;}

	// inline asm
	mov.u16 	%rs108, 0;
	st.v4.u16 	[%rd210], {%rs107, %rs107, %rs107, %rs108};

BB0_118:
	ld.global.u32 	%r314, [additive];
	setp.eq.s32	%p103, %r314, 0;
	@%p103 bra 	BB0_120;

	mov.u64 	%rd229, image_RNM1;
	cvta.global.u64 	%rd218, %rd229;
	mov.u32 	%r318, 8;
	mov.u64 	%rd228, 0;
	// inline asm
	call (%rd217), _rt_buffer_get_64, (%rd218, %r98, %r318, %rd18, %rd19, %rd228, %rd228);
	// inline asm
	ld.v4.u16 	{%rs115, %rs116, %rs117, %rs118}, [%rd217];
	// inline asm
	{  cvt.f32.f16 %f612, %rs115;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f613, %rs116;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f614, %rs117;}

	// inline asm
	// inline asm
	call (%rd223), _rt_buffer_get_64, (%rd218, %r98, %r318, %rd18, %rd19, %rd228, %rd228);
	// inline asm
	add.f32 	%f615, %f612, 0f00000000;
	add.f32 	%f616, %f613, 0f00000000;
	add.f32 	%f617, %f614, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs114, %f617;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs113, %f616;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs112, %f615;}

	// inline asm
	mov.u16 	%rs119, 0;
	st.v4.u16 	[%rd223], {%rs112, %rs113, %rs114, %rs119};
	bra.uni 	BB0_121;

BB0_120:
	mov.u64 	%rd236, image_RNM1;
	cvta.global.u64 	%rd231, %rd236;
	mov.u32 	%r320, 8;
	mov.u64 	%rd235, 0;
	// inline asm
	call (%rd230), _rt_buffer_get_64, (%rd231, %r98, %r320, %rd18, %rd19, %rd235, %rd235);
	// inline asm
	mov.f32 	%f618, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs120, %f618;}

	// inline asm
	mov.u16 	%rs121, 0;
	st.v4.u16 	[%rd230], {%rs120, %rs120, %rs120, %rs121};

BB0_121:
	ld.global.u32 	%r321, [additive];
	setp.eq.s32	%p104, %r321, 0;
	@%p104 bra 	BB0_123;

	mov.u64 	%rd249, image_RNM2;
	cvta.global.u64 	%rd238, %rd249;
	mov.u32 	%r325, 8;
	mov.u64 	%rd248, 0;
	// inline asm
	call (%rd237), _rt_buffer_get_64, (%rd238, %r98, %r325, %rd18, %rd19, %rd248, %rd248);
	// inline asm
	ld.v4.u16 	{%rs128, %rs129, %rs130, %rs131}, [%rd237];
	// inline asm
	{  cvt.f32.f16 %f619, %rs128;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f620, %rs129;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f621, %rs130;}

	// inline asm
	// inline asm
	call (%rd243), _rt_buffer_get_64, (%rd238, %r98, %r325, %rd18, %rd19, %rd248, %rd248);
	// inline asm
	add.f32 	%f622, %f619, 0f00000000;
	add.f32 	%f623, %f620, 0f00000000;
	add.f32 	%f624, %f621, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs127, %f624;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs126, %f623;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs125, %f622;}

	// inline asm
	mov.u16 	%rs132, 0;
	st.v4.u16 	[%rd243], {%rs125, %rs126, %rs127, %rs132};
	bra.uni 	BB0_124;

BB0_123:
	mov.u64 	%rd256, image_RNM2;
	cvta.global.u64 	%rd251, %rd256;
	mov.u32 	%r327, 8;
	mov.u64 	%rd255, 0;
	// inline asm
	call (%rd250), _rt_buffer_get_64, (%rd251, %r98, %r327, %rd18, %rd19, %rd255, %rd255);
	// inline asm
	mov.f32 	%f625, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs133, %f625;}

	// inline asm
	mov.u16 	%rs134, 0;
	st.v4.u16 	[%rd250], {%rs133, %rs133, %rs133, %rs134};

BB0_124:
	ld.global.u32 	%r328, [additive];
	setp.eq.s32	%p105, %r328, 0;
	@%p105 bra 	BB0_126;

	mov.u64 	%rd269, image_RNM3;
	cvta.global.u64 	%rd258, %rd269;
	mov.u32 	%r332, 8;
	mov.u64 	%rd268, 0;
	// inline asm
	call (%rd257), _rt_buffer_get_64, (%rd258, %r98, %r332, %rd18, %rd19, %rd268, %rd268);
	// inline asm
	ld.v4.u16 	{%rs141, %rs142, %rs143, %rs144}, [%rd257];
	// inline asm
	{  cvt.f32.f16 %f626, %rs141;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f627, %rs142;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f628, %rs143;}

	// inline asm
	// inline asm
	call (%rd263), _rt_buffer_get_64, (%rd258, %r98, %r332, %rd18, %rd19, %rd268, %rd268);
	// inline asm
	add.f32 	%f629, %f626, 0f00000000;
	add.f32 	%f630, %f627, 0f00000000;
	add.f32 	%f631, %f628, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs140, %f631;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs139, %f630;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs138, %f629;}

	// inline asm
	mov.u16 	%rs145, 0;
	st.v4.u16 	[%rd263], {%rs138, %rs139, %rs140, %rs145};
	bra.uni 	BB0_127;

BB0_126:
	mov.u64 	%rd276, image_RNM3;
	cvta.global.u64 	%rd271, %rd276;
	mov.u32 	%r334, 8;
	mov.u64 	%rd275, 0;
	// inline asm
	call (%rd270), _rt_buffer_get_64, (%rd271, %r98, %r334, %rd18, %rd19, %rd275, %rd275);
	// inline asm
	mov.f32 	%f632, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs146, %f632;}

	// inline asm
	mov.u16 	%rs147, 0;
	st.v4.u16 	[%rd270], {%rs146, %rs146, %rs146, %rs147};
	bra.uni 	BB0_127;

BB0_62:
	setp.geu.f32	%p54, %f96, 0f00000000;
	@%p54 bra 	BB0_65;

	mov.f32 	%f660, 0f3EE66666;
	cvt.rzi.f32.f32	%f377, %f660;
	setp.neu.f32	%p55, %f377, 0f3EE66666;
	selp.f32	%f721, 0f7FFFFFFF, %f721, %p55;

BB0_65:
	abs.f32 	%f637, %f96;
	add.f32 	%f379, %f637, 0f3EE66666;
	mov.b32 	 %r236, %f379;
	setp.lt.s32	%p57, %r236, 2139095040;
	@%p57 bra 	BB0_70;

	abs.f32 	%f658, %f96;
	setp.gtu.f32	%p58, %f658, 0f7F800000;
	@%p58 bra 	BB0_69;
	bra.uni 	BB0_67;

BB0_69:
	add.f32 	%f721, %f96, 0f3EE66666;
	bra.uni 	BB0_70;

BB0_67:
	abs.f32 	%f659, %f96;
	setp.neu.f32	%p59, %f659, 0f7F800000;
	@%p59 bra 	BB0_70;

	selp.f32	%f721, 0fFF800000, 0f7F800000, %p1;

BB0_70:
	mov.f32 	%f646, 0fB5BFBE8E;
	mov.f32 	%f645, 0fBF317200;
	mov.f32 	%f644, 0f00000000;
	mov.f32 	%f643, 0f35BFBE8E;
	mov.f32 	%f642, 0f3F317200;
	mov.f32 	%f641, 0f3DAAAABD;
	mov.f32 	%f640, 0f3C4CAF63;
	mov.f32 	%f639, 0f3B18F0FE;
	mov.f32 	%f638, 0f3EE66666;
	setp.eq.f32	%p60, %f96, 0f3F800000;
	selp.f32	%f112, 0f3F800000, %f721, %p60;
	abs.f32 	%f113, %f97;
	setp.lt.f32	%p61, %f113, 0f00800000;
	mul.f32 	%f382, %f113, 0f4B800000;
	selp.f32	%f383, 0fC3170000, 0fC2FE0000, %p61;
	selp.f32	%f384, %f382, %f113, %p61;
	mov.b32 	 %r237, %f384;
	and.b32  	%r238, %r237, 8388607;
	or.b32  	%r239, %r238, 1065353216;
	mov.b32 	 %f385, %r239;
	shr.u32 	%r240, %r237, 23;
	cvt.rn.f32.u32	%f386, %r240;
	add.f32 	%f387, %f383, %f386;
	setp.gt.f32	%p62, %f385, 0f3FB504F3;
	mul.f32 	%f388, %f385, 0f3F000000;
	add.f32 	%f389, %f387, 0f3F800000;
	selp.f32	%f390, %f388, %f385, %p62;
	selp.f32	%f391, %f389, %f387, %p62;
	add.f32 	%f392, %f390, 0fBF800000;
	add.f32 	%f381, %f390, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f380,%f381;
	// inline asm
	add.f32 	%f393, %f392, %f392;
	mul.f32 	%f394, %f380, %f393;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f398, %f639, %f395, %f640;
	fma.rn.f32 	%f400, %f398, %f395, %f641;
	mul.rn.f32 	%f401, %f400, %f395;
	mul.rn.f32 	%f402, %f401, %f394;
	sub.f32 	%f403, %f392, %f394;
	neg.f32 	%f404, %f394;
	add.f32 	%f405, %f403, %f403;
	fma.rn.f32 	%f406, %f404, %f392, %f405;
	mul.rn.f32 	%f407, %f380, %f406;
	add.f32 	%f408, %f402, %f394;
	sub.f32 	%f409, %f394, %f408;
	add.f32 	%f410, %f402, %f409;
	add.f32 	%f411, %f407, %f410;
	add.f32 	%f412, %f408, %f411;
	sub.f32 	%f413, %f408, %f412;
	add.f32 	%f414, %f411, %f413;
	mul.rn.f32 	%f416, %f391, %f642;
	mul.rn.f32 	%f418, %f391, %f643;
	add.f32 	%f419, %f416, %f412;
	sub.f32 	%f420, %f416, %f419;
	add.f32 	%f421, %f412, %f420;
	add.f32 	%f422, %f414, %f421;
	add.f32 	%f423, %f418, %f422;
	add.f32 	%f424, %f419, %f423;
	sub.f32 	%f425, %f419, %f424;
	add.f32 	%f426, %f423, %f425;
	mul.rn.f32 	%f428, %f638, %f424;
	neg.f32 	%f429, %f428;
	fma.rn.f32 	%f430, %f638, %f424, %f429;
	fma.rn.f32 	%f431, %f638, %f426, %f430;
	fma.rn.f32 	%f433, %f644, %f424, %f431;
	add.rn.f32 	%f434, %f428, %f433;
	neg.f32 	%f435, %f434;
	add.rn.f32 	%f436, %f428, %f435;
	add.rn.f32 	%f437, %f436, %f433;
	mov.b32 	 %r241, %f434;
	setp.eq.s32	%p63, %r241, 1118925336;
	add.s32 	%r242, %r241, -1;
	mov.b32 	 %f438, %r242;
	add.f32 	%f439, %f437, 0f37000000;
	selp.f32	%f440, %f438, %f434, %p63;
	selp.f32	%f114, %f439, %f437, %p63;
	mul.f32 	%f441, %f440, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f442, %f441;
	fma.rn.f32 	%f444, %f442, %f645, %f440;
	fma.rn.f32 	%f446, %f442, %f646, %f444;
	mul.f32 	%f447, %f446, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f448, %f447;
	add.f32 	%f449, %f442, 0f00000000;
	ex2.approx.f32 	%f450, %f449;
	mul.f32 	%f451, %f448, %f450;
	setp.lt.f32	%p64, %f440, 0fC2D20000;
	selp.f32	%f452, 0f00000000, %f451, %p64;
	setp.gt.f32	%p65, %f440, 0f42D20000;
	selp.f32	%f722, 0f7F800000, %f452, %p65;
	setp.eq.f32	%p66, %f722, 0f7F800000;
	@%p66 bra 	BB0_72;

	fma.rn.f32 	%f722, %f722, %f114, %f722;

BB0_72:
	setp.lt.f32	%p67, %f97, 0f00000000;
	and.pred  	%p2, %p67, %p52;
	mov.b32 	 %r243, %f722;
	xor.b32  	%r244, %r243, -2147483648;
	mov.b32 	 %f453, %r244;
	selp.f32	%f724, %f453, %f722, %p2;
	setp.eq.f32	%p69, %f97, 0f00000000;
	@%p69 bra 	BB0_75;
	bra.uni 	BB0_73;

BB0_75:
	add.f32 	%f456, %f97, %f97;
	selp.f32	%f724, %f456, 0f00000000, %p52;
	bra.uni 	BB0_76;

BB0_73:
	setp.geu.f32	%p70, %f97, 0f00000000;
	@%p70 bra 	BB0_76;

	mov.f32 	%f657, 0f3EE66666;
	cvt.rzi.f32.f32	%f455, %f657;
	setp.neu.f32	%p71, %f455, 0f3EE66666;
	selp.f32	%f724, 0f7FFFFFFF, %f724, %p71;

BB0_76:
	abs.f32 	%f661, %f97;
	add.f32 	%f457, %f661, 0f3EE66666;
	mov.b32 	 %r245, %f457;
	setp.lt.s32	%p73, %r245, 2139095040;
	@%p73 bra 	BB0_81;

	abs.f32 	%f662, %f97;
	setp.gtu.f32	%p74, %f662, 0f7F800000;
	@%p74 bra 	BB0_80;
	bra.uni 	BB0_78;

BB0_80:
	add.f32 	%f724, %f97, 0f3EE66666;
	bra.uni 	BB0_81;

BB0_78:
	abs.f32 	%f663, %f97;
	setp.neu.f32	%p75, %f663, 0f7F800000;
	@%p75 bra 	BB0_81;

	selp.f32	%f724, 0fFF800000, 0f7F800000, %p2;

BB0_81:
	mov.f32 	%f655, 0fB5BFBE8E;
	mov.f32 	%f654, 0fBF317200;
	mov.f32 	%f653, 0f00000000;
	mov.f32 	%f652, 0f35BFBE8E;
	mov.f32 	%f651, 0f3F317200;
	mov.f32 	%f650, 0f3DAAAABD;
	mov.f32 	%f649, 0f3C4CAF63;
	mov.f32 	%f648, 0f3B18F0FE;
	mov.f32 	%f647, 0f3EE66666;
	setp.eq.f32	%p76, %f97, 0f3F800000;
	selp.f32	%f125, 0f3F800000, %f724, %p76;
	abs.f32 	%f126, %f98;
	setp.lt.f32	%p77, %f126, 0f00800000;
	mul.f32 	%f460, %f126, 0f4B800000;
	selp.f32	%f461, 0fC3170000, 0fC2FE0000, %p77;
	selp.f32	%f462, %f460, %f126, %p77;
	mov.b32 	 %r246, %f462;
	and.b32  	%r247, %r246, 8388607;
	or.b32  	%r248, %r247, 1065353216;
	mov.b32 	 %f463, %r248;
	shr.u32 	%r249, %r246, 23;
	cvt.rn.f32.u32	%f464, %r249;
	add.f32 	%f465, %f461, %f464;
	setp.gt.f32	%p78, %f463, 0f3FB504F3;
	mul.f32 	%f466, %f463, 0f3F000000;
	add.f32 	%f467, %f465, 0f3F800000;
	selp.f32	%f468, %f466, %f463, %p78;
	selp.f32	%f469, %f467, %f465, %p78;
	add.f32 	%f470, %f468, 0fBF800000;
	add.f32 	%f459, %f468, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f458,%f459;
	// inline asm
	add.f32 	%f471, %f470, %f470;
	mul.f32 	%f472, %f458, %f471;
	mul.f32 	%f473, %f472, %f472;
	fma.rn.f32 	%f476, %f648, %f473, %f649;
	fma.rn.f32 	%f478, %f476, %f473, %f650;
	mul.rn.f32 	%f479, %f478, %f473;
	mul.rn.f32 	%f480, %f479, %f472;
	sub.f32 	%f481, %f470, %f472;
	neg.f32 	%f482, %f472;
	add.f32 	%f483, %f481, %f481;
	fma.rn.f32 	%f484, %f482, %f470, %f483;
	mul.rn.f32 	%f485, %f458, %f484;
	add.f32 	%f486, %f480, %f472;
	sub.f32 	%f487, %f472, %f486;
	add.f32 	%f488, %f480, %f487;
	add.f32 	%f489, %f485, %f488;
	add.f32 	%f490, %f486, %f489;
	sub.f32 	%f491, %f486, %f490;
	add.f32 	%f492, %f489, %f491;
	mul.rn.f32 	%f494, %f469, %f651;
	mul.rn.f32 	%f496, %f469, %f652;
	add.f32 	%f497, %f494, %f490;
	sub.f32 	%f498, %f494, %f497;
	add.f32 	%f499, %f490, %f498;
	add.f32 	%f500, %f492, %f499;
	add.f32 	%f501, %f496, %f500;
	add.f32 	%f502, %f497, %f501;
	sub.f32 	%f503, %f497, %f502;
	add.f32 	%f504, %f501, %f503;
	mul.rn.f32 	%f506, %f647, %f502;
	neg.f32 	%f507, %f506;
	fma.rn.f32 	%f508, %f647, %f502, %f507;
	fma.rn.f32 	%f509, %f647, %f504, %f508;
	fma.rn.f32 	%f511, %f653, %f502, %f509;
	add.rn.f32 	%f512, %f506, %f511;
	neg.f32 	%f513, %f512;
	add.rn.f32 	%f514, %f506, %f513;
	add.rn.f32 	%f515, %f514, %f511;
	mov.b32 	 %r250, %f512;
	setp.eq.s32	%p79, %r250, 1118925336;
	add.s32 	%r251, %r250, -1;
	mov.b32 	 %f516, %r251;
	add.f32 	%f517, %f515, 0f37000000;
	selp.f32	%f518, %f516, %f512, %p79;
	selp.f32	%f127, %f517, %f515, %p79;
	mul.f32 	%f519, %f518, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f520, %f519;
	fma.rn.f32 	%f522, %f520, %f654, %f518;
	fma.rn.f32 	%f524, %f520, %f655, %f522;
	mul.f32 	%f525, %f524, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f526, %f525;
	add.f32 	%f527, %f520, 0f00000000;
	ex2.approx.f32 	%f528, %f527;
	mul.f32 	%f529, %f526, %f528;
	setp.lt.f32	%p80, %f518, 0fC2D20000;
	selp.f32	%f530, 0f00000000, %f529, %p80;
	setp.gt.f32	%p81, %f518, 0f42D20000;
	selp.f32	%f725, 0f7F800000, %f530, %p81;
	setp.eq.f32	%p82, %f725, 0f7F800000;
	@%p82 bra 	BB0_83;

	fma.rn.f32 	%f725, %f725, %f127, %f725;

BB0_83:
	setp.lt.f32	%p83, %f98, 0f00000000;
	and.pred  	%p3, %p83, %p52;
	mov.b32 	 %r252, %f725;
	xor.b32  	%r253, %r252, -2147483648;
	mov.b32 	 %f531, %r253;
	selp.f32	%f727, %f531, %f725, %p3;
	setp.eq.f32	%p85, %f98, 0f00000000;
	@%p85 bra 	BB0_86;
	bra.uni 	BB0_84;

BB0_86:
	add.f32 	%f534, %f98, %f98;
	selp.f32	%f727, %f534, 0f00000000, %p52;
	bra.uni 	BB0_87;

BB0_84:
	setp.geu.f32	%p86, %f98, 0f00000000;
	@%p86 bra 	BB0_87;

	mov.f32 	%f656, 0f3EE66666;
	cvt.rzi.f32.f32	%f533, %f656;
	setp.neu.f32	%p87, %f533, 0f3EE66666;
	selp.f32	%f727, 0f7FFFFFFF, %f727, %p87;

BB0_87:
	abs.f32 	%f676, %f98;
	add.f32 	%f535, %f676, 0f3EE66666;
	mov.b32 	 %r254, %f535;
	setp.lt.s32	%p89, %r254, 2139095040;
	@%p89 bra 	BB0_92;

	abs.f32 	%f677, %f98;
	setp.gtu.f32	%p90, %f677, 0f7F800000;
	@%p90 bra 	BB0_91;
	bra.uni 	BB0_89;

BB0_91:
	add.f32 	%f727, %f98, 0f3EE66666;
	bra.uni 	BB0_92;

BB0_89:
	abs.f32 	%f678, %f98;
	setp.neu.f32	%p91, %f678, 0f7F800000;
	@%p91 bra 	BB0_92;

	selp.f32	%f727, 0fFF800000, 0f7F800000, %p3;

BB0_92:
	mov.u32 	%r335, 4;
	setp.eq.f32	%p92, %f98, 0f3F800000;
	selp.f32	%f536, 0f3F800000, %f727, %p92;
	cvt.u64.u32	%rd66, %r3;
	cvt.u64.u32	%rd65, %r2;
	mov.u64 	%rd69, image;
	cvta.global.u64 	%rd64, %rd69;
	// inline asm
	call (%rd63), _rt_buffer_get_64, (%rd64, %r98, %r335, %rd65, %rd66, %rd25, %rd25);
	// inline asm
	cvt.sat.f32.f32	%f537, %f536;
	mul.f32 	%f538, %f537, 0f437FFD71;
	cvt.rzi.u32.f32	%r257, %f538;
	cvt.sat.f32.f32	%f539, %f125;
	mul.f32 	%f540, %f539, 0f437FFD71;
	cvt.rzi.u32.f32	%r258, %f540;
	cvt.sat.f32.f32	%f541, %f112;
	mul.f32 	%f542, %f541, 0f437FFD71;
	cvt.rzi.u32.f32	%r259, %f542;
	cvt.u16.u32	%rs14, %r257;
	cvt.u16.u32	%rs15, %r259;
	cvt.u16.u32	%rs16, %r258;
	mov.u16 	%rs17, 255;
	st.v4.u8 	[%rd63], {%rs14, %rs16, %rs15, %rs17};
	ld.global.u32 	%r367, [imageEnabled];

BB0_93:
	cvt.u64.u32	%rd16, %r2;
	cvt.u64.u32	%rd17, %r3;
	and.b32  	%r260, %r367, 4;
	setp.eq.s32	%p93, %r260, 0;
	@%p93 bra 	BB0_97;

	ld.global.u32 	%r261, [additive];
	setp.eq.s32	%p94, %r261, 0;
	mov.f32 	%f543, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs18, %f543;}

	// inline asm
	@%p94 bra 	BB0_96;

	mov.u64 	%rd82, image_HDR;
	cvta.global.u64 	%rd71, %rd82;
	mov.u32 	%r265, 8;
	// inline asm
	call (%rd70), _rt_buffer_get_64, (%rd71, %r98, %r265, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	ld.v4.u16 	{%rs25, %rs26, %rs27, %rs28}, [%rd70];
	// inline asm
	{  cvt.f32.f16 %f544, %rs25;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f545, %rs26;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f546, %rs27;}

	// inline asm
	// inline asm
	call (%rd76), _rt_buffer_get_64, (%rd71, %r98, %r265, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	add.f32 	%f547, %f96, %f544;
	add.f32 	%f548, %f97, %f545;
	add.f32 	%f549, %f98, %f546;
	// inline asm
	{  cvt.rn.f16.f32 %rs24, %f549;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs23, %f548;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs22, %f547;}

	// inline asm
	st.v4.u16 	[%rd76], {%rs22, %rs23, %rs24, %rs18};
	bra.uni 	BB0_97;

BB0_96:
	mov.u64 	%rd89, image_HDR;
	cvta.global.u64 	%rd84, %rd89;
	mov.u32 	%r267, 8;
	// inline asm
	call (%rd83), _rt_buffer_get_64, (%rd84, %r98, %r267, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs31, %f98;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs30, %f97;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs29, %f96;}

	// inline asm
	st.v4.u16 	[%rd83], {%rs29, %rs30, %rs31, %rs18};

BB0_97:
	mul.f32 	%f138, %f92, 0f3F000000;
	ld.global.f32 	%f554, [skyColor];
	mul.f32 	%f139, %f138, %f554;
	ld.global.f32 	%f555, [skyColor+4];
	mul.f32 	%f140, %f138, %f555;
	ld.global.f32 	%f556, [skyColor+8];
	mul.f32 	%f141, %f138, %f556;
	ld.global.u32 	%r268, [additive];
	setp.eq.s32	%p95, %r268, 0;
	mov.f32 	%f553, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs32, %f553;}

	// inline asm
	@%p95 bra 	BB0_99;

	mov.u64 	%rd102, image_RNM0;
	cvta.global.u64 	%rd91, %rd102;
	mov.u32 	%r272, 8;
	// inline asm
	call (%rd90), _rt_buffer_get_64, (%rd91, %r98, %r272, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	ld.v4.u16 	{%rs39, %rs40, %rs41, %rs42}, [%rd90];
	// inline asm
	{  cvt.f32.f16 %f557, %rs39;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f558, %rs40;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f559, %rs41;}

	// inline asm
	// inline asm
	call (%rd96), _rt_buffer_get_64, (%rd91, %r98, %r272, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	add.f32 	%f560, %f139, %f557;
	add.f32 	%f561, %f140, %f558;
	add.f32 	%f562, %f141, %f559;
	// inline asm
	{  cvt.rn.f16.f32 %rs38, %f562;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs37, %f561;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs36, %f560;}

	// inline asm
	st.v4.u16 	[%rd96], {%rs36, %rs37, %rs38, %rs32};
	bra.uni 	BB0_100;

BB0_99:
	mov.u64 	%rd109, image_RNM0;
	cvta.global.u64 	%rd104, %rd109;
	mov.u32 	%r274, 8;
	// inline asm
	call (%rd103), _rt_buffer_get_64, (%rd104, %r98, %r274, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs45, %f141;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs44, %f140;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs43, %f139;}

	// inline asm
	st.v4.u16 	[%rd103], {%rs43, %rs44, %rs45, %rs32};

BB0_100:
	mov.f32 	%f567, 0f34000000;
	max.f32 	%f568, %f138, %f567;
	mul.f32 	%f569, %f93, 0f3F000000;
	div.rn.f32 	%f570, %f569, %f568;
	fma.rn.f32 	%f142, %f570, 0f3F000000, 0f3F000000;
	mul.f32 	%f571, %f94, 0f3F000000;
	div.rn.f32 	%f572, %f571, %f568;
	fma.rn.f32 	%f143, %f572, 0f3F000000, 0f3F000000;
	mul.f32 	%f573, %f95, 0f3F000000;
	div.rn.f32 	%f574, %f573, %f568;
	fma.rn.f32 	%f144, %f574, 0f3F000000, 0f3F000000;
	ld.global.u32 	%r275, [additive];
	setp.eq.s32	%p96, %r275, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs46, %f553;}

	// inline asm
	@%p96 bra 	BB0_102;

	mov.u64 	%rd122, image_RNM1;
	cvta.global.u64 	%rd111, %rd122;
	mov.u32 	%r279, 8;
	// inline asm
	call (%rd110), _rt_buffer_get_64, (%rd111, %r98, %r279, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	ld.v4.u16 	{%rs53, %rs54, %rs55, %rs56}, [%rd110];
	// inline asm
	{  cvt.f32.f16 %f575, %rs53;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f576, %rs54;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f577, %rs55;}

	// inline asm
	// inline asm
	call (%rd116), _rt_buffer_get_64, (%rd111, %r98, %r279, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	add.f32 	%f578, %f142, %f575;
	add.f32 	%f579, %f142, %f576;
	add.f32 	%f580, %f142, %f577;
	// inline asm
	{  cvt.rn.f16.f32 %rs52, %f580;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs51, %f579;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs50, %f578;}

	// inline asm
	st.v4.u16 	[%rd116], {%rs50, %rs51, %rs52, %rs46};
	bra.uni 	BB0_103;

BB0_102:
	mov.u64 	%rd129, image_RNM1;
	cvta.global.u64 	%rd124, %rd129;
	mov.u32 	%r281, 8;
	// inline asm
	call (%rd123), _rt_buffer_get_64, (%rd124, %r98, %r281, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs57, %f142;}

	// inline asm
	st.v4.u16 	[%rd123], {%rs57, %rs57, %rs57, %rs46};

BB0_103:
	ld.global.u32 	%r282, [additive];
	setp.eq.s32	%p97, %r282, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs58, %f553;}

	// inline asm
	@%p97 bra 	BB0_105;

	mov.u64 	%rd142, image_RNM2;
	cvta.global.u64 	%rd131, %rd142;
	mov.u32 	%r286, 8;
	// inline asm
	call (%rd130), _rt_buffer_get_64, (%rd131, %r98, %r286, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	ld.v4.u16 	{%rs65, %rs66, %rs67, %rs68}, [%rd130];
	// inline asm
	{  cvt.f32.f16 %f583, %rs65;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f584, %rs66;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f585, %rs67;}

	// inline asm
	// inline asm
	call (%rd136), _rt_buffer_get_64, (%rd131, %r98, %r286, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	add.f32 	%f586, %f143, %f583;
	add.f32 	%f587, %f143, %f584;
	add.f32 	%f588, %f143, %f585;
	// inline asm
	{  cvt.rn.f16.f32 %rs64, %f588;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs63, %f587;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs62, %f586;}

	// inline asm
	st.v4.u16 	[%rd136], {%rs62, %rs63, %rs64, %rs58};
	bra.uni 	BB0_106;

BB0_105:
	mov.u64 	%rd149, image_RNM2;
	cvta.global.u64 	%rd144, %rd149;
	mov.u32 	%r288, 8;
	// inline asm
	call (%rd143), _rt_buffer_get_64, (%rd144, %r98, %r288, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs69, %f143;}

	// inline asm
	st.v4.u16 	[%rd143], {%rs69, %rs69, %rs69, %rs58};

BB0_106:
	ld.global.u32 	%r289, [additive];
	setp.eq.s32	%p98, %r289, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs70, %f553;}

	// inline asm
	@%p98 bra 	BB0_108;

	mov.u64 	%rd162, image_RNM3;
	cvta.global.u64 	%rd151, %rd162;
	mov.u32 	%r293, 8;
	// inline asm
	call (%rd150), _rt_buffer_get_64, (%rd151, %r98, %r293, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	ld.v4.u16 	{%rs77, %rs78, %rs79, %rs80}, [%rd150];
	// inline asm
	{  cvt.f32.f16 %f591, %rs77;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f592, %rs78;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f593, %rs79;}

	// inline asm
	// inline asm
	call (%rd156), _rt_buffer_get_64, (%rd151, %r98, %r293, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	add.f32 	%f594, %f144, %f591;
	add.f32 	%f595, %f144, %f592;
	add.f32 	%f596, %f144, %f593;
	// inline asm
	{  cvt.rn.f16.f32 %rs76, %f596;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs75, %f595;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs74, %f594;}

	// inline asm
	st.v4.u16 	[%rd156], {%rs74, %rs75, %rs76, %rs70};
	bra.uni 	BB0_127;

BB0_108:
	mov.u64 	%rd169, image_RNM3;
	cvta.global.u64 	%rd164, %rd169;
	mov.u32 	%r295, 8;
	// inline asm
	call (%rd163), _rt_buffer_get_64, (%rd164, %r98, %r295, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs81, %f144;}

	// inline asm
	st.v4.u16 	[%rd163], {%rs81, %rs81, %rs81, %rs70};

BB0_127:
	ret;
}


