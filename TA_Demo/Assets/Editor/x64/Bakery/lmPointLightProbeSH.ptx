//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-23083092
// Cuda compilation tools, release 9.1, V9.1.85
// Based on LLVM 3.4svn
//

.version 6.1
.target sm_30
.address_size 64

	// .globl	_Z6oxMainv
.global .align 8 .b8 pixelID[8];
.global .align 8 .b8 resolution[8];
.global .align 4 .b8 normal[12];
.global .align 4 .b8 camPos[12];
.global .align 4 .b8 root[4];
.global .align 4 .u32 imageEnabled;
.global .texref lightmap;
.global .align 16 .b8 tileInfo[16];
.global .align 4 .u32 additive;
.global .align 1 .b8 image[1];
.global .align 1 .b8 image_HDR[1];
.global .align 1 .b8 image_HDR2[1];
.global .align 1 .b8 image_Mask[1];
.global .align 1 .b8 image_RNM0[1];
.global .align 1 .b8 image_RNM1[1];
.global .align 1 .b8 image_RNM2[1];
.global .align 1 .b8 image_RNM3[1];
.global .align 1 .b8 uvpos[1];
.global .align 1 .b8 uvnormal[1];
.global .align 4 .u32 samples;
.global .align 4 .f32 lightInvCutoff;
.global .align 4 .f32 lightRadius;
.global .align 4 .b8 lightPos[12];
.global .align 4 .b8 lightColor[12];
.global .align 4 .u32 ignoreNormal;
.global .align 4 .f32 lightFalloffFakeDistanceMult;
.global .align 4 .b8 _ZN21rti_internal_typeinfo7pixelIDE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10resolutionE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6camPosE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4rootE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12imageEnabledE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8tileInfoE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8additiveE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo7samplesE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14lightInvCutoffE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11lightRadiusE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8lightPosE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10lightColorE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12ignoreNormalE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo28lightFalloffFakeDistanceMultE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 8 .b8 _ZN21rti_internal_typename7pixelIDE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10resolutionE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6camPosE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 16 .b8 _ZN21rti_internal_typename4rootE[9] = {114, 116, 79, 98, 106, 101, 99, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12imageEnabledE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8tileInfoE[6] = {117, 105, 110, 116, 52, 0};
.global .align 4 .b8 _ZN21rti_internal_typename8additiveE[4] = {105, 110, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename7samplesE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename14lightInvCutoffE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename11lightRadiusE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8lightPosE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10lightColorE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12ignoreNormalE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename28lightFalloffFakeDistanceMultE[6] = {102, 108, 111, 97, 116, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum7pixelIDE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10resolutionE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6camPosE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4rootE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12imageEnabledE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8tileInfoE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8additiveE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum7samplesE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14lightInvCutoffE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11lightRadiusE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8lightPosE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10lightColorE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12ignoreNormalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum28lightFalloffFakeDistanceMultE = 4919;
.global .align 16 .b8 _ZN21rti_internal_semantic7pixelIDE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic10resolutionE[12] = {114, 116, 76, 97, 117, 110, 99, 104, 68, 105, 109, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic6normalE[17] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic6camPosE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic4rootE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12imageEnabledE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8tileInfoE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8additiveE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic7samplesE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic14lightInvCutoffE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11lightRadiusE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8lightPosE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic10lightColorE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12ignoreNormalE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic28lightFalloffFakeDistanceMultE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7pixelIDE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10resolutionE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6camPosE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4rootE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12imageEnabledE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8tileInfoE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8additiveE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7samplesE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14lightInvCutoffE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11lightRadiusE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8lightPosE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10lightColorE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12ignoreNormalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation28lightFalloffFakeDistanceMultE[1];

.visible .entry _Z6oxMainv(

)
{
	.local .align 4 .b8 	__local_depot0[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<121>;
	.reg .b16 	%rs<221>;
	.reg .f32 	%f<853>;
	.reg .b32 	%r<236>;
	.reg .b64 	%rd<369>;


	mov.u64 	%rd368, __local_depot0;
	cvta.local.u64 	%SP, %rd368;
	ld.global.v2.u32 	{%r26, %r27}, [pixelID];
	cvt.u64.u32	%rd12, %r26;
	cvt.u64.u32	%rd13, %r27;
	mov.u64 	%rd16, uvnormal;
	cvta.global.u64 	%rd11, %rd16;
	mov.u32 	%r24, 2;
	mov.u32 	%r25, 4;
	mov.u64 	%rd15, 0;
	// inline asm
	call (%rd10), _rt_buffer_get_64, (%rd11, %r24, %r25, %rd12, %rd13, %rd15, %rd15);
	// inline asm
	ld.u32 	%r1, [%rd10];
	shr.u32 	%r30, %r1, 16;
	cvt.u16.u32	%rs1, %r30;
	and.b16  	%rs12, %rs1, 255;
	cvt.u16.u32	%rs13, %r1;
	or.b16  	%rs14, %rs13, %rs12;
	setp.eq.s16	%p6, %rs14, 0;
	mov.f32 	%f829, 0f00000000;
	mov.f32 	%f830, %f829;
	mov.f32 	%f831, %f829;
	@%p6 bra 	BB0_2;

	ld.u8 	%rs15, [%rd10+1];
	and.b16  	%rs17, %rs13, 255;
	cvt.rn.f32.u16	%f112, %rs17;
	div.rn.f32 	%f113, %f112, 0f437F0000;
	fma.rn.f32 	%f114, %f113, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f115, %rs15;
	div.rn.f32 	%f116, %f115, 0f437F0000;
	fma.rn.f32 	%f117, %f116, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f118, %rs12;
	div.rn.f32 	%f119, %f118, 0f437F0000;
	fma.rn.f32 	%f120, %f119, 0f40000000, 0fBF800000;
	mul.f32 	%f121, %f117, %f117;
	fma.rn.f32 	%f122, %f114, %f114, %f121;
	fma.rn.f32 	%f123, %f120, %f120, %f122;
	sqrt.rn.f32 	%f124, %f123;
	rcp.rn.f32 	%f125, %f124;
	mul.f32 	%f829, %f114, %f125;
	mul.f32 	%f830, %f117, %f125;
	mul.f32 	%f831, %f120, %f125;

BB0_2:
	ld.global.v2.u32 	{%r31, %r32}, [pixelID];
	ld.global.v2.u32 	{%r34, %r35}, [tileInfo];
	add.s32 	%r2, %r31, %r34;
	add.s32 	%r3, %r32, %r35;
	setp.eq.f32	%p7, %f830, 0f00000000;
	setp.eq.f32	%p8, %f829, 0f00000000;
	and.pred  	%p9, %p8, %p7;
	setp.eq.f32	%p10, %f831, 0f00000000;
	and.pred  	%p11, %p9, %p10;
	@%p11 bra 	BB0_105;
	bra.uni 	BB0_3;

BB0_105:
	ld.global.u32 	%r235, [imageEnabled];
	and.b32  	%r185, %r235, 1;
	setp.eq.b32	%p113, %r185, 1;
	@!%p113 bra 	BB0_107;
	bra.uni 	BB0_106;

BB0_106:
	cvt.u64.u32	%rd256, %r2;
	cvt.u64.u32	%rd257, %r3;
	mov.u64 	%rd260, image;
	cvta.global.u64 	%rd255, %rd260;
	// inline asm
	call (%rd254), _rt_buffer_get_64, (%rd255, %r24, %r25, %rd256, %rd257, %rd15, %rd15);
	// inline asm
	mov.u16 	%rs153, 0;
	st.v4.u8 	[%rd254], {%rs153, %rs153, %rs153, %rs153};
	ld.global.u32 	%r235, [imageEnabled];

BB0_107:
	and.b32  	%r188, %r235, 8;
	setp.eq.s32	%p114, %r188, 0;
	@%p114 bra 	BB0_109;

	cvt.u64.u32	%rd264, %r3;
	cvt.u64.u32	%rd263, %r2;
	mov.u64 	%rd267, image_Mask;
	cvta.global.u64 	%rd262, %rd267;
	// inline asm
	call (%rd261), _rt_buffer_get_64, (%rd262, %r24, %r24, %rd263, %rd264, %rd15, %rd15);
	// inline asm
	mov.f32 	%f742, 0f00000000;
	cvt.rzi.u32.f32	%r191, %f742;
	cvt.u16.u32	%rs154, %r191;
	mov.u16 	%rs155, 0;
	st.v2.u8 	[%rd261], {%rs154, %rs155};
	ld.global.u32 	%r235, [imageEnabled];

BB0_109:
	cvt.u64.u32	%rd8, %r2;
	cvt.u64.u32	%rd9, %r3;
	and.b32  	%r192, %r235, 4;
	setp.eq.s32	%p115, %r192, 0;
	@%p115 bra 	BB0_113;

	ld.global.u32 	%r193, [additive];
	setp.eq.s32	%p116, %r193, 0;
	@%p116 bra 	BB0_112;

	mov.u64 	%rd280, image_HDR;
	cvta.global.u64 	%rd269, %rd280;
	mov.u32 	%r197, 8;
	// inline asm
	call (%rd268), _rt_buffer_get_64, (%rd269, %r24, %r197, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs162, %rs163, %rs164, %rs165}, [%rd268];
	// inline asm
	{  cvt.f32.f16 %f743, %rs162;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f744, %rs163;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f745, %rs164;}

	// inline asm
	// inline asm
	call (%rd274), _rt_buffer_get_64, (%rd269, %r24, %r197, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f746, %f743, 0f00000000;
	add.f32 	%f747, %f744, 0f00000000;
	add.f32 	%f748, %f745, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs161, %f748;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs160, %f747;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs159, %f746;}

	// inline asm
	mov.u16 	%rs166, 0;
	st.v4.u16 	[%rd274], {%rs159, %rs160, %rs161, %rs166};
	bra.uni 	BB0_113;

BB0_3:
	ld.global.v2.u32 	{%r41, %r42}, [pixelID];
	cvt.u64.u32	%rd19, %r41;
	cvt.u64.u32	%rd20, %r42;
	mov.u64 	%rd23, uvpos;
	cvta.global.u64 	%rd18, %rd23;
	mov.u32 	%r40, 12;
	// inline asm
	call (%rd17), _rt_buffer_get_64, (%rd18, %r24, %r40, %rd19, %rd20, %rd15, %rd15);
	// inline asm
	ld.global.f32 	%f7, [lightPos];
	ld.f32 	%f12, [%rd17+8];
	ld.f32 	%f10, [%rd17+4];
	ld.f32 	%f8, [%rd17];
	sub.f32 	%f128, %f7, %f8;
	ld.global.f32 	%f9, [lightPos+4];
	sub.f32 	%f129, %f9, %f10;
	ld.global.f32 	%f11, [lightPos+8];
	sub.f32 	%f130, %f11, %f12;
	mul.f32 	%f131, %f129, %f129;
	fma.rn.f32 	%f132, %f128, %f128, %f131;
	fma.rn.f32 	%f133, %f130, %f130, %f132;
	sqrt.rn.f32 	%f134, %f133;
	rcp.rn.f32 	%f135, %f134;
	ld.global.f32 	%f136, [lightFalloffFakeDistanceMult];
	mul.f32 	%f16, %f134, %f136;
	ld.global.f32 	%f137, [lightInvCutoff];
	mul.f32 	%f17, %f134, %f137;
	mov.f32 	%f141, 0f40800000;
	abs.f32 	%f19, %f17;
	setp.lt.f32	%p12, %f19, 0f00800000;
	mul.f32 	%f143, %f19, 0f4B800000;
	selp.f32	%f144, 0fC3170000, 0fC2FE0000, %p12;
	selp.f32	%f145, %f143, %f19, %p12;
	mov.b32 	 %r45, %f145;
	and.b32  	%r46, %r45, 8388607;
	or.b32  	%r47, %r46, 1065353216;
	mov.b32 	 %f146, %r47;
	shr.u32 	%r48, %r45, 23;
	cvt.rn.f32.u32	%f147, %r48;
	add.f32 	%f148, %f144, %f147;
	setp.gt.f32	%p13, %f146, 0f3FB504F3;
	mul.f32 	%f149, %f146, 0f3F000000;
	add.f32 	%f150, %f148, 0f3F800000;
	selp.f32	%f151, %f149, %f146, %p13;
	selp.f32	%f152, %f150, %f148, %p13;
	add.f32 	%f153, %f151, 0fBF800000;
	add.f32 	%f127, %f151, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f126,%f127;
	// inline asm
	add.f32 	%f154, %f153, %f153;
	mul.f32 	%f155, %f126, %f154;
	mul.f32 	%f156, %f155, %f155;
	mov.f32 	%f157, 0f3C4CAF63;
	mov.f32 	%f158, 0f3B18F0FE;
	fma.rn.f32 	%f159, %f158, %f156, %f157;
	mov.f32 	%f160, 0f3DAAAABD;
	fma.rn.f32 	%f161, %f159, %f156, %f160;
	mul.rn.f32 	%f162, %f161, %f156;
	mul.rn.f32 	%f163, %f162, %f155;
	sub.f32 	%f164, %f153, %f155;
	neg.f32 	%f165, %f155;
	add.f32 	%f166, %f164, %f164;
	fma.rn.f32 	%f167, %f165, %f153, %f166;
	mul.rn.f32 	%f168, %f126, %f167;
	add.f32 	%f169, %f163, %f155;
	sub.f32 	%f170, %f155, %f169;
	add.f32 	%f171, %f163, %f170;
	add.f32 	%f172, %f168, %f171;
	add.f32 	%f173, %f169, %f172;
	sub.f32 	%f174, %f169, %f173;
	add.f32 	%f175, %f172, %f174;
	mov.f32 	%f176, 0f3F317200;
	mul.rn.f32 	%f177, %f152, %f176;
	mov.f32 	%f178, 0f35BFBE8E;
	mul.rn.f32 	%f179, %f152, %f178;
	add.f32 	%f180, %f177, %f173;
	sub.f32 	%f181, %f177, %f180;
	add.f32 	%f182, %f173, %f181;
	add.f32 	%f183, %f175, %f182;
	add.f32 	%f184, %f179, %f183;
	add.f32 	%f185, %f180, %f184;
	sub.f32 	%f186, %f180, %f185;
	add.f32 	%f187, %f184, %f186;
	mul.rn.f32 	%f188, %f141, %f185;
	neg.f32 	%f189, %f188;
	fma.rn.f32 	%f190, %f141, %f185, %f189;
	fma.rn.f32 	%f191, %f141, %f187, %f190;
	mov.f32 	%f192, 0f00000000;
	fma.rn.f32 	%f193, %f192, %f185, %f191;
	add.rn.f32 	%f194, %f188, %f193;
	neg.f32 	%f195, %f194;
	add.rn.f32 	%f196, %f188, %f195;
	add.rn.f32 	%f197, %f196, %f193;
	mov.b32 	 %r49, %f194;
	setp.eq.s32	%p14, %r49, 1118925336;
	add.s32 	%r50, %r49, -1;
	mov.b32 	 %f198, %r50;
	add.f32 	%f199, %f197, 0f37000000;
	selp.f32	%f200, %f198, %f194, %p14;
	selp.f32	%f20, %f199, %f197, %p14;
	mul.f32 	%f201, %f200, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f202, %f201;
	mov.f32 	%f203, 0fBF317200;
	fma.rn.f32 	%f204, %f202, %f203, %f200;
	mov.f32 	%f205, 0fB5BFBE8E;
	fma.rn.f32 	%f206, %f202, %f205, %f204;
	mul.f32 	%f207, %f206, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f208, %f207;
	add.f32 	%f209, %f202, 0f00000000;
	ex2.approx.f32 	%f210, %f209;
	mul.f32 	%f211, %f208, %f210;
	setp.lt.f32	%p15, %f200, 0fC2D20000;
	selp.f32	%f212, 0f00000000, %f211, %p15;
	setp.gt.f32	%p16, %f200, 0f42D20000;
	selp.f32	%f832, 0f7F800000, %f212, %p16;
	setp.eq.f32	%p17, %f832, 0f7F800000;
	@%p17 bra 	BB0_5;

	fma.rn.f32 	%f832, %f832, %f20, %f832;

BB0_5:
	mov.f32 	%f783, 0f40000000;
	cvt.rzi.f32.f32	%f782, %f783;
	add.f32 	%f781, %f782, %f782;
	mov.f32 	%f780, 0f40800000;
	sub.f32 	%f779, %f780, %f781;
	abs.f32 	%f778, %f779;
	setp.lt.f32	%p18, %f17, 0f00000000;
	setp.eq.f32	%p19, %f778, 0f3F800000;
	and.pred  	%p1, %p18, %p19;
	mov.b32 	 %r51, %f832;
	xor.b32  	%r52, %r51, -2147483648;
	mov.b32 	 %f213, %r52;
	selp.f32	%f834, %f213, %f832, %p1;
	setp.eq.f32	%p20, %f17, 0f00000000;
	@%p20 bra 	BB0_8;
	bra.uni 	BB0_6;

BB0_8:
	add.f32 	%f216, %f17, %f17;
	selp.f32	%f834, %f216, 0f00000000, %p19;
	bra.uni 	BB0_9;

BB0_6:
	setp.geu.f32	%p21, %f17, 0f00000000;
	@%p21 bra 	BB0_9;

	mov.f32 	%f828, 0f40800000;
	cvt.rzi.f32.f32	%f215, %f828;
	setp.neu.f32	%p22, %f215, 0f40800000;
	selp.f32	%f834, 0f7FFFFFFF, %f834, %p22;

BB0_9:
	abs.f32 	%f784, %f17;
	add.f32 	%f217, %f784, 0f40800000;
	mov.b32 	 %r53, %f217;
	setp.lt.s32	%p24, %r53, 2139095040;
	@%p24 bra 	BB0_14;

	abs.f32 	%f826, %f17;
	setp.gtu.f32	%p25, %f826, 0f7F800000;
	@%p25 bra 	BB0_13;
	bra.uni 	BB0_11;

BB0_13:
	add.f32 	%f834, %f17, 0f40800000;
	bra.uni 	BB0_14;

BB0_11:
	abs.f32 	%f827, %f17;
	setp.neu.f32	%p26, %f827, 0f7F800000;
	@%p26 bra 	BB0_14;

	selp.f32	%f834, 0fFF800000, 0f7F800000, %p1;

BB0_14:
	sub.f32 	%f790, %f11, %f12;
	mul.f32 	%f789, %f790, %f135;
	sub.f32 	%f788, %f7, %f8;
	mul.f32 	%f787, %f788, %f135;
	sub.f32 	%f786, %f9, %f10;
	mul.f32 	%f785, %f786, %f135;
	mov.f32 	%f840, 0f3F800000;
	sub.f32 	%f219, %f840, %f834;
	setp.eq.f32	%p27, %f17, 0f3F800000;
	selp.f32	%f220, 0f00000000, %f219, %p27;
	cvt.sat.f32.f32	%f221, %f220;
	fma.rn.f32 	%f222, %f16, %f16, 0f3F800000;
	div.rn.f32 	%f31, %f221, %f222;
	mul.f32 	%f223, %f830, %f785;
	fma.rn.f32 	%f224, %f829, %f787, %f223;
	fma.rn.f32 	%f32, %f831, %f789, %f224;
	ld.global.f32 	%f225, [lightColor+4];
	ld.global.f32 	%f226, [lightColor];
	max.f32 	%f227, %f226, %f225;
	ld.global.f32 	%f228, [lightColor+8];
	max.f32 	%f229, %f227, %f228;
	mul.f32 	%f230, %f31, %f229;
	setp.lt.f32	%p28, %f230, 0f3727C5AC;
	@%p28 bra 	BB0_85;
	bra.uni 	BB0_15;

BB0_85:
	ld.global.u32 	%r233, [imageEnabled];
	and.b32  	%r142, %r233, 1;
	setp.eq.b32	%p105, %r142, 1;
	@!%p105 bra 	BB0_87;
	bra.uni 	BB0_86;

BB0_86:
	cvt.u64.u32	%rd142, %r2;
	cvt.u64.u32	%rd143, %r3;
	mov.u64 	%rd146, image;
	cvta.global.u64 	%rd141, %rd146;
	// inline asm
	call (%rd140), _rt_buffer_get_64, (%rd141, %r24, %r25, %rd142, %rd143, %rd15, %rd15);
	// inline asm
	mov.u16 	%rs89, 1;
	mov.u16 	%rs90, 0;
	st.v4.u8 	[%rd140], {%rs90, %rs90, %rs90, %rs89};
	ld.global.u32 	%r233, [imageEnabled];

BB0_87:
	and.b32  	%r145, %r233, 8;
	setp.eq.s32	%p106, %r145, 0;
	@%p106 bra 	BB0_89;

	cvt.u64.u32	%rd150, %r3;
	cvt.u64.u32	%rd149, %r2;
	mov.u64 	%rd153, image_Mask;
	cvta.global.u64 	%rd148, %rd153;
	// inline asm
	call (%rd147), _rt_buffer_get_64, (%rd148, %r24, %r24, %rd149, %rd150, %rd15, %rd15);
	// inline asm
	mov.f32 	%f699, 0f00000000;
	cvt.rzi.u32.f32	%r148, %f699;
	cvt.u16.u32	%rs91, %r148;
	mov.u16 	%rs92, 255;
	st.v2.u8 	[%rd147], {%rs91, %rs92};
	ld.global.u32 	%r233, [imageEnabled];

BB0_89:
	cvt.u64.u32	%rd6, %r2;
	cvt.u64.u32	%rd7, %r3;
	and.b32  	%r149, %r233, 4;
	setp.eq.s32	%p107, %r149, 0;
	@%p107 bra 	BB0_93;

	ld.global.u32 	%r150, [additive];
	setp.eq.s32	%p108, %r150, 0;
	mov.f32 	%f700, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs93, %f700;}

	// inline asm
	@%p108 bra 	BB0_92;

	mov.u64 	%rd166, image_HDR;
	cvta.global.u64 	%rd155, %rd166;
	mov.u32 	%r154, 8;
	// inline asm
	call (%rd154), _rt_buffer_get_64, (%rd155, %r24, %r154, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs100, %rs101, %rs102, %rs103}, [%rd154];
	// inline asm
	{  cvt.f32.f16 %f701, %rs100;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f702, %rs101;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f703, %rs102;}

	// inline asm
	// inline asm
	call (%rd160), _rt_buffer_get_64, (%rd155, %r24, %r154, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f704, %f701, 0f00000000;
	add.f32 	%f705, %f702, 0f00000000;
	add.f32 	%f706, %f703, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs99, %f706;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs98, %f705;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs97, %f704;}

	// inline asm
	st.v4.u16 	[%rd160], {%rs97, %rs98, %rs99, %rs93};
	bra.uni 	BB0_93;

BB0_15:
	mov.f32 	%f838, 0f00000000;
	mul.f32 	%f232, %f8, 0f3456BF95;
	abs.f32 	%f233, %f829;
	div.rn.f32 	%f234, %f232, %f233;
	abs.f32 	%f235, %f830;
	mul.f32 	%f236, %f10, 0f3456BF95;
	div.rn.f32 	%f237, %f236, %f235;
	abs.f32 	%f238, %f831;
	mul.f32 	%f239, %f12, 0f3456BF95;
	div.rn.f32 	%f240, %f239, %f238;
	abs.f32 	%f241, %f234;
	abs.f32 	%f242, %f237;
	abs.f32 	%f243, %f240;
	mov.f32 	%f244, 0f38D1B717;
	max.f32 	%f245, %f241, %f244;
	max.f32 	%f246, %f242, %f244;
	max.f32 	%f247, %f243, %f244;
	fma.rn.f32 	%f33, %f829, %f245, %f8;
	fma.rn.f32 	%f34, %f830, %f246, %f10;
	fma.rn.f32 	%f35, %f831, %f247, %f12;
	ld.global.u32 	%r229, [samples];
	setp.lt.s32	%p29, %r229, 1;
	@%p29 bra 	BB0_18;

	mul.f32 	%f249, %f33, 0f3456BF95;
	abs.f32 	%f250, %f249;
	mul.f32 	%f251, %f34, 0f3456BF95;
	abs.f32 	%f252, %f251;
	mul.f32 	%f253, %f35, 0f3456BF95;
	abs.f32 	%f254, %f253;
	max.f32 	%f255, %f250, %f252;
	max.f32 	%f256, %f255, %f254;
	max.f32 	%f36, %f256, %f244;
	add.u64 	%rd24, %SP, 0;
	cvta.to.local.u64 	%rd2, %rd24;
	mov.f32 	%f838, 0f00000000;
	mov.u32 	%r228, 0;
	mov.f32 	%f835, %f11;
	mov.f32 	%f836, %f9;
	mov.f32 	%f837, %f7;
	bra.uni 	BB0_17;

BB0_84:
	ld.global.f32 	%f837, [lightPos];
	ld.global.f32 	%f836, [lightPos+4];
	ld.global.f32 	%f835, [lightPos+8];

BB0_17:
	cvt.rn.f32.s32	%f266, %r228;
	mul.f32 	%f267, %f266, 0f3DD32618;
	cvt.rmi.f32.f32	%f268, %f267;
	sub.f32 	%f269, %f267, %f268;
	mul.f32 	%f270, %f266, 0f3DD2F1AA;
	cvt.rmi.f32.f32	%f271, %f270;
	sub.f32 	%f272, %f270, %f271;
	mul.f32 	%f273, %f266, 0f3DC74539;
	cvt.rmi.f32.f32	%f274, %f273;
	sub.f32 	%f275, %f273, %f274;
	add.f32 	%f276, %f272, 0f4199851F;
	add.f32 	%f277, %f275, 0f4199851F;
	add.f32 	%f278, %f269, 0f4199851F;
	mul.f32 	%f279, %f272, %f277;
	fma.rn.f32 	%f280, %f269, %f276, %f279;
	fma.rn.f32 	%f281, %f278, %f275, %f280;
	add.f32 	%f282, %f269, %f281;
	add.f32 	%f283, %f272, %f281;
	add.f32 	%f284, %f275, %f281;
	add.f32 	%f285, %f282, %f283;
	mul.f32 	%f286, %f284, %f285;
	cvt.rmi.f32.f32	%f287, %f286;
	sub.f32 	%f288, %f286, %f287;
	add.f32 	%f289, %f282, %f284;
	mul.f32 	%f290, %f283, %f289;
	cvt.rmi.f32.f32	%f291, %f290;
	sub.f32 	%f292, %f290, %f291;
	add.f32 	%f293, %f283, %f284;
	mul.f32 	%f294, %f282, %f293;
	cvt.rmi.f32.f32	%f295, %f294;
	sub.f32 	%f296, %f294, %f295;
	fma.rn.f32 	%f297, %f288, 0f40000000, 0fBF800000;
	fma.rn.f32 	%f298, %f292, 0f40000000, 0fBF800000;
	fma.rn.f32 	%f299, %f296, 0f40000000, 0fBF800000;
	ld.global.f32 	%f300, [lightRadius];
	fma.rn.f32 	%f301, %f300, %f297, %f837;
	fma.rn.f32 	%f302, %f300, %f298, %f836;
	fma.rn.f32 	%f303, %f300, %f299, %f835;
	sub.f32 	%f304, %f301, %f8;
	sub.f32 	%f305, %f302, %f10;
	sub.f32 	%f306, %f303, %f12;
	mul.f32 	%f307, %f305, %f305;
	fma.rn.f32 	%f308, %f304, %f304, %f307;
	fma.rn.f32 	%f309, %f306, %f306, %f308;
	sqrt.rn.f32 	%f265, %f309;
	rcp.rn.f32 	%f310, %f265;
	mul.f32 	%f261, %f310, %f304;
	mul.f32 	%f262, %f310, %f305;
	mul.f32 	%f263, %f310, %f306;
	mov.u32 	%r58, 1065353216;
	st.local.u32 	[%rd2], %r58;
	ld.global.u32 	%r55, [root];
	mov.u32 	%r56, 1;
	// inline asm
	call _rt_trace_64, (%r55, %f33, %f34, %f35, %f261, %f262, %f263, %r56, %f36, %f265, %rd24, %r25);
	// inline asm
	ld.local.f32 	%f311, [%rd2];
	add.f32 	%f838, %f838, %f311;
	ld.global.u32 	%r229, [samples];
	add.s32 	%r228, %r228, 1;
	setp.lt.s32	%p30, %r228, %r229;
	@%p30 bra 	BB0_84;

BB0_18:
	setp.eq.s32	%p31, %r229, 0;
	@%p31 bra 	BB0_20;

	cvt.rn.f32.s32	%f313, %r229;
	div.rn.f32 	%f840, %f838, %f313;

BB0_20:
	ld.global.u32 	%r59, [ignoreNormal];
	setp.eq.s32	%p32, %r59, 0;
	selp.f32	%f314, %f32, 0f3F800000, %p32;
	cvt.sat.f32.f32	%f315, %f314;
	mul.f32 	%f316, %f31, %f315;
	mul.f32 	%f317, %f840, %f316;
	ld.global.f32 	%f318, [lightColor];
	mul.f32 	%f45, %f318, %f317;
	ld.global.f32 	%f319, [lightColor+4];
	mul.f32 	%f46, %f319, %f317;
	ld.global.f32 	%f320, [lightColor+8];
	mul.f32 	%f47, %f317, %f320;
	ld.global.u32 	%r231, [imageEnabled];
	and.b32  	%r60, %r231, 8;
	setp.eq.s32	%p33, %r60, 0;
	@%p33 bra 	BB0_33;

	mov.f32 	%f798, 0fB5BFBE8E;
	mov.f32 	%f797, 0fBF317200;
	mov.f32 	%f796, 0f35BFBE8E;
	mov.f32 	%f795, 0f3F317200;
	mov.f32 	%f794, 0f3DAAAABD;
	mov.f32 	%f793, 0f3C4CAF63;
	mov.f32 	%f792, 0f3B18F0FE;
	cvt.u64.u32	%rd28, %r2;
	cvt.u64.u32	%rd29, %r3;
	mov.u64 	%rd32, image_Mask;
	cvta.global.u64 	%rd27, %rd32;
	// inline asm
	call (%rd26), _rt_buffer_get_64, (%rd27, %r24, %r24, %rd28, %rd29, %rd15, %rd15);
	// inline asm
	mov.f32 	%f323, 0f3E68BA2E;
	cvt.rzi.f32.f32	%f324, %f323;
	fma.rn.f32 	%f325, %f324, 0fC0000000, 0f3EE8BA2E;
	abs.f32 	%f48, %f325;
	abs.f32 	%f49, %f840;
	setp.lt.f32	%p34, %f49, 0f00800000;
	mul.f32 	%f326, %f49, 0f4B800000;
	selp.f32	%f327, 0fC3170000, 0fC2FE0000, %p34;
	selp.f32	%f328, %f326, %f49, %p34;
	mov.b32 	 %r63, %f328;
	and.b32  	%r64, %r63, 8388607;
	or.b32  	%r65, %r64, 1065353216;
	mov.b32 	 %f329, %r65;
	shr.u32 	%r66, %r63, 23;
	cvt.rn.f32.u32	%f330, %r66;
	add.f32 	%f331, %f327, %f330;
	setp.gt.f32	%p35, %f329, 0f3FB504F3;
	mul.f32 	%f332, %f329, 0f3F000000;
	add.f32 	%f333, %f331, 0f3F800000;
	selp.f32	%f334, %f332, %f329, %p35;
	selp.f32	%f335, %f333, %f331, %p35;
	add.f32 	%f336, %f334, 0fBF800000;
	add.f32 	%f322, %f334, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// inline asm
	add.f32 	%f337, %f336, %f336;
	mul.f32 	%f338, %f321, %f337;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f342, %f792, %f339, %f793;
	fma.rn.f32 	%f344, %f342, %f339, %f794;
	mul.rn.f32 	%f345, %f344, %f339;
	mul.rn.f32 	%f346, %f345, %f338;
	sub.f32 	%f347, %f336, %f338;
	neg.f32 	%f348, %f338;
	add.f32 	%f349, %f347, %f347;
	fma.rn.f32 	%f350, %f348, %f336, %f349;
	mul.rn.f32 	%f351, %f321, %f350;
	add.f32 	%f352, %f346, %f338;
	sub.f32 	%f353, %f338, %f352;
	add.f32 	%f354, %f346, %f353;
	add.f32 	%f355, %f351, %f354;
	add.f32 	%f356, %f352, %f355;
	sub.f32 	%f357, %f352, %f356;
	add.f32 	%f358, %f355, %f357;
	mul.rn.f32 	%f360, %f335, %f795;
	mul.rn.f32 	%f362, %f335, %f796;
	add.f32 	%f363, %f360, %f356;
	sub.f32 	%f364, %f360, %f363;
	add.f32 	%f365, %f356, %f364;
	add.f32 	%f366, %f358, %f365;
	add.f32 	%f367, %f362, %f366;
	add.f32 	%f368, %f363, %f367;
	sub.f32 	%f369, %f363, %f368;
	add.f32 	%f370, %f367, %f369;
	mov.f32 	%f371, 0f3EE8BA2E;
	mul.rn.f32 	%f372, %f371, %f368;
	neg.f32 	%f373, %f372;
	fma.rn.f32 	%f374, %f371, %f368, %f373;
	fma.rn.f32 	%f375, %f371, %f370, %f374;
	mov.f32 	%f376, 0f00000000;
	fma.rn.f32 	%f377, %f376, %f368, %f375;
	add.rn.f32 	%f378, %f372, %f377;
	neg.f32 	%f379, %f378;
	add.rn.f32 	%f380, %f372, %f379;
	add.rn.f32 	%f381, %f380, %f377;
	mov.b32 	 %r67, %f378;
	setp.eq.s32	%p36, %r67, 1118925336;
	add.s32 	%r68, %r67, -1;
	mov.b32 	 %f382, %r68;
	add.f32 	%f383, %f381, 0f37000000;
	selp.f32	%f384, %f382, %f378, %p36;
	selp.f32	%f50, %f383, %f381, %p36;
	mul.f32 	%f385, %f384, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f386, %f385;
	fma.rn.f32 	%f388, %f386, %f797, %f384;
	fma.rn.f32 	%f390, %f386, %f798, %f388;
	mul.f32 	%f391, %f390, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f392, %f391;
	add.f32 	%f393, %f386, 0f00000000;
	ex2.approx.f32 	%f394, %f393;
	mul.f32 	%f395, %f392, %f394;
	setp.lt.f32	%p37, %f384, 0fC2D20000;
	selp.f32	%f396, 0f00000000, %f395, %p37;
	setp.gt.f32	%p38, %f384, 0f42D20000;
	selp.f32	%f841, 0f7F800000, %f396, %p38;
	setp.eq.f32	%p39, %f841, 0f7F800000;
	@%p39 bra 	BB0_23;

	fma.rn.f32 	%f841, %f841, %f50, %f841;

BB0_23:
	setp.lt.f32	%p40, %f840, 0f00000000;
	setp.eq.f32	%p41, %f48, 0f3F800000;
	and.pred  	%p2, %p40, %p41;
	mov.b32 	 %r69, %f841;
	xor.b32  	%r70, %r69, -2147483648;
	mov.b32 	 %f397, %r70;
	selp.f32	%f843, %f397, %f841, %p2;
	setp.eq.f32	%p42, %f840, 0f00000000;
	@%p42 bra 	BB0_26;
	bra.uni 	BB0_24;

BB0_26:
	add.f32 	%f400, %f840, %f840;
	selp.f32	%f843, %f400, 0f00000000, %p41;
	bra.uni 	BB0_27;

BB0_112:
	mov.u64 	%rd287, image_HDR;
	cvta.global.u64 	%rd282, %rd287;
	mov.u32 	%r199, 8;
	// inline asm
	call (%rd281), _rt_buffer_get_64, (%rd282, %r24, %r199, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f749, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs167, %f749;}

	// inline asm
	mov.u16 	%rs168, 0;
	st.v4.u16 	[%rd281], {%rs167, %rs167, %rs167, %rs168};

BB0_113:
	ld.global.u32 	%r200, [additive];
	setp.eq.s32	%p117, %r200, 0;
	@%p117 bra 	BB0_115;

	mov.u64 	%rd300, image_RNM0;
	cvta.global.u64 	%rd289, %rd300;
	mov.u32 	%r204, 8;
	// inline asm
	call (%rd288), _rt_buffer_get_64, (%rd289, %r24, %r204, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs175, %rs176, %rs177, %rs178}, [%rd288];
	// inline asm
	{  cvt.f32.f16 %f750, %rs175;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f751, %rs176;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f752, %rs177;}

	// inline asm
	// inline asm
	call (%rd294), _rt_buffer_get_64, (%rd289, %r24, %r204, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f753, %f750, 0f00000000;
	add.f32 	%f754, %f751, 0f00000000;
	add.f32 	%f755, %f752, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs174, %f755;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs173, %f754;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs172, %f753;}

	// inline asm
	mov.u16 	%rs179, 0;
	st.v4.u16 	[%rd294], {%rs172, %rs173, %rs174, %rs179};
	bra.uni 	BB0_116;

BB0_115:
	mov.u64 	%rd307, image_RNM0;
	cvta.global.u64 	%rd302, %rd307;
	mov.u32 	%r206, 8;
	// inline asm
	call (%rd301), _rt_buffer_get_64, (%rd302, %r24, %r206, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f756, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs180, %f756;}

	// inline asm
	mov.u16 	%rs181, 0;
	st.v4.u16 	[%rd301], {%rs180, %rs180, %rs180, %rs181};

BB0_116:
	ld.global.u32 	%r207, [additive];
	setp.eq.s32	%p118, %r207, 0;
	@%p118 bra 	BB0_118;

	mov.u64 	%rd320, image_RNM1;
	cvta.global.u64 	%rd309, %rd320;
	mov.u32 	%r211, 8;
	// inline asm
	call (%rd308), _rt_buffer_get_64, (%rd309, %r24, %r211, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs188, %rs189, %rs190, %rs191}, [%rd308];
	// inline asm
	{  cvt.f32.f16 %f757, %rs188;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f758, %rs189;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f759, %rs190;}

	// inline asm
	// inline asm
	call (%rd314), _rt_buffer_get_64, (%rd309, %r24, %r211, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f760, %f757, 0f00000000;
	add.f32 	%f761, %f758, 0f00000000;
	add.f32 	%f762, %f759, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs187, %f762;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs186, %f761;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs185, %f760;}

	// inline asm
	mov.u16 	%rs192, 0;
	st.v4.u16 	[%rd314], {%rs185, %rs186, %rs187, %rs192};
	bra.uni 	BB0_119;

BB0_118:
	mov.u64 	%rd327, image_RNM1;
	cvta.global.u64 	%rd322, %rd327;
	mov.u32 	%r213, 8;
	// inline asm
	call (%rd321), _rt_buffer_get_64, (%rd322, %r24, %r213, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f763, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs193, %f763;}

	// inline asm
	mov.u16 	%rs194, 0;
	st.v4.u16 	[%rd321], {%rs193, %rs193, %rs193, %rs194};

BB0_119:
	ld.global.u32 	%r214, [additive];
	setp.eq.s32	%p119, %r214, 0;
	@%p119 bra 	BB0_121;

	mov.u64 	%rd340, image_RNM2;
	cvta.global.u64 	%rd329, %rd340;
	mov.u32 	%r218, 8;
	// inline asm
	call (%rd328), _rt_buffer_get_64, (%rd329, %r24, %r218, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs201, %rs202, %rs203, %rs204}, [%rd328];
	// inline asm
	{  cvt.f32.f16 %f764, %rs201;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f765, %rs202;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f766, %rs203;}

	// inline asm
	// inline asm
	call (%rd334), _rt_buffer_get_64, (%rd329, %r24, %r218, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f767, %f764, 0f00000000;
	add.f32 	%f768, %f765, 0f00000000;
	add.f32 	%f769, %f766, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs200, %f769;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs199, %f768;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs198, %f767;}

	// inline asm
	mov.u16 	%rs205, 0;
	st.v4.u16 	[%rd334], {%rs198, %rs199, %rs200, %rs205};
	bra.uni 	BB0_122;

BB0_121:
	mov.u64 	%rd347, image_RNM2;
	cvta.global.u64 	%rd342, %rd347;
	mov.u32 	%r220, 8;
	// inline asm
	call (%rd341), _rt_buffer_get_64, (%rd342, %r24, %r220, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f770, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs206, %f770;}

	// inline asm
	mov.u16 	%rs207, 0;
	st.v4.u16 	[%rd341], {%rs206, %rs206, %rs206, %rs207};

BB0_122:
	ld.global.u32 	%r221, [additive];
	setp.eq.s32	%p120, %r221, 0;
	@%p120 bra 	BB0_124;

	mov.u64 	%rd360, image_RNM3;
	cvta.global.u64 	%rd349, %rd360;
	mov.u32 	%r225, 8;
	// inline asm
	call (%rd348), _rt_buffer_get_64, (%rd349, %r24, %r225, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs214, %rs215, %rs216, %rs217}, [%rd348];
	// inline asm
	{  cvt.f32.f16 %f771, %rs214;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f772, %rs215;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f773, %rs216;}

	// inline asm
	// inline asm
	call (%rd354), _rt_buffer_get_64, (%rd349, %r24, %r225, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f774, %f771, 0f00000000;
	add.f32 	%f775, %f772, 0f00000000;
	add.f32 	%f776, %f773, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs213, %f776;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs212, %f775;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs211, %f774;}

	// inline asm
	mov.u16 	%rs218, 0;
	st.v4.u16 	[%rd354], {%rs211, %rs212, %rs213, %rs218};
	bra.uni 	BB0_125;

BB0_124:
	mov.u64 	%rd367, image_RNM3;
	cvta.global.u64 	%rd362, %rd367;
	mov.u32 	%r227, 8;
	// inline asm
	call (%rd361), _rt_buffer_get_64, (%rd362, %r24, %r227, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f777, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs219, %f777;}

	// inline asm
	mov.u16 	%rs220, 0;
	st.v4.u16 	[%rd361], {%rs219, %rs219, %rs219, %rs220};
	bra.uni 	BB0_125;

BB0_92:
	mov.u64 	%rd173, image_HDR;
	cvta.global.u64 	%rd168, %rd173;
	mov.u32 	%r156, 8;
	// inline asm
	call (%rd167), _rt_buffer_get_64, (%rd168, %r24, %r156, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f707, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs104, %f707;}

	// inline asm
	st.v4.u16 	[%rd167], {%rs104, %rs104, %rs104, %rs93};

BB0_93:
	ld.global.u32 	%r157, [additive];
	setp.eq.s32	%p109, %r157, 0;
	mov.f32 	%f708, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs105, %f708;}

	// inline asm
	@%p109 bra 	BB0_95;

	mov.u64 	%rd186, image_RNM0;
	cvta.global.u64 	%rd175, %rd186;
	mov.u32 	%r161, 8;
	// inline asm
	call (%rd174), _rt_buffer_get_64, (%rd175, %r24, %r161, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs112, %rs113, %rs114, %rs115}, [%rd174];
	// inline asm
	{  cvt.f32.f16 %f709, %rs112;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f710, %rs113;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f711, %rs114;}

	// inline asm
	// inline asm
	call (%rd180), _rt_buffer_get_64, (%rd175, %r24, %r161, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f712, %f709, 0f00000000;
	add.f32 	%f713, %f710, 0f00000000;
	add.f32 	%f714, %f711, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs111, %f714;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs110, %f713;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs109, %f712;}

	// inline asm
	st.v4.u16 	[%rd180], {%rs109, %rs110, %rs111, %rs105};
	bra.uni 	BB0_96;

BB0_95:
	mov.u64 	%rd193, image_RNM0;
	cvta.global.u64 	%rd188, %rd193;
	mov.u32 	%r163, 8;
	// inline asm
	call (%rd187), _rt_buffer_get_64, (%rd188, %r24, %r163, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f715, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs116, %f715;}

	// inline asm
	st.v4.u16 	[%rd187], {%rs116, %rs116, %rs116, %rs105};

BB0_96:
	ld.global.u32 	%r164, [additive];
	setp.eq.s32	%p110, %r164, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs117, %f708;}

	// inline asm
	@%p110 bra 	BB0_98;

	mov.u64 	%rd206, image_RNM1;
	cvta.global.u64 	%rd195, %rd206;
	mov.u32 	%r168, 8;
	// inline asm
	call (%rd194), _rt_buffer_get_64, (%rd195, %r24, %r168, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs124, %rs125, %rs126, %rs127}, [%rd194];
	// inline asm
	{  cvt.f32.f16 %f717, %rs124;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f718, %rs125;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f719, %rs126;}

	// inline asm
	// inline asm
	call (%rd200), _rt_buffer_get_64, (%rd195, %r24, %r168, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f720, %f717, 0f00000000;
	add.f32 	%f721, %f718, 0f00000000;
	add.f32 	%f722, %f719, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs123, %f722;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs122, %f721;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs121, %f720;}

	// inline asm
	st.v4.u16 	[%rd200], {%rs121, %rs122, %rs123, %rs117};
	bra.uni 	BB0_99;

BB0_98:
	mov.u64 	%rd213, image_RNM1;
	cvta.global.u64 	%rd208, %rd213;
	mov.u32 	%r170, 8;
	// inline asm
	call (%rd207), _rt_buffer_get_64, (%rd208, %r24, %r170, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f723, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs128, %f723;}

	// inline asm
	st.v4.u16 	[%rd207], {%rs128, %rs128, %rs128, %rs117};

BB0_99:
	ld.global.u32 	%r171, [additive];
	setp.eq.s32	%p111, %r171, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs129, %f708;}

	// inline asm
	@%p111 bra 	BB0_101;

	mov.u64 	%rd226, image_RNM2;
	cvta.global.u64 	%rd215, %rd226;
	mov.u32 	%r175, 8;
	// inline asm
	call (%rd214), _rt_buffer_get_64, (%rd215, %r24, %r175, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs136, %rs137, %rs138, %rs139}, [%rd214];
	// inline asm
	{  cvt.f32.f16 %f725, %rs136;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f726, %rs137;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f727, %rs138;}

	// inline asm
	// inline asm
	call (%rd220), _rt_buffer_get_64, (%rd215, %r24, %r175, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f728, %f725, 0f00000000;
	add.f32 	%f729, %f726, 0f00000000;
	add.f32 	%f730, %f727, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs135, %f730;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs134, %f729;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs133, %f728;}

	// inline asm
	st.v4.u16 	[%rd220], {%rs133, %rs134, %rs135, %rs129};
	bra.uni 	BB0_102;

BB0_101:
	mov.u64 	%rd233, image_RNM2;
	cvta.global.u64 	%rd228, %rd233;
	mov.u32 	%r177, 8;
	// inline asm
	call (%rd227), _rt_buffer_get_64, (%rd228, %r24, %r177, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f731, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs140, %f731;}

	// inline asm
	st.v4.u16 	[%rd227], {%rs140, %rs140, %rs140, %rs129};

BB0_102:
	ld.global.u32 	%r178, [additive];
	setp.eq.s32	%p112, %r178, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs141, %f708;}

	// inline asm
	@%p112 bra 	BB0_104;

	mov.u64 	%rd246, image_RNM3;
	cvta.global.u64 	%rd235, %rd246;
	mov.u32 	%r182, 8;
	// inline asm
	call (%rd234), _rt_buffer_get_64, (%rd235, %r24, %r182, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs148, %rs149, %rs150, %rs151}, [%rd234];
	// inline asm
	{  cvt.f32.f16 %f733, %rs148;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f734, %rs149;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f735, %rs150;}

	// inline asm
	// inline asm
	call (%rd240), _rt_buffer_get_64, (%rd235, %r24, %r182, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f736, %f733, 0f00000000;
	add.f32 	%f737, %f734, 0f00000000;
	add.f32 	%f738, %f735, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs147, %f738;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs146, %f737;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs145, %f736;}

	// inline asm
	st.v4.u16 	[%rd240], {%rs145, %rs146, %rs147, %rs141};
	bra.uni 	BB0_125;

BB0_104:
	mov.u64 	%rd253, image_RNM3;
	cvta.global.u64 	%rd248, %rd253;
	mov.u32 	%r184, 8;
	// inline asm
	call (%rd247), _rt_buffer_get_64, (%rd248, %r24, %r184, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f739, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs152, %f739;}

	// inline asm
	st.v4.u16 	[%rd247], {%rs152, %rs152, %rs152, %rs141};
	bra.uni 	BB0_125;

BB0_24:
	setp.geu.f32	%p43, %f840, 0f00000000;
	@%p43 bra 	BB0_27;

	cvt.rzi.f32.f32	%f399, %f371;
	setp.neu.f32	%p44, %f399, 0f3EE8BA2E;
	selp.f32	%f843, 0f7FFFFFFF, %f843, %p44;

BB0_27:
	add.f32 	%f401, %f49, 0f3EE8BA2E;
	mov.b32 	 %r71, %f401;
	setp.lt.s32	%p46, %r71, 2139095040;
	@%p46 bra 	BB0_32;

	setp.gtu.f32	%p47, %f49, 0f7F800000;
	@%p47 bra 	BB0_31;
	bra.uni 	BB0_29;

BB0_31:
	add.f32 	%f843, %f840, 0f3EE8BA2E;
	bra.uni 	BB0_32;

BB0_29:
	setp.neu.f32	%p48, %f49, 0f7F800000;
	@%p48 bra 	BB0_32;

	selp.f32	%f843, 0fFF800000, 0f7F800000, %p2;

BB0_32:
	mul.f32 	%f402, %f843, 0f437F0000;
	setp.eq.f32	%p49, %f840, 0f3F800000;
	selp.f32	%f403, 0f437F0000, %f402, %p49;
	cvt.rzi.u32.f32	%r72, %f403;
	cvt.u16.u32	%rs19, %r72;
	mov.u16 	%rs20, 255;
	st.v2.u8 	[%rd26], {%rs19, %rs20};
	ld.global.u32 	%r231, [imageEnabled];

BB0_33:
	and.b32  	%r73, %r231, 1;
	setp.eq.b32	%p50, %r73, 1;
	@!%p50 bra 	BB0_68;
	bra.uni 	BB0_34;

BB0_34:
	mov.f32 	%f805, 0fB5BFBE8E;
	mov.f32 	%f804, 0fBF317200;
	mov.f32 	%f803, 0f35BFBE8E;
	mov.f32 	%f802, 0f3F317200;
	mov.f32 	%f801, 0f3DAAAABD;
	mov.f32 	%f800, 0f3C4CAF63;
	mov.f32 	%f799, 0f3B18F0FE;
	mov.f32 	%f406, 0f3E666666;
	cvt.rzi.f32.f32	%f407, %f406;
	fma.rn.f32 	%f408, %f407, 0fC0000000, 0f3EE66666;
	abs.f32 	%f61, %f408;
	abs.f32 	%f62, %f45;
	setp.lt.f32	%p51, %f62, 0f00800000;
	mul.f32 	%f409, %f62, 0f4B800000;
	selp.f32	%f410, 0fC3170000, 0fC2FE0000, %p51;
	selp.f32	%f411, %f409, %f62, %p51;
	mov.b32 	 %r74, %f411;
	and.b32  	%r75, %r74, 8388607;
	or.b32  	%r76, %r75, 1065353216;
	mov.b32 	 %f412, %r76;
	shr.u32 	%r77, %r74, 23;
	cvt.rn.f32.u32	%f413, %r77;
	add.f32 	%f414, %f410, %f413;
	setp.gt.f32	%p52, %f412, 0f3FB504F3;
	mul.f32 	%f415, %f412, 0f3F000000;
	add.f32 	%f416, %f414, 0f3F800000;
	selp.f32	%f417, %f415, %f412, %p52;
	selp.f32	%f418, %f416, %f414, %p52;
	add.f32 	%f419, %f417, 0fBF800000;
	add.f32 	%f405, %f417, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f404,%f405;
	// inline asm
	add.f32 	%f420, %f419, %f419;
	mul.f32 	%f421, %f404, %f420;
	mul.f32 	%f422, %f421, %f421;
	fma.rn.f32 	%f425, %f799, %f422, %f800;
	fma.rn.f32 	%f427, %f425, %f422, %f801;
	mul.rn.f32 	%f428, %f427, %f422;
	mul.rn.f32 	%f429, %f428, %f421;
	sub.f32 	%f430, %f419, %f421;
	neg.f32 	%f431, %f421;
	add.f32 	%f432, %f430, %f430;
	fma.rn.f32 	%f433, %f431, %f419, %f432;
	mul.rn.f32 	%f434, %f404, %f433;
	add.f32 	%f435, %f429, %f421;
	sub.f32 	%f436, %f421, %f435;
	add.f32 	%f437, %f429, %f436;
	add.f32 	%f438, %f434, %f437;
	add.f32 	%f439, %f435, %f438;
	sub.f32 	%f440, %f435, %f439;
	add.f32 	%f441, %f438, %f440;
	mul.rn.f32 	%f443, %f418, %f802;
	mul.rn.f32 	%f445, %f418, %f803;
	add.f32 	%f446, %f443, %f439;
	sub.f32 	%f447, %f443, %f446;
	add.f32 	%f448, %f439, %f447;
	add.f32 	%f449, %f441, %f448;
	add.f32 	%f450, %f445, %f449;
	add.f32 	%f451, %f446, %f450;
	sub.f32 	%f452, %f446, %f451;
	add.f32 	%f453, %f450, %f452;
	mov.f32 	%f454, 0f3EE66666;
	mul.rn.f32 	%f455, %f454, %f451;
	neg.f32 	%f456, %f455;
	fma.rn.f32 	%f457, %f454, %f451, %f456;
	fma.rn.f32 	%f458, %f454, %f453, %f457;
	mov.f32 	%f459, 0f00000000;
	fma.rn.f32 	%f460, %f459, %f451, %f458;
	add.rn.f32 	%f461, %f455, %f460;
	neg.f32 	%f462, %f461;
	add.rn.f32 	%f463, %f455, %f462;
	add.rn.f32 	%f464, %f463, %f460;
	mov.b32 	 %r78, %f461;
	setp.eq.s32	%p53, %r78, 1118925336;
	add.s32 	%r79, %r78, -1;
	mov.b32 	 %f465, %r79;
	add.f32 	%f466, %f464, 0f37000000;
	selp.f32	%f467, %f465, %f461, %p53;
	selp.f32	%f63, %f466, %f464, %p53;
	mul.f32 	%f468, %f467, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f469, %f468;
	fma.rn.f32 	%f471, %f469, %f804, %f467;
	fma.rn.f32 	%f473, %f469, %f805, %f471;
	mul.f32 	%f474, %f473, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f475, %f474;
	add.f32 	%f476, %f469, 0f00000000;
	ex2.approx.f32 	%f477, %f476;
	mul.f32 	%f478, %f475, %f477;
	setp.lt.f32	%p54, %f467, 0fC2D20000;
	selp.f32	%f479, 0f00000000, %f478, %p54;
	setp.gt.f32	%p55, %f467, 0f42D20000;
	selp.f32	%f844, 0f7F800000, %f479, %p55;
	setp.eq.f32	%p56, %f844, 0f7F800000;
	@%p56 bra 	BB0_36;

	fma.rn.f32 	%f844, %f844, %f63, %f844;

BB0_36:
	setp.lt.f32	%p57, %f45, 0f00000000;
	setp.eq.f32	%p58, %f61, 0f3F800000;
	and.pred  	%p3, %p57, %p58;
	mov.b32 	 %r80, %f844;
	xor.b32  	%r81, %r80, -2147483648;
	mov.b32 	 %f480, %r81;
	selp.f32	%f846, %f480, %f844, %p3;
	setp.eq.f32	%p59, %f45, 0f00000000;
	@%p59 bra 	BB0_39;
	bra.uni 	BB0_37;

BB0_39:
	add.f32 	%f483, %f45, %f45;
	selp.f32	%f846, %f483, 0f00000000, %p58;
	bra.uni 	BB0_40;

BB0_37:
	setp.geu.f32	%p60, %f45, 0f00000000;
	@%p60 bra 	BB0_40;

	cvt.rzi.f32.f32	%f482, %f454;
	setp.neu.f32	%p61, %f482, 0f3EE66666;
	selp.f32	%f846, 0f7FFFFFFF, %f846, %p61;

BB0_40:
	add.f32 	%f484, %f62, 0f3EE66666;
	mov.b32 	 %r82, %f484;
	setp.lt.s32	%p63, %r82, 2139095040;
	@%p63 bra 	BB0_45;

	setp.gtu.f32	%p64, %f62, 0f7F800000;
	@%p64 bra 	BB0_44;
	bra.uni 	BB0_42;

BB0_44:
	add.f32 	%f846, %f45, 0f3EE66666;
	bra.uni 	BB0_45;

BB0_42:
	setp.neu.f32	%p65, %f62, 0f7F800000;
	@%p65 bra 	BB0_45;

	selp.f32	%f846, 0fFF800000, 0f7F800000, %p3;

BB0_45:
	mov.f32 	%f812, 0fB5BFBE8E;
	mov.f32 	%f811, 0fBF317200;
	mov.f32 	%f810, 0f35BFBE8E;
	mov.f32 	%f809, 0f3F317200;
	mov.f32 	%f808, 0f3DAAAABD;
	mov.f32 	%f807, 0f3C4CAF63;
	mov.f32 	%f806, 0f3B18F0FE;
	setp.eq.f32	%p66, %f45, 0f3F800000;
	selp.f32	%f74, 0f3F800000, %f846, %p66;
	abs.f32 	%f75, %f46;
	setp.lt.f32	%p67, %f75, 0f00800000;
	mul.f32 	%f487, %f75, 0f4B800000;
	selp.f32	%f488, 0fC3170000, 0fC2FE0000, %p67;
	selp.f32	%f489, %f487, %f75, %p67;
	mov.b32 	 %r83, %f489;
	and.b32  	%r84, %r83, 8388607;
	or.b32  	%r85, %r84, 1065353216;
	mov.b32 	 %f490, %r85;
	shr.u32 	%r86, %r83, 23;
	cvt.rn.f32.u32	%f491, %r86;
	add.f32 	%f492, %f488, %f491;
	setp.gt.f32	%p68, %f490, 0f3FB504F3;
	mul.f32 	%f493, %f490, 0f3F000000;
	add.f32 	%f494, %f492, 0f3F800000;
	selp.f32	%f495, %f493, %f490, %p68;
	selp.f32	%f496, %f494, %f492, %p68;
	add.f32 	%f497, %f495, 0fBF800000;
	add.f32 	%f486, %f495, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f485,%f486;
	// inline asm
	add.f32 	%f498, %f497, %f497;
	mul.f32 	%f499, %f485, %f498;
	mul.f32 	%f500, %f499, %f499;
	fma.rn.f32 	%f503, %f806, %f500, %f807;
	fma.rn.f32 	%f505, %f503, %f500, %f808;
	mul.rn.f32 	%f506, %f505, %f500;
	mul.rn.f32 	%f507, %f506, %f499;
	sub.f32 	%f508, %f497, %f499;
	neg.f32 	%f509, %f499;
	add.f32 	%f510, %f508, %f508;
	fma.rn.f32 	%f511, %f509, %f497, %f510;
	mul.rn.f32 	%f512, %f485, %f511;
	add.f32 	%f513, %f507, %f499;
	sub.f32 	%f514, %f499, %f513;
	add.f32 	%f515, %f507, %f514;
	add.f32 	%f516, %f512, %f515;
	add.f32 	%f517, %f513, %f516;
	sub.f32 	%f518, %f513, %f517;
	add.f32 	%f519, %f516, %f518;
	mul.rn.f32 	%f521, %f496, %f809;
	mul.rn.f32 	%f523, %f496, %f810;
	add.f32 	%f524, %f521, %f517;
	sub.f32 	%f525, %f521, %f524;
	add.f32 	%f526, %f517, %f525;
	add.f32 	%f527, %f519, %f526;
	add.f32 	%f528, %f523, %f527;
	add.f32 	%f529, %f524, %f528;
	sub.f32 	%f530, %f524, %f529;
	add.f32 	%f531, %f528, %f530;
	mul.rn.f32 	%f533, %f454, %f529;
	neg.f32 	%f534, %f533;
	fma.rn.f32 	%f535, %f454, %f529, %f534;
	fma.rn.f32 	%f536, %f454, %f531, %f535;
	fma.rn.f32 	%f538, %f459, %f529, %f536;
	add.rn.f32 	%f539, %f533, %f538;
	neg.f32 	%f540, %f539;
	add.rn.f32 	%f541, %f533, %f540;
	add.rn.f32 	%f542, %f541, %f538;
	mov.b32 	 %r87, %f539;
	setp.eq.s32	%p69, %r87, 1118925336;
	add.s32 	%r88, %r87, -1;
	mov.b32 	 %f543, %r88;
	add.f32 	%f544, %f542, 0f37000000;
	selp.f32	%f545, %f543, %f539, %p69;
	selp.f32	%f76, %f544, %f542, %p69;
	mul.f32 	%f546, %f545, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f547, %f546;
	fma.rn.f32 	%f549, %f547, %f811, %f545;
	fma.rn.f32 	%f551, %f547, %f812, %f549;
	mul.f32 	%f552, %f551, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f553, %f552;
	add.f32 	%f554, %f547, 0f00000000;
	ex2.approx.f32 	%f555, %f554;
	mul.f32 	%f556, %f553, %f555;
	setp.lt.f32	%p70, %f545, 0fC2D20000;
	selp.f32	%f557, 0f00000000, %f556, %p70;
	setp.gt.f32	%p71, %f545, 0f42D20000;
	selp.f32	%f847, 0f7F800000, %f557, %p71;
	setp.eq.f32	%p72, %f847, 0f7F800000;
	@%p72 bra 	BB0_47;

	fma.rn.f32 	%f847, %f847, %f76, %f847;

BB0_47:
	setp.lt.f32	%p73, %f46, 0f00000000;
	and.pred  	%p4, %p73, %p58;
	mov.b32 	 %r89, %f847;
	xor.b32  	%r90, %r89, -2147483648;
	mov.b32 	 %f558, %r90;
	selp.f32	%f849, %f558, %f847, %p4;
	setp.eq.f32	%p75, %f46, 0f00000000;
	@%p75 bra 	BB0_50;
	bra.uni 	BB0_48;

BB0_50:
	add.f32 	%f561, %f46, %f46;
	selp.f32	%f849, %f561, 0f00000000, %p58;
	bra.uni 	BB0_51;

BB0_48:
	setp.geu.f32	%p76, %f46, 0f00000000;
	@%p76 bra 	BB0_51;

	cvt.rzi.f32.f32	%f560, %f454;
	setp.neu.f32	%p77, %f560, 0f3EE66666;
	selp.f32	%f849, 0f7FFFFFFF, %f849, %p77;

BB0_51:
	add.f32 	%f562, %f75, 0f3EE66666;
	mov.b32 	 %r91, %f562;
	setp.lt.s32	%p79, %r91, 2139095040;
	@%p79 bra 	BB0_56;

	setp.gtu.f32	%p80, %f75, 0f7F800000;
	@%p80 bra 	BB0_55;
	bra.uni 	BB0_53;

BB0_55:
	add.f32 	%f849, %f46, 0f3EE66666;
	bra.uni 	BB0_56;

BB0_53:
	setp.neu.f32	%p81, %f75, 0f7F800000;
	@%p81 bra 	BB0_56;

	selp.f32	%f849, 0fFF800000, 0f7F800000, %p4;

BB0_56:
	mov.f32 	%f819, 0fB5BFBE8E;
	mov.f32 	%f818, 0fBF317200;
	mov.f32 	%f817, 0f35BFBE8E;
	mov.f32 	%f816, 0f3F317200;
	mov.f32 	%f815, 0f3DAAAABD;
	mov.f32 	%f814, 0f3C4CAF63;
	mov.f32 	%f813, 0f3B18F0FE;
	setp.eq.f32	%p82, %f46, 0f3F800000;
	selp.f32	%f87, 0f3F800000, %f849, %p82;
	abs.f32 	%f88, %f47;
	setp.lt.f32	%p83, %f88, 0f00800000;
	mul.f32 	%f565, %f88, 0f4B800000;
	selp.f32	%f566, 0fC3170000, 0fC2FE0000, %p83;
	selp.f32	%f567, %f565, %f88, %p83;
	mov.b32 	 %r92, %f567;
	and.b32  	%r93, %r92, 8388607;
	or.b32  	%r94, %r93, 1065353216;
	mov.b32 	 %f568, %r94;
	shr.u32 	%r95, %r92, 23;
	cvt.rn.f32.u32	%f569, %r95;
	add.f32 	%f570, %f566, %f569;
	setp.gt.f32	%p84, %f568, 0f3FB504F3;
	mul.f32 	%f571, %f568, 0f3F000000;
	add.f32 	%f572, %f570, 0f3F800000;
	selp.f32	%f573, %f571, %f568, %p84;
	selp.f32	%f574, %f572, %f570, %p84;
	add.f32 	%f575, %f573, 0fBF800000;
	add.f32 	%f564, %f573, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f563,%f564;
	// inline asm
	add.f32 	%f576, %f575, %f575;
	mul.f32 	%f577, %f563, %f576;
	mul.f32 	%f578, %f577, %f577;
	fma.rn.f32 	%f581, %f813, %f578, %f814;
	fma.rn.f32 	%f583, %f581, %f578, %f815;
	mul.rn.f32 	%f584, %f583, %f578;
	mul.rn.f32 	%f585, %f584, %f577;
	sub.f32 	%f586, %f575, %f577;
	neg.f32 	%f587, %f577;
	add.f32 	%f588, %f586, %f586;
	fma.rn.f32 	%f589, %f587, %f575, %f588;
	mul.rn.f32 	%f590, %f563, %f589;
	add.f32 	%f591, %f585, %f577;
	sub.f32 	%f592, %f577, %f591;
	add.f32 	%f593, %f585, %f592;
	add.f32 	%f594, %f590, %f593;
	add.f32 	%f595, %f591, %f594;
	sub.f32 	%f596, %f591, %f595;
	add.f32 	%f597, %f594, %f596;
	mul.rn.f32 	%f599, %f574, %f816;
	mul.rn.f32 	%f601, %f574, %f817;
	add.f32 	%f602, %f599, %f595;
	sub.f32 	%f603, %f599, %f602;
	add.f32 	%f604, %f595, %f603;
	add.f32 	%f605, %f597, %f604;
	add.f32 	%f606, %f601, %f605;
	add.f32 	%f607, %f602, %f606;
	sub.f32 	%f608, %f602, %f607;
	add.f32 	%f609, %f606, %f608;
	mul.rn.f32 	%f611, %f454, %f607;
	neg.f32 	%f612, %f611;
	fma.rn.f32 	%f613, %f454, %f607, %f612;
	fma.rn.f32 	%f614, %f454, %f609, %f613;
	fma.rn.f32 	%f616, %f459, %f607, %f614;
	add.rn.f32 	%f617, %f611, %f616;
	neg.f32 	%f618, %f617;
	add.rn.f32 	%f619, %f611, %f618;
	add.rn.f32 	%f620, %f619, %f616;
	mov.b32 	 %r96, %f617;
	setp.eq.s32	%p85, %r96, 1118925336;
	add.s32 	%r97, %r96, -1;
	mov.b32 	 %f621, %r97;
	add.f32 	%f622, %f620, 0f37000000;
	selp.f32	%f623, %f621, %f617, %p85;
	selp.f32	%f89, %f622, %f620, %p85;
	mul.f32 	%f624, %f623, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f625, %f624;
	fma.rn.f32 	%f627, %f625, %f818, %f623;
	fma.rn.f32 	%f629, %f625, %f819, %f627;
	mul.f32 	%f630, %f629, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f631, %f630;
	add.f32 	%f632, %f625, 0f00000000;
	ex2.approx.f32 	%f633, %f632;
	mul.f32 	%f634, %f631, %f633;
	setp.lt.f32	%p86, %f623, 0fC2D20000;
	selp.f32	%f635, 0f00000000, %f634, %p86;
	setp.gt.f32	%p87, %f623, 0f42D20000;
	selp.f32	%f850, 0f7F800000, %f635, %p87;
	setp.eq.f32	%p88, %f850, 0f7F800000;
	@%p88 bra 	BB0_58;

	fma.rn.f32 	%f850, %f850, %f89, %f850;

BB0_58:
	setp.lt.f32	%p89, %f47, 0f00000000;
	and.pred  	%p5, %p89, %p58;
	mov.b32 	 %r98, %f850;
	xor.b32  	%r99, %r98, -2147483648;
	mov.b32 	 %f636, %r99;
	selp.f32	%f852, %f636, %f850, %p5;
	setp.eq.f32	%p91, %f47, 0f00000000;
	@%p91 bra 	BB0_61;
	bra.uni 	BB0_59;

BB0_61:
	add.f32 	%f639, %f47, %f47;
	selp.f32	%f852, %f639, 0f00000000, %p58;
	bra.uni 	BB0_62;

BB0_59:
	setp.geu.f32	%p92, %f47, 0f00000000;
	@%p92 bra 	BB0_62;

	cvt.rzi.f32.f32	%f638, %f454;
	setp.neu.f32	%p93, %f638, 0f3EE66666;
	selp.f32	%f852, 0f7FFFFFFF, %f852, %p93;

BB0_62:
	add.f32 	%f640, %f88, 0f3EE66666;
	mov.b32 	 %r100, %f640;
	setp.lt.s32	%p95, %r100, 2139095040;
	@%p95 bra 	BB0_67;

	setp.gtu.f32	%p96, %f88, 0f7F800000;
	@%p96 bra 	BB0_66;
	bra.uni 	BB0_64;

BB0_66:
	add.f32 	%f852, %f47, 0f3EE66666;
	bra.uni 	BB0_67;

BB0_64:
	setp.neu.f32	%p97, %f88, 0f7F800000;
	@%p97 bra 	BB0_67;

	selp.f32	%f852, 0fFF800000, 0f7F800000, %p5;

BB0_67:
	setp.eq.f32	%p98, %f47, 0f3F800000;
	selp.f32	%f641, 0f3F800000, %f852, %p98;
	cvt.u64.u32	%rd36, %r3;
	cvt.u64.u32	%rd35, %r2;
	mov.u64 	%rd39, image;
	cvta.global.u64 	%rd34, %rd39;
	// inline asm
	call (%rd33), _rt_buffer_get_64, (%rd34, %r24, %r25, %rd35, %rd36, %rd15, %rd15);
	// inline asm
	cvt.sat.f32.f32	%f642, %f641;
	mul.f32 	%f643, %f642, 0f437FFD71;
	cvt.rzi.u32.f32	%r103, %f643;
	cvt.sat.f32.f32	%f644, %f87;
	mul.f32 	%f645, %f644, 0f437FFD71;
	cvt.rzi.u32.f32	%r104, %f645;
	cvt.sat.f32.f32	%f646, %f74;
	mul.f32 	%f647, %f646, 0f437FFD71;
	cvt.rzi.u32.f32	%r105, %f647;
	cvt.u16.u32	%rs21, %r103;
	cvt.u16.u32	%rs22, %r105;
	cvt.u16.u32	%rs23, %r104;
	mov.u16 	%rs24, 255;
	st.v4.u8 	[%rd33], {%rs21, %rs23, %rs22, %rs24};
	ld.global.u32 	%r231, [imageEnabled];

BB0_68:
	cvt.u64.u32	%rd4, %r2;
	cvt.u64.u32	%rd5, %r3;
	and.b32  	%r106, %r231, 4;
	setp.eq.s32	%p99, %r106, 0;
	@%p99 bra 	BB0_72;

	ld.global.u32 	%r107, [additive];
	setp.eq.s32	%p100, %r107, 0;
	mov.f32 	%f648, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs25, %f648;}

	// inline asm
	@%p100 bra 	BB0_71;

	mov.u64 	%rd52, image_HDR;
	cvta.global.u64 	%rd41, %rd52;
	mov.u32 	%r111, 8;
	// inline asm
	call (%rd40), _rt_buffer_get_64, (%rd41, %r24, %r111, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs32, %rs33, %rs34, %rs35}, [%rd40];
	// inline asm
	{  cvt.f32.f16 %f649, %rs32;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f650, %rs33;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f651, %rs34;}

	// inline asm
	// inline asm
	call (%rd46), _rt_buffer_get_64, (%rd41, %r24, %r111, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f652, %f45, %f649;
	add.f32 	%f653, %f46, %f650;
	add.f32 	%f654, %f47, %f651;
	// inline asm
	{  cvt.rn.f16.f32 %rs31, %f654;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs30, %f653;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs29, %f652;}

	// inline asm
	st.v4.u16 	[%rd46], {%rs29, %rs30, %rs31, %rs25};
	bra.uni 	BB0_72;

BB0_71:
	mov.u64 	%rd59, image_HDR;
	cvta.global.u64 	%rd54, %rd59;
	mov.u32 	%r113, 8;
	// inline asm
	call (%rd53), _rt_buffer_get_64, (%rd54, %r24, %r113, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs38, %f47;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs37, %f46;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs36, %f45;}

	// inline asm
	st.v4.u16 	[%rd53], {%rs36, %rs37, %rs38, %rs25};

BB0_72:
	mul.f32 	%f659, %f31, 0f3E800000;
	mul.f32 	%f660, %f659, %f840;
	ld.global.f32 	%f661, [lightColor];
	mul.f32 	%f100, %f660, %f661;
	ld.global.f32 	%f662, [lightColor+4];
	mul.f32 	%f101, %f660, %f662;
	ld.global.f32 	%f663, [lightColor+8];
	mul.f32 	%f102, %f660, %f663;
	ld.global.u32 	%r114, [additive];
	setp.eq.s32	%p101, %r114, 0;
	mov.f32 	%f658, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs39, %f658;}

	// inline asm
	@%p101 bra 	BB0_74;

	mov.u64 	%rd72, image_RNM0;
	cvta.global.u64 	%rd61, %rd72;
	mov.u32 	%r118, 8;
	// inline asm
	call (%rd60), _rt_buffer_get_64, (%rd61, %r24, %r118, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs46, %rs47, %rs48, %rs49}, [%rd60];
	// inline asm
	{  cvt.f32.f16 %f664, %rs46;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f665, %rs47;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f666, %rs48;}

	// inline asm
	// inline asm
	call (%rd66), _rt_buffer_get_64, (%rd61, %r24, %r118, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f667, %f100, %f664;
	add.f32 	%f668, %f101, %f665;
	add.f32 	%f669, %f102, %f666;
	// inline asm
	{  cvt.rn.f16.f32 %rs45, %f669;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs44, %f668;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs43, %f667;}

	// inline asm
	st.v4.u16 	[%rd66], {%rs43, %rs44, %rs45, %rs39};
	bra.uni 	BB0_75;

BB0_74:
	mov.u64 	%rd79, image_RNM0;
	cvta.global.u64 	%rd74, %rd79;
	mov.u32 	%r120, 8;
	// inline asm
	call (%rd73), _rt_buffer_get_64, (%rd74, %r24, %r120, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs52, %f102;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs51, %f101;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs50, %f100;}

	// inline asm
	st.v4.u16 	[%rd73], {%rs50, %rs51, %rs52, %rs39};

BB0_75:
	sub.f32 	%f825, %f11, %f12;
	mul.f32 	%f824, %f825, %f135;
	sub.f32 	%f823, %f7, %f8;
	mul.f32 	%f822, %f823, %f135;
	sub.f32 	%f821, %f9, %f10;
	mul.f32 	%f820, %f821, %f135;
	fma.rn.f32 	%f103, %f822, 0f3F000000, 0f3F000000;
	fma.rn.f32 	%f104, %f820, 0f3F000000, 0f3F000000;
	fma.rn.f32 	%f105, %f824, 0f3F000000, 0f3F000000;
	ld.global.u32 	%r121, [additive];
	setp.eq.s32	%p102, %r121, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs53, %f658;}

	// inline asm
	@%p102 bra 	BB0_77;

	mov.u64 	%rd92, image_RNM1;
	cvta.global.u64 	%rd81, %rd92;
	mov.u32 	%r125, 8;
	// inline asm
	call (%rd80), _rt_buffer_get_64, (%rd81, %r24, %r125, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs60, %rs61, %rs62, %rs63}, [%rd80];
	// inline asm
	{  cvt.f32.f16 %f674, %rs60;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f675, %rs61;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f676, %rs62;}

	// inline asm
	// inline asm
	call (%rd86), _rt_buffer_get_64, (%rd81, %r24, %r125, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f677, %f103, %f674;
	add.f32 	%f678, %f103, %f675;
	add.f32 	%f679, %f103, %f676;
	// inline asm
	{  cvt.rn.f16.f32 %rs59, %f679;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs58, %f678;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs57, %f677;}

	// inline asm
	st.v4.u16 	[%rd86], {%rs57, %rs58, %rs59, %rs53};
	bra.uni 	BB0_78;

BB0_77:
	mov.u64 	%rd99, image_RNM1;
	cvta.global.u64 	%rd94, %rd99;
	mov.u32 	%r127, 8;
	// inline asm
	call (%rd93), _rt_buffer_get_64, (%rd94, %r24, %r127, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs64, %f103;}

	// inline asm
	st.v4.u16 	[%rd93], {%rs64, %rs64, %rs64, %rs53};

BB0_78:
	ld.global.u32 	%r128, [additive];
	setp.eq.s32	%p103, %r128, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs65, %f658;}

	// inline asm
	@%p103 bra 	BB0_80;

	mov.u64 	%rd112, image_RNM2;
	cvta.global.u64 	%rd101, %rd112;
	mov.u32 	%r132, 8;
	// inline asm
	call (%rd100), _rt_buffer_get_64, (%rd101, %r24, %r132, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs72, %rs73, %rs74, %rs75}, [%rd100];
	// inline asm
	{  cvt.f32.f16 %f682, %rs72;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f683, %rs73;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f684, %rs74;}

	// inline asm
	// inline asm
	call (%rd106), _rt_buffer_get_64, (%rd101, %r24, %r132, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f685, %f104, %f682;
	add.f32 	%f686, %f104, %f683;
	add.f32 	%f687, %f104, %f684;
	// inline asm
	{  cvt.rn.f16.f32 %rs71, %f687;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs70, %f686;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs69, %f685;}

	// inline asm
	st.v4.u16 	[%rd106], {%rs69, %rs70, %rs71, %rs65};
	bra.uni 	BB0_81;

BB0_80:
	mov.u64 	%rd119, image_RNM2;
	cvta.global.u64 	%rd114, %rd119;
	mov.u32 	%r134, 8;
	// inline asm
	call (%rd113), _rt_buffer_get_64, (%rd114, %r24, %r134, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs76, %f104;}

	// inline asm
	st.v4.u16 	[%rd113], {%rs76, %rs76, %rs76, %rs65};

BB0_81:
	ld.global.u32 	%r135, [additive];
	setp.eq.s32	%p104, %r135, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs77, %f658;}

	// inline asm
	@%p104 bra 	BB0_83;

	mov.u64 	%rd132, image_RNM3;
	cvta.global.u64 	%rd121, %rd132;
	mov.u32 	%r139, 8;
	// inline asm
	call (%rd120), _rt_buffer_get_64, (%rd121, %r24, %r139, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs84, %rs85, %rs86, %rs87}, [%rd120];
	// inline asm
	{  cvt.f32.f16 %f690, %rs84;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f691, %rs85;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f692, %rs86;}

	// inline asm
	// inline asm
	call (%rd126), _rt_buffer_get_64, (%rd121, %r24, %r139, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f693, %f105, %f690;
	add.f32 	%f694, %f105, %f691;
	add.f32 	%f695, %f105, %f692;
	// inline asm
	{  cvt.rn.f16.f32 %rs83, %f695;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs82, %f694;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs81, %f693;}

	// inline asm
	st.v4.u16 	[%rd126], {%rs81, %rs82, %rs83, %rs77};
	bra.uni 	BB0_125;

BB0_83:
	mov.u64 	%rd139, image_RNM3;
	cvta.global.u64 	%rd134, %rd139;
	mov.u32 	%r141, 8;
	// inline asm
	call (%rd133), _rt_buffer_get_64, (%rd134, %r24, %r141, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs88, %f105;}

	// inline asm
	st.v4.u16 	[%rd133], {%rs88, %rs88, %rs88, %rs77};

BB0_125:
	ret;
}


