//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-23083092
// Cuda compilation tools, release 9.1, V9.1.85
// Based on LLVM 3.4svn
//

.version 6.1
.target sm_30
.address_size 64

	// .globl	_Z6oxMainv
.global .align 8 .b8 pixelID[8];
.global .align 8 .b8 resolution[8];
.global .align 4 .b8 normal[12];
.global .align 4 .b8 camPos[12];
.global .align 4 .b8 root[4];
.global .align 4 .u32 imageEnabled;
.global .texref lightmap;
.global .align 16 .b8 tileInfo[16];
.global .align 4 .u32 additive;
.global .align 1 .b8 image[1];
.global .align 1 .b8 image_HDR[1];
.global .align 1 .b8 image_HDR2[1];
.global .align 1 .b8 image_Mask[1];
.global .align 1 .b8 image_RNM0[1];
.global .align 1 .b8 image_RNM1[1];
.global .align 1 .b8 image_RNM2[1];
.global .align 1 .b8 image_RNM3[1];
.global .align 1 .b8 uvpos[1];
.global .align 1 .b8 uvnormal[1];
.global .align 1 .b8 lightMeshBuffer[1];
.global .align 4 .u32 lightMeshBufferSize;
.global .align 4 .f32 lightInvCutoff;
.global .align 4 .f32 lightPointSize;
.global .align 4 .b8 lightColor[12];
.global .align 1 .b8 rnd_seeds[1];
.global .align 4 .u32 samples;
.global .align 4 .b8 _ZN21rti_internal_typeinfo7pixelIDE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10resolutionE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6camPosE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4rootE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12imageEnabledE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8tileInfoE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8additiveE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo19lightMeshBufferSizeE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14lightInvCutoffE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14lightPointSizeE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10lightColorE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo7samplesE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 8 .b8 _ZN21rti_internal_typename7pixelIDE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10resolutionE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6camPosE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 16 .b8 _ZN21rti_internal_typename4rootE[9] = {114, 116, 79, 98, 106, 101, 99, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12imageEnabledE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8tileInfoE[6] = {117, 105, 110, 116, 52, 0};
.global .align 4 .b8 _ZN21rti_internal_typename8additiveE[4] = {105, 110, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename19lightMeshBufferSizeE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename14lightInvCutoffE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename14lightPointSizeE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10lightColorE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 4 .b8 _ZN21rti_internal_typename7samplesE[4] = {105, 110, 116, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum7pixelIDE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10resolutionE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6camPosE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4rootE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12imageEnabledE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8tileInfoE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8additiveE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum19lightMeshBufferSizeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14lightInvCutoffE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14lightPointSizeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10lightColorE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum7samplesE = 4919;
.global .align 16 .b8 _ZN21rti_internal_semantic7pixelIDE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic10resolutionE[12] = {114, 116, 76, 97, 117, 110, 99, 104, 68, 105, 109, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic6normalE[17] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic6camPosE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic4rootE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12imageEnabledE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8tileInfoE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8additiveE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic19lightMeshBufferSizeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic14lightInvCutoffE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic14lightPointSizeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic10lightColorE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic7samplesE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7pixelIDE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10resolutionE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6camPosE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4rootE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12imageEnabledE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8tileInfoE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8additiveE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation19lightMeshBufferSizeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14lightInvCutoffE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14lightPointSizeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10lightColorE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7samplesE[1];
.const .align 4 .b8 __cudart_i2opi_f[24] = {65, 144, 67, 60, 153, 149, 98, 219, 192, 221, 52, 245, 209, 87, 39, 252, 41, 21, 68, 78, 110, 131, 249, 162};

.visible .entry _Z6oxMainv(

)
{
	.local .align 4 .b8 	__local_depot0[36];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<152>;
	.reg .b16 	%rs<152>;
	.reg .f32 	%f<1044>;
	.reg .b32 	%r<425>;
	.reg .b64 	%rd<308>;


	mov.u64 	%rd307, __local_depot0;
	cvta.local.u64 	%SP, %rd307;
	ld.global.v2.u32 	{%r108, %r109}, [pixelID];
	cvt.u64.u32	%rd23, %r108;
	cvt.u64.u32	%rd24, %r109;
	mov.u64 	%rd27, uvnormal;
	cvta.global.u64 	%rd22, %rd27;
	mov.u32 	%r106, 2;
	mov.u32 	%r107, 4;
	mov.u64 	%rd26, 0;
	// inline asm
	call (%rd21), _rt_buffer_get_64, (%rd22, %r106, %r107, %rd23, %rd24, %rd26, %rd26);
	// inline asm
	ld.u32 	%r1, [%rd21];
	shr.u32 	%r112, %r1, 16;
	cvt.u16.u32	%rs1, %r112;
	and.b16  	%rs7, %rs1, 255;
	cvt.u16.u32	%rs8, %r1;
	or.b16  	%rs9, %rs8, %rs7;
	setp.eq.s16	%p7, %rs9, 0;
	mov.f32 	%f960, 0f00000000;
	mov.f32 	%f961, %f960;
	mov.f32 	%f962, %f960;
	@%p7 bra 	BB0_2;

	ld.u8 	%rs10, [%rd21+1];
	and.b16  	%rs12, %rs8, 255;
	cvt.rn.f32.u16	%f237, %rs12;
	div.rn.f32 	%f238, %f237, 0f437F0000;
	fma.rn.f32 	%f239, %f238, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f240, %rs10;
	div.rn.f32 	%f241, %f240, 0f437F0000;
	fma.rn.f32 	%f242, %f241, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f243, %rs7;
	div.rn.f32 	%f244, %f243, 0f437F0000;
	fma.rn.f32 	%f245, %f244, 0f40000000, 0fBF800000;
	mul.f32 	%f246, %f242, %f242;
	fma.rn.f32 	%f247, %f239, %f239, %f246;
	fma.rn.f32 	%f248, %f245, %f245, %f247;
	sqrt.rn.f32 	%f249, %f248;
	rcp.rn.f32 	%f250, %f249;
	mul.f32 	%f960, %f239, %f250;
	mul.f32 	%f961, %f242, %f250;
	mul.f32 	%f962, %f245, %f250;

BB0_2:
	ld.global.v2.u32 	{%r113, %r114}, [pixelID];
	ld.global.v2.u32 	{%r116, %r117}, [tileInfo];
	add.s32 	%r2, %r113, %r116;
	add.s32 	%r3, %r114, %r117;
	setp.eq.f32	%p8, %f961, 0f00000000;
	setp.eq.f32	%p9, %f960, 0f00000000;
	and.pred  	%p10, %p9, %p8;
	setp.eq.f32	%p11, %f962, 0f00000000;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	BB0_143;
	bra.uni 	BB0_3;

BB0_143:
	ld.global.u32 	%r424, [imageEnabled];
	and.b32  	%r342, %r424, 1;
	setp.eq.b32	%p143, %r342, 1;
	@!%p143 bra 	BB0_145;
	bra.uni 	BB0_144;

BB0_144:
	cvt.u64.u32	%rd189, %r2;
	cvt.u64.u32	%rd190, %r3;
	mov.u64 	%rd193, image;
	cvta.global.u64 	%rd188, %rd193;
	mov.u64 	%rd192, 0;
	// inline asm
	call (%rd187), _rt_buffer_get_64, (%rd188, %r106, %r107, %rd189, %rd190, %rd192, %rd192);
	// inline asm
	mov.u16 	%rs84, 0;
	st.v4.u8 	[%rd187], {%rs84, %rs84, %rs84, %rs84};
	ld.global.u32 	%r424, [imageEnabled];

BB0_145:
	and.b32  	%r345, %r424, 8;
	setp.eq.s32	%p144, %r345, 0;
	@%p144 bra 	BB0_147;

	cvt.u64.u32	%rd197, %r3;
	cvt.u64.u32	%rd196, %r2;
	mov.u64 	%rd200, image_Mask;
	cvta.global.u64 	%rd195, %rd200;
	mov.u64 	%rd199, 0;
	// inline asm
	call (%rd194), _rt_buffer_get_64, (%rd195, %r106, %r106, %rd196, %rd197, %rd199, %rd199);
	// inline asm
	mov.f32 	%f915, 0f00000000;
	cvt.rzi.u32.f32	%r348, %f915;
	cvt.u16.u32	%rs85, %r348;
	mov.u16 	%rs86, 0;
	st.v2.u8 	[%rd194], {%rs85, %rs86};
	ld.global.u32 	%r424, [imageEnabled];

BB0_147:
	cvt.u64.u32	%rd19, %r2;
	cvt.u64.u32	%rd20, %r3;
	and.b32  	%r349, %r424, 4;
	setp.eq.s32	%p145, %r349, 0;
	@%p145 bra 	BB0_151;

	ld.global.u32 	%r350, [additive];
	setp.eq.s32	%p146, %r350, 0;
	@%p146 bra 	BB0_150;

	mov.u64 	%rd213, image_HDR;
	cvta.global.u64 	%rd202, %rd213;
	mov.u32 	%r354, 8;
	mov.u64 	%rd212, 0;
	// inline asm
	call (%rd201), _rt_buffer_get_64, (%rd202, %r106, %r354, %rd19, %rd20, %rd212, %rd212);
	// inline asm
	ld.v4.u16 	{%rs93, %rs94, %rs95, %rs96}, [%rd201];
	// inline asm
	{  cvt.f32.f16 %f916, %rs93;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f917, %rs94;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f918, %rs95;}

	// inline asm
	// inline asm
	call (%rd207), _rt_buffer_get_64, (%rd202, %r106, %r354, %rd19, %rd20, %rd212, %rd212);
	// inline asm
	add.f32 	%f919, %f916, 0f00000000;
	add.f32 	%f920, %f917, 0f00000000;
	add.f32 	%f921, %f918, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs92, %f921;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs91, %f920;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs90, %f919;}

	// inline asm
	mov.u16 	%rs97, 0;
	st.v4.u16 	[%rd207], {%rs90, %rs91, %rs92, %rs97};
	bra.uni 	BB0_151;

BB0_3:
	ld.global.v2.u32 	{%r126, %r127}, [pixelID];
	cvt.u64.u32	%rd30, %r126;
	cvt.u64.u32	%rd31, %r127;
	mov.u64 	%rd40, uvpos;
	cvta.global.u64 	%rd29, %rd40;
	mov.u32 	%r122, 12;
	// inline asm
	call (%rd28), _rt_buffer_get_64, (%rd29, %r106, %r122, %rd30, %rd31, %rd26, %rd26);
	// inline asm
	ld.f32 	%f9, [%rd28+8];
	ld.f32 	%f8, [%rd28+4];
	ld.f32 	%f7, [%rd28];
	mul.f32 	%f257, %f7, 0f3456BF95;
	mul.f32 	%f258, %f8, 0f3456BF95;
	mul.f32 	%f259, %f9, 0f3456BF95;
	abs.f32 	%f10, %f960;
	div.rn.f32 	%f260, %f257, %f10;
	abs.f32 	%f261, %f961;
	div.rn.f32 	%f262, %f258, %f261;
	abs.f32 	%f11, %f962;
	div.rn.f32 	%f263, %f259, %f11;
	abs.f32 	%f264, %f260;
	abs.f32 	%f265, %f262;
	abs.f32 	%f266, %f263;
	mov.f32 	%f267, 0f38D1B717;
	max.f32 	%f268, %f264, %f267;
	max.f32 	%f269, %f265, %f267;
	max.f32 	%f270, %f266, %f267;
	fma.rn.f32 	%f12, %f960, %f268, %f7;
	fma.rn.f32 	%f13, %f961, %f269, %f8;
	fma.rn.f32 	%f14, %f962, %f270, %f9;
	ld.global.v2.u32 	{%r130, %r131}, [pixelID];
	cvt.u64.u32	%rd36, %r130;
	cvt.u64.u32	%rd37, %r131;
	mov.u64 	%rd41, rnd_seeds;
	cvta.global.u64 	%rd35, %rd41;
	// inline asm
	call (%rd34), _rt_buffer_get_64, (%rd35, %r106, %r107, %rd36, %rd37, %rd26, %rd26);
	// inline asm
	ld.u32 	%r134, [%rd34];
	mad.lo.s32 	%r4, %r134, 1664525, 1013904223;
	ld.global.u32 	%r135, [lightMeshBufferSize];
	setp.eq.s32	%p14, %r135, 0;
	mov.pred 	%p13, 0;
	mov.f32 	%f20, 0f00000000;
	mov.u32 	%r6, 0;
	@%p14 bra 	BB0_4;

	ld.global.f32 	%f15, [lightPointSize];
	mul.f32 	%f16, %f12, 0f3456BF95;
	mul.f32 	%f17, %f13, 0f3456BF95;
	mul.f32 	%f18, %f14, 0f3456BF95;
	and.b32  	%r138, %r4, 16777215;
	cvt.rn.f32.u32	%f277, %r138;
	mul.f32 	%f278, %f277, 0fB3800000;
	fma.rn.f32 	%f19, %f278, 0f3F333333, 0f3F800000;
	mov.f32 	%f20, 0f00000000;
	mov.u32 	%r389, 0;
	abs.f32 	%f400, %f17;
	abs.f32 	%f401, %f16;
	max.f32 	%f402, %f401, %f400;
	abs.f32 	%f403, %f18;
	max.f32 	%f404, %f402, %f403;
	mov.u32 	%r6, %r389;
	mov.f32 	%f21, %f20;
	mov.f32 	%f22, %f20;
	mov.f32 	%f23, %f20;
	mov.f32 	%f24, %f20;
	mov.f32 	%f25, %f20;

BB0_6:
	shl.b32 	%r7, %r389, 1;
	cvt.s64.s32	%rd44, %r7;
	mov.u64 	%rd48, lightMeshBuffer;
	cvta.global.u64 	%rd43, %rd48;
	mov.u32 	%r139, 1;
	// inline asm
	call (%rd42), _rt_buffer_get_64, (%rd43, %r139, %r122, %rd44, %rd26, %rd26, %rd26);
	// inline asm
	ld.f32 	%f279, [%rd42];
	sub.f32 	%f280, %f279, %f7;
	ld.f32 	%f281, [%rd42+4];
	sub.f32 	%f282, %f281, %f8;
	ld.f32 	%f283, [%rd42+8];
	sub.f32 	%f284, %f283, %f9;
	mul.f32 	%f285, %f282, %f282;
	fma.rn.f32 	%f286, %f280, %f280, %f285;
	fma.rn.f32 	%f287, %f284, %f284, %f286;
	sqrt.rn.f32 	%f26, %f287;
	rcp.rn.f32 	%f288, %f26;
	mul.f32 	%f27, %f280, %f288;
	mul.f32 	%f28, %f282, %f288;
	mul.f32 	%f29, %f284, %f288;
	mul.f32 	%f289, %f961, %f28;
	fma.rn.f32 	%f290, %f960, %f27, %f289;
	fma.rn.f32 	%f30, %f962, %f29, %f290;
	setp.leu.f32	%p15, %f30, 0f00000000;
	@%p15 bra 	BB0_22;

	mul.f32 	%f291, %f26, %f26;
	mul.f32 	%f292, %f291, 0f40C90FDB;
	div.rn.f32 	%f293, %f15, %f292;
	add.f32 	%f31, %f293, %f293;
	setp.gt.f32	%p17, %f31, %f19;
	ld.global.u32 	%r141, [samples];
	setp.ne.s32	%p18, %r141, 0;
	and.pred  	%p19, %p18, %p17;
	mov.pred 	%p151, -1;
	@%p19 bra 	BB0_24;

	ld.global.f32 	%f296, [lightInvCutoff];
	mul.f32 	%f32, %f26, %f296;
	mov.f32 	%f300, 0f40800000;
	abs.f32 	%f34, %f32;
	setp.lt.f32	%p20, %f34, 0f00800000;
	mul.f32 	%f302, %f34, 0f4B800000;
	selp.f32	%f303, 0fC3170000, 0fC2FE0000, %p20;
	selp.f32	%f304, %f302, %f34, %p20;
	mov.b32 	 %r142, %f304;
	and.b32  	%r143, %r142, 8388607;
	or.b32  	%r144, %r143, 1065353216;
	mov.b32 	 %f305, %r144;
	shr.u32 	%r145, %r142, 23;
	cvt.rn.f32.u32	%f306, %r145;
	add.f32 	%f307, %f303, %f306;
	setp.gt.f32	%p21, %f305, 0f3FB504F3;
	mul.f32 	%f308, %f305, 0f3F000000;
	add.f32 	%f309, %f307, 0f3F800000;
	selp.f32	%f310, %f308, %f305, %p21;
	selp.f32	%f311, %f309, %f307, %p21;
	add.f32 	%f312, %f310, 0fBF800000;
	add.f32 	%f295, %f310, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f294,%f295;
	// inline asm
	add.f32 	%f313, %f312, %f312;
	mul.f32 	%f314, %f294, %f313;
	mul.f32 	%f315, %f314, %f314;
	mov.f32 	%f316, 0f3C4CAF63;
	mov.f32 	%f317, 0f3B18F0FE;
	fma.rn.f32 	%f318, %f317, %f315, %f316;
	mov.f32 	%f319, 0f3DAAAABD;
	fma.rn.f32 	%f320, %f318, %f315, %f319;
	mul.rn.f32 	%f321, %f320, %f315;
	mul.rn.f32 	%f322, %f321, %f314;
	sub.f32 	%f323, %f312, %f314;
	neg.f32 	%f324, %f314;
	add.f32 	%f325, %f323, %f323;
	fma.rn.f32 	%f326, %f324, %f312, %f325;
	mul.rn.f32 	%f327, %f294, %f326;
	add.f32 	%f328, %f322, %f314;
	sub.f32 	%f329, %f314, %f328;
	add.f32 	%f330, %f322, %f329;
	add.f32 	%f331, %f327, %f330;
	add.f32 	%f332, %f328, %f331;
	sub.f32 	%f333, %f328, %f332;
	add.f32 	%f334, %f331, %f333;
	mov.f32 	%f335, 0f3F317200;
	mul.rn.f32 	%f336, %f311, %f335;
	mov.f32 	%f337, 0f35BFBE8E;
	mul.rn.f32 	%f338, %f311, %f337;
	add.f32 	%f339, %f336, %f332;
	sub.f32 	%f340, %f336, %f339;
	add.f32 	%f341, %f332, %f340;
	add.f32 	%f342, %f334, %f341;
	add.f32 	%f343, %f338, %f342;
	add.f32 	%f344, %f339, %f343;
	sub.f32 	%f345, %f339, %f344;
	add.f32 	%f346, %f343, %f345;
	mul.rn.f32 	%f347, %f300, %f344;
	neg.f32 	%f348, %f347;
	fma.rn.f32 	%f349, %f300, %f344, %f348;
	fma.rn.f32 	%f350, %f300, %f346, %f349;
	mov.f32 	%f351, 0f00000000;
	fma.rn.f32 	%f352, %f351, %f344, %f350;
	add.rn.f32 	%f353, %f347, %f352;
	neg.f32 	%f354, %f353;
	add.rn.f32 	%f355, %f347, %f354;
	add.rn.f32 	%f356, %f355, %f352;
	mov.b32 	 %r146, %f353;
	setp.eq.s32	%p22, %r146, 1118925336;
	add.s32 	%r147, %r146, -1;
	mov.b32 	 %f357, %r147;
	add.f32 	%f358, %f356, 0f37000000;
	selp.f32	%f359, %f357, %f353, %p22;
	selp.f32	%f35, %f358, %f356, %p22;
	mul.f32 	%f360, %f359, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f361, %f360;
	mov.f32 	%f362, 0fBF317200;
	fma.rn.f32 	%f363, %f361, %f362, %f359;
	mov.f32 	%f364, 0fB5BFBE8E;
	fma.rn.f32 	%f365, %f361, %f364, %f363;
	mul.f32 	%f366, %f365, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f367, %f366;
	add.f32 	%f368, %f361, 0f00000000;
	ex2.approx.f32 	%f369, %f368;
	mul.f32 	%f370, %f367, %f369;
	setp.lt.f32	%p23, %f359, 0fC2D20000;
	selp.f32	%f371, 0f00000000, %f370, %p23;
	setp.gt.f32	%p24, %f359, 0f42D20000;
	selp.f32	%f969, 0f7F800000, %f371, %p24;
	setp.eq.f32	%p25, %f969, 0f7F800000;
	@%p25 bra 	BB0_10;

	fma.rn.f32 	%f969, %f969, %f35, %f969;

BB0_10:
	mov.f32 	%f956, 0f40000000;
	cvt.rzi.f32.f32	%f955, %f956;
	add.f32 	%f954, %f955, %f955;
	mov.f32 	%f953, 0f40800000;
	sub.f32 	%f952, %f953, %f954;
	abs.f32 	%f951, %f952;
	setp.lt.f32	%p26, %f32, 0f00000000;
	setp.eq.f32	%p27, %f951, 0f3F800000;
	and.pred  	%p1, %p26, %p27;
	mov.b32 	 %r148, %f969;
	xor.b32  	%r149, %r148, -2147483648;
	mov.b32 	 %f372, %r149;
	selp.f32	%f971, %f372, %f969, %p1;
	setp.eq.f32	%p28, %f32, 0f00000000;
	@%p28 bra 	BB0_13;
	bra.uni 	BB0_11;

BB0_13:
	add.f32 	%f375, %f32, %f32;
	selp.f32	%f971, %f375, 0f00000000, %p27;
	bra.uni 	BB0_14;

BB0_11:
	setp.geu.f32	%p29, %f32, 0f00000000;
	@%p29 bra 	BB0_14;

	mov.f32 	%f959, 0f40800000;
	cvt.rzi.f32.f32	%f374, %f959;
	setp.neu.f32	%p30, %f374, 0f40800000;
	selp.f32	%f971, 0f7FFFFFFF, %f971, %p30;

BB0_14:
	add.f32 	%f376, %f34, 0f40800000;
	mov.b32 	 %r150, %f376;
	setp.lt.s32	%p32, %r150, 2139095040;
	@%p32 bra 	BB0_19;

	setp.gtu.f32	%p33, %f34, 0f7F800000;
	@%p33 bra 	BB0_18;
	bra.uni 	BB0_16;

BB0_18:
	add.f32 	%f971, %f32, 0f40800000;
	bra.uni 	BB0_19;

BB0_16:
	setp.neu.f32	%p34, %f34, 0f7F800000;
	@%p34 bra 	BB0_19;

	selp.f32	%f971, 0fFF800000, 0f7F800000, %p1;

BB0_19:
	mov.u32 	%r386, 1;
	mov.u64 	%rd302, lightMeshBuffer;
	cvta.global.u64 	%rd301, %rd302;
	shl.b32 	%r385, %r389, 1;
	mov.f32 	%f377, 0f3F800000;
	sub.f32 	%f378, %f377, %f971;
	setp.eq.f32	%p35, %f32, 0f3F800000;
	selp.f32	%f379, 0f00000000, %f378, %p35;
	cvt.sat.f32.f32	%f380, %f379;
	mul.f32 	%f381, %f31, %f380;
	add.s32 	%r153, %r385, 1;
	cvt.s64.s32	%rd51, %r153;
	// inline asm
	call (%rd49), _rt_buffer_get_64, (%rd301, %r386, %r122, %rd51, %rd26, %rd26, %rd26);
	// inline asm
	ld.f32 	%f382, [%rd49];
	mul.f32 	%f383, %f27, %f382;
	ld.f32 	%f384, [%rd49+4];
	mul.f32 	%f385, %f28, %f384;
	neg.f32 	%f386, %f385;
	sub.f32 	%f387, %f386, %f383;
	ld.f32 	%f388, [%rd49+8];
	mul.f32 	%f389, %f29, %f388;
	sub.f32 	%f390, %f387, %f389;
	cvt.sat.f32.f32	%f391, %f390;
	mul.f32 	%f46, %f381, %f391;
	setp.leu.f32	%p36, %f46, 0f3727C5AC;
	@%p36 bra 	BB0_21;

	mov.u32 	%r388, 1;
	add.u64 	%rd56, %SP, 4;
	cvta.to.local.u64 	%rd57, %rd56;
	max.f32 	%f398, %f404, %f267;
	sub.f32 	%f399, %f26, %f398;
	mov.u32 	%r157, 1065353216;
	st.local.u32 	[%rd57], %r157;
	ld.global.u32 	%r154, [root];
	// inline asm
	call _rt_trace_64, (%r154, %f12, %f13, %f14, %f27, %f28, %f29, %r388, %f398, %f399, %rd56, %r107);
	// inline asm
	ld.local.f32 	%f406, [%rd57];
	mul.f32 	%f407, %f46, %f406;
	cvt.sat.f32.f32	%f408, %f30;
	fma.rn.f32 	%f25, %f408, %f407, %f25;
	fma.rn.f32 	%f23, %f27, %f407, %f23;
	fma.rn.f32 	%f22, %f28, %f407, %f22;
	fma.rn.f32 	%f21, %f29, %f407, %f21;
	add.f32 	%f24, %f24, %f407;
	add.f32 	%f20, %f20, %f406;

BB0_21:
	add.s32 	%r6, %r6, 1;

BB0_22:
	ld.global.u32 	%r158, [lightMeshBufferSize];
	add.s32 	%r389, %r389, 1;
	setp.lt.u32	%p38, %r389, %r158;
	@%p38 bra 	BB0_6;
	bra.uni 	BB0_23;

BB0_4:
	mov.f32 	%f21, %f20;
	mov.f32 	%f22, %f20;
	mov.f32 	%f23, %f20;
	mov.f32 	%f24, %f20;
	mov.f32 	%f25, %f20;

BB0_23:
	mov.pred 	%p151, %p13;

BB0_24:
	cvt.rn.f32.s32	%f409, %r6;
	mov.f32 	%f410, 0f3F800000;
	max.f32 	%f411, %f409, %f410;
	div.rn.f32 	%f1026, %f25, %f411;
	div.rn.f32 	%f1031, %f20, %f411;
	div.rn.f32 	%f1027, %f24, %f411;
	div.rn.f32 	%f1028, %f23, %f411;
	div.rn.f32 	%f1029, %f22, %f411;
	div.rn.f32 	%f1030, %f21, %f411;
	@!%p151 bra 	BB0_79;
	bra.uni 	BB0_25;

BB0_25:
	abs.f32 	%f958, %f962;
	abs.f32 	%f957, %f960;
	setp.gt.f32	%p39, %f957, %f958;
	neg.f32 	%f418, %f961;
	selp.f32	%f419, %f418, 0f00000000, %p39;
	neg.f32 	%f420, %f962;
	selp.f32	%f421, %f960, %f420, %p39;
	selp.f32	%f422, 0f00000000, %f961, %p39;
	mul.f32 	%f423, %f421, %f421;
	fma.rn.f32 	%f424, %f419, %f419, %f423;
	fma.rn.f32 	%f425, %f422, %f422, %f424;
	sqrt.rn.f32 	%f426, %f425;
	rcp.rn.f32 	%f427, %f426;
	mul.f32 	%f77, %f419, %f427;
	mul.f32 	%f78, %f421, %f427;
	mul.f32 	%f79, %f422, %f427;
	ld.global.u32 	%r393, [samples];
	mov.f32 	%f1014, 0f00000000;
	setp.lt.s32	%p40, %r393, 1;
	@%p40 bra 	BB0_26;

	mad.lo.s32 	%r419, %r134, 1664525, 1013904223;
	cvt.rn.f32.s32	%f434, %r393;
	rcp.rn.f32 	%f80, %f434;
	add.u64 	%rd58, %SP, 8;
	cvta.to.local.u64 	%rd2, %rd58;
	mul.f32 	%f81, %f12, 0f3456BF95;
	mul.f32 	%f82, %f13, 0f3456BF95;
	mul.f32 	%f83, %f14, 0f3456BF95;
	mul.f32 	%f435, %f960, %f78;
	mul.f32 	%f436, %f961, %f77;
	sub.f32 	%f84, %f436, %f435;
	mul.f32 	%f437, %f962, %f77;
	mul.f32 	%f438, %f960, %f79;
	sub.f32 	%f85, %f438, %f437;
	mul.f32 	%f439, %f961, %f79;
	mul.f32 	%f440, %f962, %f78;
	sub.f32 	%f86, %f440, %f439;
	mov.f32 	%f1014, 0f00000000;
	mov.u32 	%r394, 0;
	abs.f32 	%f441, %f82;
	abs.f32 	%f442, %f81;
	max.f32 	%f443, %f442, %f441;
	abs.f32 	%f444, %f83;
	max.f32 	%f445, %f443, %f444;
	mov.f32 	%f1015, %f1014;
	mov.f32 	%f1016, %f1014;
	mov.f32 	%f1017, %f1014;
	mov.f32 	%f1018, %f1014;
	mov.f32 	%f1019, %f1014;

BB0_28:
	setp.lt.s32	%p41, %r393, 1;
	@%p41 bra 	BB0_77;

	cvt.rn.f32.s32	%f93, %r394;
	max.f32 	%f94, %f445, %f267;
	add.u64 	%rd59, %SP, 0;
	cvta.to.local.u64 	%rd3, %rd59;
	mov.u32 	%r396, 0;

BB0_30:
	mad.lo.s32 	%r161, %r419, 1664525, 1013904223;
	and.b32  	%r162, %r161, 16777215;
	cvt.rn.f32.u32	%f447, %r162;
	fma.rn.f32 	%f448, %f447, 0f33800000, %f93;
	mul.f32 	%f449, %f80, %f448;
	mad.lo.s32 	%r419, %r161, 1664525, 1013904223;
	and.b32  	%r163, %r419, 16777215;
	cvt.rn.f32.u32	%f450, %r163;
	cvt.rn.f32.s32	%f451, %r396;
	fma.rn.f32 	%f452, %f450, 0f33800000, %f451;
	mul.f32 	%f453, %f80, %f452;
	fma.rn.f32 	%f101, %f449, 0fC0000000, 0f3F800000;
	mul.f32 	%f454, %f101, %f101;
	sub.f32 	%f456, %f410, %f454;
	mov.f32 	%f457, 0f00000000;
	max.f32 	%f458, %f457, %f456;
	sqrt.rn.f32 	%f102, %f458;
	mul.f32 	%f1008, %f453, 0f40C90FDB;
	abs.f32 	%f104, %f1008;
	setp.neu.f32	%p42, %f104, 0f7F800000;
	mov.f32 	%f1002, %f1008;
	@%p42 bra 	BB0_32;

	mul.rn.f32 	%f1002, %f1008, %f457;

BB0_32:
	mul.f32 	%f460, %f1002, 0f3F22F983;
	cvt.rni.s32.f32	%r407, %f460;
	cvt.rn.f32.s32	%f461, %r407;
	neg.f32 	%f462, %f461;
	mov.f32 	%f463, 0f3FC90FDA;
	fma.rn.f32 	%f464, %f462, %f463, %f1002;
	mov.f32 	%f465, 0f33A22168;
	fma.rn.f32 	%f466, %f462, %f465, %f464;
	mov.f32 	%f467, 0f27C234C5;
	fma.rn.f32 	%f1003, %f462, %f467, %f466;
	abs.f32 	%f468, %f1002;
	setp.leu.f32	%p43, %f468, 0f47CE4780;
	@%p43 bra 	BB0_43;

	mov.b32 	 %r20, %f1002;
	shr.u32 	%r21, %r20, 23;
	shl.b32 	%r166, %r20, 8;
	or.b32  	%r22, %r166, -2147483648;
	mov.u32 	%r398, 0;
	mov.u64 	%rd304, 0;
	mov.u64 	%rd303, %rd2;
	mov.u32 	%r399, %r398;

BB0_34:
	.pragma "nounroll";
	shl.b64 	%rd61, %rd304, 2;
	mov.u64 	%rd62, __cudart_i2opi_f;
	add.s64 	%rd63, %rd62, %rd61;
	ld.const.u32 	%r169, [%rd63];
	// inline asm
	{
	mad.lo.cc.u32   %r167, %r169, %r22, %r399;
	madc.hi.u32     %r399, %r169, %r22,  0;
	}
	// inline asm
	st.local.u32 	[%rd303], %r167;
	add.s32 	%r398, %r398, 1;
	cvt.s64.s32	%rd304, %r398;
	mul.wide.s32 	%rd64, %r398, 4;
	add.s64 	%rd303, %rd2, %rd64;
	setp.ne.s32	%p44, %r398, 6;
	@%p44 bra 	BB0_34;

	and.b32  	%r172, %r21, 255;
	add.s32 	%r173, %r172, -128;
	shr.u32 	%r174, %r173, 5;
	and.b32  	%r27, %r20, -2147483648;
	st.local.u32 	[%rd2+24], %r399;
	mov.u32 	%r175, 6;
	sub.s32 	%r176, %r175, %r174;
	mul.wide.s32 	%rd65, %r176, 4;
	add.s64 	%rd9, %rd2, %rd65;
	ld.local.u32 	%r400, [%rd9];
	ld.local.u32 	%r401, [%rd9+-4];
	and.b32  	%r30, %r21, 31;
	setp.eq.s32	%p45, %r30, 0;
	@%p45 bra 	BB0_37;

	mov.u32 	%r177, 32;
	sub.s32 	%r178, %r177, %r30;
	shr.u32 	%r179, %r401, %r178;
	shl.b32 	%r180, %r400, %r30;
	add.s32 	%r400, %r179, %r180;
	ld.local.u32 	%r181, [%rd9+-8];
	shr.u32 	%r182, %r181, %r178;
	shl.b32 	%r183, %r401, %r30;
	add.s32 	%r401, %r182, %r183;

BB0_37:
	shr.u32 	%r184, %r401, 30;
	shl.b32 	%r185, %r400, 2;
	add.s32 	%r402, %r184, %r185;
	shl.b32 	%r36, %r401, 2;
	shr.u32 	%r186, %r402, 31;
	shr.u32 	%r187, %r400, 30;
	add.s32 	%r37, %r186, %r187;
	setp.eq.s32	%p46, %r186, 0;
	@%p46 bra 	BB0_38;
	bra.uni 	BB0_39;

BB0_38:
	mov.u32 	%r403, %r27;
	mov.u32 	%r404, %r36;
	bra.uni 	BB0_40;

BB0_39:
	not.b32 	%r188, %r402;
	neg.s32 	%r404, %r36;
	setp.eq.s32	%p47, %r36, 0;
	selp.u32	%r189, 1, 0, %p47;
	add.s32 	%r402, %r189, %r188;
	xor.b32  	%r403, %r27, -2147483648;

BB0_40:
	clz.b32 	%r406, %r402;
	setp.eq.s32	%p48, %r406, 0;
	shl.b32 	%r190, %r402, %r406;
	mov.u32 	%r191, 32;
	sub.s32 	%r192, %r191, %r406;
	shr.u32 	%r193, %r404, %r192;
	add.s32 	%r194, %r193, %r190;
	selp.b32	%r45, %r402, %r194, %p48;
	mov.u32 	%r195, -921707870;
	mul.hi.u32 	%r405, %r45, %r195;
	setp.eq.s32	%p49, %r27, 0;
	neg.s32 	%r196, %r37;
	selp.b32	%r407, %r37, %r196, %p49;
	setp.lt.s32	%p50, %r405, 1;
	@%p50 bra 	BB0_42;

	mul.lo.s32 	%r197, %r45, -921707870;
	shr.u32 	%r198, %r197, 31;
	shl.b32 	%r199, %r405, 1;
	add.s32 	%r405, %r198, %r199;
	add.s32 	%r406, %r406, 1;

BB0_42:
	mov.u32 	%r200, 126;
	sub.s32 	%r201, %r200, %r406;
	shl.b32 	%r202, %r201, 23;
	add.s32 	%r203, %r405, 1;
	shr.u32 	%r204, %r203, 7;
	add.s32 	%r205, %r204, 1;
	shr.u32 	%r206, %r205, 1;
	add.s32 	%r207, %r206, %r202;
	or.b32  	%r208, %r207, %r403;
	mov.b32 	 %f1003, %r208;

BB0_43:
	mul.rn.f32 	%f110, %f1003, %f1003;
	add.s32 	%r53, %r407, 1;
	and.b32  	%r54, %r53, 1;
	setp.eq.s32	%p51, %r54, 0;
	@%p51 bra 	BB0_45;
	bra.uni 	BB0_44;

BB0_45:
	mov.f32 	%f471, 0f3C08839E;
	mov.f32 	%f472, 0fB94CA1F9;
	fma.rn.f32 	%f1004, %f472, %f110, %f471;
	bra.uni 	BB0_46;

BB0_44:
	mov.f32 	%f469, 0fBAB6061A;
	mov.f32 	%f470, 0f37CCF5CE;
	fma.rn.f32 	%f1004, %f470, %f110, %f469;

BB0_46:
	@%p51 bra 	BB0_48;
	bra.uni 	BB0_47;

BB0_48:
	mov.f32 	%f476, 0fBE2AAAA3;
	fma.rn.f32 	%f477, %f1004, %f110, %f476;
	fma.rn.f32 	%f1005, %f477, %f110, %f457;
	bra.uni 	BB0_49;

BB0_47:
	mov.f32 	%f473, 0f3D2AAAA5;
	fma.rn.f32 	%f474, %f1004, %f110, %f473;
	mov.f32 	%f475, 0fBF000000;
	fma.rn.f32 	%f1005, %f474, %f110, %f475;

BB0_49:
	fma.rn.f32 	%f1006, %f1005, %f1003, %f1003;
	@%p51 bra 	BB0_51;

	fma.rn.f32 	%f1006, %f1005, %f110, %f410;

BB0_51:
	and.b32  	%r209, %r53, 2;
	setp.eq.s32	%p54, %r209, 0;
	@%p54 bra 	BB0_53;

	mov.f32 	%f481, 0fBF800000;
	fma.rn.f32 	%f1006, %f1006, %f481, %f457;

BB0_53:
	@%p42 bra 	BB0_55;

	mul.rn.f32 	%f1008, %f1008, %f457;

BB0_55:
	mul.f32 	%f483, %f1008, 0f3F22F983;
	cvt.rni.s32.f32	%r417, %f483;
	cvt.rn.f32.s32	%f484, %r417;
	neg.f32 	%f485, %f484;
	fma.rn.f32 	%f487, %f485, %f463, %f1008;
	fma.rn.f32 	%f489, %f485, %f465, %f487;
	fma.rn.f32 	%f1009, %f485, %f467, %f489;
	abs.f32 	%f491, %f1008;
	setp.leu.f32	%p56, %f491, 0f47CE4780;
	@%p56 bra 	BB0_66;

	mov.b32 	 %r56, %f1008;
	shr.u32 	%r57, %r56, 23;
	shl.b32 	%r212, %r56, 8;
	or.b32  	%r58, %r212, -2147483648;
	mov.u32 	%r408, 0;
	mov.u64 	%rd305, %rd2;
	mov.u64 	%rd306, %rd26;
	mov.u32 	%r409, %r408;

BB0_57:
	.pragma "nounroll";
	shl.b64 	%rd67, %rd306, 2;
	mov.u64 	%rd68, __cudart_i2opi_f;
	add.s64 	%rd69, %rd68, %rd67;
	ld.const.u32 	%r215, [%rd69];
	// inline asm
	{
	mad.lo.cc.u32   %r213, %r215, %r58, %r409;
	madc.hi.u32     %r409, %r215, %r58,  0;
	}
	// inline asm
	st.local.u32 	[%rd305], %r213;
	add.s32 	%r408, %r408, 1;
	cvt.s64.s32	%rd306, %r408;
	mul.wide.s32 	%rd70, %r408, 4;
	add.s64 	%rd305, %rd2, %rd70;
	setp.ne.s32	%p57, %r408, 6;
	@%p57 bra 	BB0_57;

	and.b32  	%r218, %r57, 255;
	add.s32 	%r219, %r218, -128;
	shr.u32 	%r220, %r219, 5;
	and.b32  	%r63, %r56, -2147483648;
	st.local.u32 	[%rd2+24], %r409;
	mov.u32 	%r221, 6;
	sub.s32 	%r222, %r221, %r220;
	mul.wide.s32 	%rd71, %r222, 4;
	add.s64 	%rd15, %rd2, %rd71;
	ld.local.u32 	%r410, [%rd15];
	ld.local.u32 	%r411, [%rd15+-4];
	and.b32  	%r66, %r57, 31;
	setp.eq.s32	%p58, %r66, 0;
	@%p58 bra 	BB0_60;

	mov.u32 	%r223, 32;
	sub.s32 	%r224, %r223, %r66;
	shr.u32 	%r225, %r411, %r224;
	shl.b32 	%r226, %r410, %r66;
	add.s32 	%r410, %r225, %r226;
	ld.local.u32 	%r227, [%rd15+-8];
	shr.u32 	%r228, %r227, %r224;
	shl.b32 	%r229, %r411, %r66;
	add.s32 	%r411, %r228, %r229;

BB0_60:
	shr.u32 	%r230, %r411, 30;
	shl.b32 	%r231, %r410, 2;
	add.s32 	%r412, %r230, %r231;
	shl.b32 	%r72, %r411, 2;
	shr.u32 	%r232, %r412, 31;
	shr.u32 	%r233, %r410, 30;
	add.s32 	%r73, %r232, %r233;
	setp.eq.s32	%p59, %r232, 0;
	@%p59 bra 	BB0_61;
	bra.uni 	BB0_62;

BB0_61:
	mov.u32 	%r413, %r63;
	mov.u32 	%r414, %r72;
	bra.uni 	BB0_63;

BB0_62:
	not.b32 	%r234, %r412;
	neg.s32 	%r414, %r72;
	setp.eq.s32	%p60, %r72, 0;
	selp.u32	%r235, 1, 0, %p60;
	add.s32 	%r412, %r235, %r234;
	xor.b32  	%r413, %r63, -2147483648;

BB0_63:
	clz.b32 	%r416, %r412;
	setp.eq.s32	%p61, %r416, 0;
	shl.b32 	%r236, %r412, %r416;
	mov.u32 	%r237, 32;
	sub.s32 	%r238, %r237, %r416;
	shr.u32 	%r239, %r414, %r238;
	add.s32 	%r240, %r239, %r236;
	selp.b32	%r81, %r412, %r240, %p61;
	mov.u32 	%r241, -921707870;
	mul.hi.u32 	%r415, %r81, %r241;
	setp.eq.s32	%p62, %r63, 0;
	neg.s32 	%r242, %r73;
	selp.b32	%r417, %r73, %r242, %p62;
	setp.lt.s32	%p63, %r415, 1;
	@%p63 bra 	BB0_65;

	mul.lo.s32 	%r243, %r81, -921707870;
	shr.u32 	%r244, %r243, 31;
	shl.b32 	%r245, %r415, 1;
	add.s32 	%r415, %r244, %r245;
	add.s32 	%r416, %r416, 1;

BB0_65:
	mov.u32 	%r246, 126;
	sub.s32 	%r247, %r246, %r416;
	shl.b32 	%r248, %r247, 23;
	add.s32 	%r249, %r415, 1;
	shr.u32 	%r250, %r249, 7;
	add.s32 	%r251, %r250, 1;
	shr.u32 	%r252, %r251, 1;
	add.s32 	%r253, %r252, %r248;
	or.b32  	%r254, %r253, %r413;
	mov.b32 	 %f1009, %r254;

BB0_66:
	mul.rn.f32 	%f127, %f1009, %f1009;
	and.b32  	%r89, %r417, 1;
	setp.eq.s32	%p64, %r89, 0;
	@%p64 bra 	BB0_68;
	bra.uni 	BB0_67;

BB0_68:
	mov.f32 	%f494, 0f3C08839E;
	mov.f32 	%f495, 0fB94CA1F9;
	fma.rn.f32 	%f1010, %f495, %f127, %f494;
	bra.uni 	BB0_69;

BB0_67:
	mov.f32 	%f492, 0fBAB6061A;
	mov.f32 	%f493, 0f37CCF5CE;
	fma.rn.f32 	%f1010, %f493, %f127, %f492;

BB0_69:
	@%p64 bra 	BB0_71;
	bra.uni 	BB0_70;

BB0_71:
	mov.f32 	%f499, 0fBE2AAAA3;
	fma.rn.f32 	%f500, %f1010, %f127, %f499;
	fma.rn.f32 	%f1011, %f500, %f127, %f457;
	bra.uni 	BB0_72;

BB0_70:
	mov.f32 	%f496, 0f3D2AAAA5;
	fma.rn.f32 	%f497, %f1010, %f127, %f496;
	mov.f32 	%f498, 0fBF000000;
	fma.rn.f32 	%f1011, %f497, %f127, %f498;

BB0_72:
	fma.rn.f32 	%f1012, %f1011, %f1009, %f1009;
	@%p64 bra 	BB0_74;

	fma.rn.f32 	%f1012, %f1011, %f127, %f410;

BB0_74:
	and.b32  	%r255, %r417, 2;
	setp.eq.s32	%p67, %r255, 0;
	@%p67 bra 	BB0_76;

	mov.f32 	%f504, 0fBF800000;
	fma.rn.f32 	%f1012, %f1012, %f504, %f457;

BB0_76:
	mul.f32 	%f513, %f102, %f1006;
	mul.f32 	%f514, %f102, %f1012;
	mul.f32 	%f515, %f77, %f514;
	mul.f32 	%f516, %f78, %f514;
	mul.f32 	%f517, %f79, %f514;
	fma.rn.f32 	%f518, %f86, %f513, %f515;
	fma.rn.f32 	%f519, %f85, %f513, %f516;
	fma.rn.f32 	%f520, %f84, %f513, %f517;
	fma.rn.f32 	%f508, %f960, %f101, %f518;
	fma.rn.f32 	%f509, %f961, %f101, %f519;
	fma.rn.f32 	%f510, %f962, %f101, %f520;
	mov.u32 	%r257, 0;
	st.local.u32 	[%rd3], %r257;
	ld.global.u32 	%r256, [root];
	mov.f32 	%f512, 0f6C4ECB8F;
	// inline asm
	call _rt_trace_64, (%r256, %f12, %f13, %f14, %f508, %f509, %f510, %r257, %f94, %f512, %rd59, %r107);
	// inline asm
	ld.local.f32 	%f521, [%rd3];
	setp.lt.f32	%p68, %f521, 0f00000000;
	selp.f32	%f522, 0f00000000, %f521, %p68;
	selp.f32	%f523, 0f00000000, 0f3F800000, %p68;
	add.f32 	%f1014, %f1014, %f523;
	fma.rn.f32 	%f1017, %f508, %f522, %f1017;
	fma.rn.f32 	%f1016, %f509, %f522, %f1016;
	fma.rn.f32 	%f1015, %f510, %f522, %f1015;
	add.f32 	%f1018, %f1018, %f522;
	mul.f32 	%f524, %f961, %f509;
	fma.rn.f32 	%f525, %f960, %f508, %f524;
	fma.rn.f32 	%f526, %f962, %f510, %f525;
	cvt.sat.f32.f32	%f527, %f526;
	fma.rn.f32 	%f1019, %f522, %f527, %f1019;
	ld.global.u32 	%r393, [samples];
	add.s32 	%r396, %r396, 1;
	setp.lt.s32	%p69, %r396, %r393;
	@%p69 bra 	BB0_30;

BB0_77:
	add.s32 	%r394, %r394, 1;
	setp.lt.s32	%p70, %r394, %r393;
	@%p70 bra 	BB0_28;
	bra.uni 	BB0_78;

BB0_150:
	mov.u64 	%rd220, image_HDR;
	cvta.global.u64 	%rd215, %rd220;
	mov.u32 	%r356, 8;
	mov.u64 	%rd219, 0;
	// inline asm
	call (%rd214), _rt_buffer_get_64, (%rd215, %r106, %r356, %rd19, %rd20, %rd219, %rd219);
	// inline asm
	mov.f32 	%f922, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs98, %f922;}

	// inline asm
	mov.u16 	%rs99, 0;
	st.v4.u16 	[%rd214], {%rs98, %rs98, %rs98, %rs99};

BB0_151:
	ld.global.u32 	%r357, [additive];
	setp.eq.s32	%p147, %r357, 0;
	@%p147 bra 	BB0_153;

	mov.u64 	%rd233, image_RNM0;
	cvta.global.u64 	%rd222, %rd233;
	mov.u32 	%r361, 8;
	mov.u64 	%rd232, 0;
	// inline asm
	call (%rd221), _rt_buffer_get_64, (%rd222, %r106, %r361, %rd19, %rd20, %rd232, %rd232);
	// inline asm
	ld.v4.u16 	{%rs106, %rs107, %rs108, %rs109}, [%rd221];
	// inline asm
	{  cvt.f32.f16 %f923, %rs106;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f924, %rs107;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f925, %rs108;}

	// inline asm
	// inline asm
	call (%rd227), _rt_buffer_get_64, (%rd222, %r106, %r361, %rd19, %rd20, %rd232, %rd232);
	// inline asm
	add.f32 	%f926, %f923, 0f00000000;
	add.f32 	%f927, %f924, 0f00000000;
	add.f32 	%f928, %f925, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs105, %f928;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs104, %f927;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs103, %f926;}

	// inline asm
	mov.u16 	%rs110, 0;
	st.v4.u16 	[%rd227], {%rs103, %rs104, %rs105, %rs110};
	bra.uni 	BB0_154;

BB0_153:
	mov.u64 	%rd240, image_RNM0;
	cvta.global.u64 	%rd235, %rd240;
	mov.u32 	%r363, 8;
	mov.u64 	%rd239, 0;
	// inline asm
	call (%rd234), _rt_buffer_get_64, (%rd235, %r106, %r363, %rd19, %rd20, %rd239, %rd239);
	// inline asm
	mov.f32 	%f929, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs111, %f929;}

	// inline asm
	mov.u16 	%rs112, 0;
	st.v4.u16 	[%rd234], {%rs111, %rs111, %rs111, %rs112};

BB0_154:
	ld.global.u32 	%r364, [additive];
	setp.eq.s32	%p148, %r364, 0;
	@%p148 bra 	BB0_156;

	mov.u64 	%rd253, image_RNM1;
	cvta.global.u64 	%rd242, %rd253;
	mov.u32 	%r368, 8;
	mov.u64 	%rd252, 0;
	// inline asm
	call (%rd241), _rt_buffer_get_64, (%rd242, %r106, %r368, %rd19, %rd20, %rd252, %rd252);
	// inline asm
	ld.v4.u16 	{%rs119, %rs120, %rs121, %rs122}, [%rd241];
	// inline asm
	{  cvt.f32.f16 %f930, %rs119;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f931, %rs120;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f932, %rs121;}

	// inline asm
	// inline asm
	call (%rd247), _rt_buffer_get_64, (%rd242, %r106, %r368, %rd19, %rd20, %rd252, %rd252);
	// inline asm
	add.f32 	%f933, %f930, 0f00000000;
	add.f32 	%f934, %f931, 0f00000000;
	add.f32 	%f935, %f932, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs118, %f935;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs117, %f934;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs116, %f933;}

	// inline asm
	mov.u16 	%rs123, 0;
	st.v4.u16 	[%rd247], {%rs116, %rs117, %rs118, %rs123};
	bra.uni 	BB0_157;

BB0_156:
	mov.u64 	%rd260, image_RNM1;
	cvta.global.u64 	%rd255, %rd260;
	mov.u32 	%r370, 8;
	mov.u64 	%rd259, 0;
	// inline asm
	call (%rd254), _rt_buffer_get_64, (%rd255, %r106, %r370, %rd19, %rd20, %rd259, %rd259);
	// inline asm
	mov.f32 	%f936, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs124, %f936;}

	// inline asm
	mov.u16 	%rs125, 0;
	st.v4.u16 	[%rd254], {%rs124, %rs124, %rs124, %rs125};

BB0_157:
	ld.global.u32 	%r371, [additive];
	setp.eq.s32	%p149, %r371, 0;
	@%p149 bra 	BB0_159;

	mov.u64 	%rd273, image_RNM2;
	cvta.global.u64 	%rd262, %rd273;
	mov.u32 	%r375, 8;
	mov.u64 	%rd272, 0;
	// inline asm
	call (%rd261), _rt_buffer_get_64, (%rd262, %r106, %r375, %rd19, %rd20, %rd272, %rd272);
	// inline asm
	ld.v4.u16 	{%rs132, %rs133, %rs134, %rs135}, [%rd261];
	// inline asm
	{  cvt.f32.f16 %f937, %rs132;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f938, %rs133;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f939, %rs134;}

	// inline asm
	// inline asm
	call (%rd267), _rt_buffer_get_64, (%rd262, %r106, %r375, %rd19, %rd20, %rd272, %rd272);
	// inline asm
	add.f32 	%f940, %f937, 0f00000000;
	add.f32 	%f941, %f938, 0f00000000;
	add.f32 	%f942, %f939, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs131, %f942;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs130, %f941;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs129, %f940;}

	// inline asm
	mov.u16 	%rs136, 0;
	st.v4.u16 	[%rd267], {%rs129, %rs130, %rs131, %rs136};
	bra.uni 	BB0_160;

BB0_159:
	mov.u64 	%rd280, image_RNM2;
	cvta.global.u64 	%rd275, %rd280;
	mov.u32 	%r377, 8;
	mov.u64 	%rd279, 0;
	// inline asm
	call (%rd274), _rt_buffer_get_64, (%rd275, %r106, %r377, %rd19, %rd20, %rd279, %rd279);
	// inline asm
	mov.f32 	%f943, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs137, %f943;}

	// inline asm
	mov.u16 	%rs138, 0;
	st.v4.u16 	[%rd274], {%rs137, %rs137, %rs137, %rs138};

BB0_160:
	ld.global.u32 	%r378, [additive];
	setp.eq.s32	%p150, %r378, 0;
	@%p150 bra 	BB0_162;

	mov.u64 	%rd293, image_RNM3;
	cvta.global.u64 	%rd282, %rd293;
	mov.u32 	%r382, 8;
	mov.u64 	%rd292, 0;
	// inline asm
	call (%rd281), _rt_buffer_get_64, (%rd282, %r106, %r382, %rd19, %rd20, %rd292, %rd292);
	// inline asm
	ld.v4.u16 	{%rs145, %rs146, %rs147, %rs148}, [%rd281];
	// inline asm
	{  cvt.f32.f16 %f944, %rs145;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f945, %rs146;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f946, %rs147;}

	// inline asm
	// inline asm
	call (%rd287), _rt_buffer_get_64, (%rd282, %r106, %r382, %rd19, %rd20, %rd292, %rd292);
	// inline asm
	add.f32 	%f947, %f944, 0f00000000;
	add.f32 	%f948, %f945, 0f00000000;
	add.f32 	%f949, %f946, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs144, %f949;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs143, %f948;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs142, %f947;}

	// inline asm
	mov.u16 	%rs149, 0;
	st.v4.u16 	[%rd287], {%rs142, %rs143, %rs144, %rs149};
	bra.uni 	BB0_163;

BB0_162:
	mov.u64 	%rd300, image_RNM3;
	cvta.global.u64 	%rd295, %rd300;
	mov.u32 	%r384, 8;
	mov.u64 	%rd299, 0;
	// inline asm
	call (%rd294), _rt_buffer_get_64, (%rd295, %r106, %r384, %rd19, %rd20, %rd299, %rd299);
	// inline asm
	mov.f32 	%f950, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs150, %f950;}

	// inline asm
	mov.u16 	%rs151, 0;
	st.v4.u16 	[%rd294], {%rs150, %rs150, %rs150, %rs151};
	bra.uni 	BB0_163;

BB0_26:
	mov.f32 	%f1015, %f1014;
	mov.f32 	%f1016, %f1014;
	mov.f32 	%f1017, %f1014;
	mov.f32 	%f1018, %f1014;
	mov.f32 	%f1019, %f1014;

BB0_78:
	mul.lo.s32 	%r259, %r393, %r393;
	cvt.rn.f32.s32	%f528, %r259;
	div.rn.f32 	%f529, %f1019, %f528;
	div.rn.f32 	%f1031, %f1014, %f528;
	div.rn.f32 	%f1027, %f1018, %f528;
	div.rn.f32 	%f1028, %f1017, %f528;
	div.rn.f32 	%f1029, %f1016, %f528;
	div.rn.f32 	%f1030, %f1015, %f528;
	add.f32 	%f1026, %f529, %f529;

BB0_79:
	ld.global.u32 	%r422, [imageEnabled];
	and.b32  	%r260, %r422, 8;
	setp.eq.s32	%p71, %r260, 0;
	@%p71 bra 	BB0_92;

	cvt.u64.u32	%rd75, %r2;
	cvt.u64.u32	%rd76, %r3;
	mov.u64 	%rd79, image_Mask;
	cvta.global.u64 	%rd74, %rd79;
	// inline asm
	call (%rd73), _rt_buffer_get_64, (%rd74, %r106, %r106, %rd75, %rd76, %rd26, %rd26);
	// inline asm
	mov.f32 	%f532, 0f3E68BA2E;
	cvt.rzi.f32.f32	%f533, %f532;
	fma.rn.f32 	%f534, %f533, 0fC0000000, 0f3EE8BA2E;
	abs.f32 	%f169, %f534;
	abs.f32 	%f170, %f1031;
	setp.lt.f32	%p72, %f170, 0f00800000;
	mul.f32 	%f535, %f170, 0f4B800000;
	selp.f32	%f536, 0fC3170000, 0fC2FE0000, %p72;
	selp.f32	%f537, %f535, %f170, %p72;
	mov.b32 	 %r263, %f537;
	and.b32  	%r264, %r263, 8388607;
	or.b32  	%r265, %r264, 1065353216;
	mov.b32 	 %f538, %r265;
	shr.u32 	%r266, %r263, 23;
	cvt.rn.f32.u32	%f539, %r266;
	add.f32 	%f540, %f536, %f539;
	setp.gt.f32	%p73, %f538, 0f3FB504F3;
	mul.f32 	%f541, %f538, 0f3F000000;
	add.f32 	%f542, %f540, 0f3F800000;
	selp.f32	%f543, %f541, %f538, %p73;
	selp.f32	%f544, %f542, %f540, %p73;
	add.f32 	%f545, %f543, 0fBF800000;
	add.f32 	%f531, %f543, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// inline asm
	add.f32 	%f546, %f545, %f545;
	mul.f32 	%f547, %f530, %f546;
	mul.f32 	%f548, %f547, %f547;
	mov.f32 	%f549, 0f3C4CAF63;
	mov.f32 	%f550, 0f3B18F0FE;
	fma.rn.f32 	%f551, %f550, %f548, %f549;
	mov.f32 	%f552, 0f3DAAAABD;
	fma.rn.f32 	%f553, %f551, %f548, %f552;
	mul.rn.f32 	%f554, %f553, %f548;
	mul.rn.f32 	%f555, %f554, %f547;
	sub.f32 	%f556, %f545, %f547;
	neg.f32 	%f557, %f547;
	add.f32 	%f558, %f556, %f556;
	fma.rn.f32 	%f559, %f557, %f545, %f558;
	mul.rn.f32 	%f560, %f530, %f559;
	add.f32 	%f561, %f555, %f547;
	sub.f32 	%f562, %f547, %f561;
	add.f32 	%f563, %f555, %f562;
	add.f32 	%f564, %f560, %f563;
	add.f32 	%f565, %f561, %f564;
	sub.f32 	%f566, %f561, %f565;
	add.f32 	%f567, %f564, %f566;
	mov.f32 	%f568, 0f3F317200;
	mul.rn.f32 	%f569, %f544, %f568;
	mov.f32 	%f570, 0f35BFBE8E;
	mul.rn.f32 	%f571, %f544, %f570;
	add.f32 	%f572, %f569, %f565;
	sub.f32 	%f573, %f569, %f572;
	add.f32 	%f574, %f565, %f573;
	add.f32 	%f575, %f567, %f574;
	add.f32 	%f576, %f571, %f575;
	add.f32 	%f577, %f572, %f576;
	sub.f32 	%f578, %f572, %f577;
	add.f32 	%f579, %f576, %f578;
	mov.f32 	%f580, 0f3EE8BA2E;
	mul.rn.f32 	%f581, %f580, %f577;
	neg.f32 	%f582, %f581;
	fma.rn.f32 	%f583, %f580, %f577, %f582;
	fma.rn.f32 	%f584, %f580, %f579, %f583;
	mov.f32 	%f585, 0f00000000;
	fma.rn.f32 	%f586, %f585, %f577, %f584;
	add.rn.f32 	%f587, %f581, %f586;
	neg.f32 	%f588, %f587;
	add.rn.f32 	%f589, %f581, %f588;
	add.rn.f32 	%f590, %f589, %f586;
	mov.b32 	 %r267, %f587;
	setp.eq.s32	%p74, %r267, 1118925336;
	add.s32 	%r268, %r267, -1;
	mov.b32 	 %f591, %r268;
	add.f32 	%f592, %f590, 0f37000000;
	selp.f32	%f593, %f591, %f587, %p74;
	selp.f32	%f171, %f592, %f590, %p74;
	mul.f32 	%f594, %f593, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f595, %f594;
	mov.f32 	%f596, 0fBF317200;
	fma.rn.f32 	%f597, %f595, %f596, %f593;
	mov.f32 	%f598, 0fB5BFBE8E;
	fma.rn.f32 	%f599, %f595, %f598, %f597;
	mul.f32 	%f600, %f599, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f601, %f600;
	add.f32 	%f602, %f595, 0f00000000;
	ex2.approx.f32 	%f603, %f602;
	mul.f32 	%f604, %f601, %f603;
	setp.lt.f32	%p75, %f593, 0fC2D20000;
	selp.f32	%f605, 0f00000000, %f604, %p75;
	setp.gt.f32	%p76, %f593, 0f42D20000;
	selp.f32	%f1032, 0f7F800000, %f605, %p76;
	setp.eq.f32	%p77, %f1032, 0f7F800000;
	@%p77 bra 	BB0_82;

	fma.rn.f32 	%f1032, %f1032, %f171, %f1032;

BB0_82:
	setp.lt.f32	%p78, %f1031, 0f00000000;
	setp.eq.f32	%p79, %f169, 0f3F800000;
	and.pred  	%p3, %p78, %p79;
	mov.b32 	 %r269, %f1032;
	xor.b32  	%r270, %r269, -2147483648;
	mov.b32 	 %f606, %r270;
	selp.f32	%f1034, %f606, %f1032, %p3;
	setp.eq.f32	%p80, %f1031, 0f00000000;
	@%p80 bra 	BB0_85;
	bra.uni 	BB0_83;

BB0_85:
	add.f32 	%f609, %f1031, %f1031;
	selp.f32	%f1034, %f609, 0f00000000, %p79;
	bra.uni 	BB0_86;

BB0_83:
	setp.geu.f32	%p81, %f1031, 0f00000000;
	@%p81 bra 	BB0_86;

	cvt.rzi.f32.f32	%f608, %f580;
	setp.neu.f32	%p82, %f608, 0f3EE8BA2E;
	selp.f32	%f1034, 0f7FFFFFFF, %f1034, %p82;

BB0_86:
	add.f32 	%f610, %f170, 0f3EE8BA2E;
	mov.b32 	 %r271, %f610;
	setp.lt.s32	%p84, %r271, 2139095040;
	@%p84 bra 	BB0_91;

	setp.gtu.f32	%p85, %f170, 0f7F800000;
	@%p85 bra 	BB0_90;
	bra.uni 	BB0_88;

BB0_90:
	add.f32 	%f1034, %f1031, 0f3EE8BA2E;
	bra.uni 	BB0_91;

BB0_88:
	setp.neu.f32	%p86, %f170, 0f7F800000;
	@%p86 bra 	BB0_91;

	selp.f32	%f1034, 0fFF800000, 0f7F800000, %p3;

BB0_91:
	mul.f32 	%f611, %f1034, 0f437F0000;
	setp.eq.f32	%p87, %f1031, 0f3F800000;
	selp.f32	%f612, 0f437F0000, %f611, %p87;
	cvt.rzi.u32.f32	%r272, %f612;
	cvt.u16.u32	%rs14, %r272;
	mov.u16 	%rs15, 255;
	st.v2.u8 	[%rd73], {%rs14, %rs15};
	ld.global.u32 	%r422, [imageEnabled];

BB0_92:
	ld.global.f32 	%f613, [lightColor];
	mul.f32 	%f182, %f1026, %f613;
	ld.global.f32 	%f614, [lightColor+4];
	mul.f32 	%f183, %f1026, %f614;
	ld.global.f32 	%f615, [lightColor+8];
	mul.f32 	%f184, %f1026, %f615;
	and.b32  	%r273, %r422, 1;
	setp.eq.b32	%p88, %r273, 1;
	@!%p88 bra 	BB0_127;
	bra.uni 	BB0_93;

BB0_93:
	mov.f32 	%f618, 0f3E666666;
	cvt.rzi.f32.f32	%f619, %f618;
	fma.rn.f32 	%f620, %f619, 0fC0000000, 0f3EE66666;
	abs.f32 	%f185, %f620;
	abs.f32 	%f186, %f182;
	setp.lt.f32	%p89, %f186, 0f00800000;
	mul.f32 	%f621, %f186, 0f4B800000;
	selp.f32	%f622, 0fC3170000, 0fC2FE0000, %p89;
	selp.f32	%f623, %f621, %f186, %p89;
	mov.b32 	 %r274, %f623;
	and.b32  	%r275, %r274, 8388607;
	or.b32  	%r276, %r275, 1065353216;
	mov.b32 	 %f624, %r276;
	shr.u32 	%r277, %r274, 23;
	cvt.rn.f32.u32	%f625, %r277;
	add.f32 	%f626, %f622, %f625;
	setp.gt.f32	%p90, %f624, 0f3FB504F3;
	mul.f32 	%f627, %f624, 0f3F000000;
	add.f32 	%f628, %f626, 0f3F800000;
	selp.f32	%f629, %f627, %f624, %p90;
	selp.f32	%f630, %f628, %f626, %p90;
	add.f32 	%f631, %f629, 0fBF800000;
	add.f32 	%f617, %f629, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f616,%f617;
	// inline asm
	add.f32 	%f632, %f631, %f631;
	mul.f32 	%f633, %f616, %f632;
	mul.f32 	%f634, %f633, %f633;
	mov.f32 	%f635, 0f3C4CAF63;
	mov.f32 	%f636, 0f3B18F0FE;
	fma.rn.f32 	%f637, %f636, %f634, %f635;
	mov.f32 	%f638, 0f3DAAAABD;
	fma.rn.f32 	%f639, %f637, %f634, %f638;
	mul.rn.f32 	%f640, %f639, %f634;
	mul.rn.f32 	%f641, %f640, %f633;
	sub.f32 	%f642, %f631, %f633;
	neg.f32 	%f643, %f633;
	add.f32 	%f644, %f642, %f642;
	fma.rn.f32 	%f645, %f643, %f631, %f644;
	mul.rn.f32 	%f646, %f616, %f645;
	add.f32 	%f647, %f641, %f633;
	sub.f32 	%f648, %f633, %f647;
	add.f32 	%f649, %f641, %f648;
	add.f32 	%f650, %f646, %f649;
	add.f32 	%f651, %f647, %f650;
	sub.f32 	%f652, %f647, %f651;
	add.f32 	%f653, %f650, %f652;
	mov.f32 	%f654, 0f3F317200;
	mul.rn.f32 	%f655, %f630, %f654;
	mov.f32 	%f656, 0f35BFBE8E;
	mul.rn.f32 	%f657, %f630, %f656;
	add.f32 	%f658, %f655, %f651;
	sub.f32 	%f659, %f655, %f658;
	add.f32 	%f660, %f651, %f659;
	add.f32 	%f661, %f653, %f660;
	add.f32 	%f662, %f657, %f661;
	add.f32 	%f663, %f658, %f662;
	sub.f32 	%f664, %f658, %f663;
	add.f32 	%f665, %f662, %f664;
	mov.f32 	%f666, 0f3EE66666;
	mul.rn.f32 	%f667, %f666, %f663;
	neg.f32 	%f668, %f667;
	fma.rn.f32 	%f669, %f666, %f663, %f668;
	fma.rn.f32 	%f670, %f666, %f665, %f669;
	mov.f32 	%f671, 0f00000000;
	fma.rn.f32 	%f672, %f671, %f663, %f670;
	add.rn.f32 	%f673, %f667, %f672;
	neg.f32 	%f674, %f673;
	add.rn.f32 	%f675, %f667, %f674;
	add.rn.f32 	%f676, %f675, %f672;
	mov.b32 	 %r278, %f673;
	setp.eq.s32	%p91, %r278, 1118925336;
	add.s32 	%r279, %r278, -1;
	mov.b32 	 %f677, %r279;
	add.f32 	%f678, %f676, 0f37000000;
	selp.f32	%f679, %f677, %f673, %p91;
	selp.f32	%f187, %f678, %f676, %p91;
	mul.f32 	%f680, %f679, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f681, %f680;
	mov.f32 	%f682, 0fBF317200;
	fma.rn.f32 	%f683, %f681, %f682, %f679;
	mov.f32 	%f684, 0fB5BFBE8E;
	fma.rn.f32 	%f685, %f681, %f684, %f683;
	mul.f32 	%f686, %f685, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f687, %f686;
	add.f32 	%f688, %f681, 0f00000000;
	ex2.approx.f32 	%f689, %f688;
	mul.f32 	%f690, %f687, %f689;
	setp.lt.f32	%p92, %f679, 0fC2D20000;
	selp.f32	%f691, 0f00000000, %f690, %p92;
	setp.gt.f32	%p93, %f679, 0f42D20000;
	selp.f32	%f1035, 0f7F800000, %f691, %p93;
	setp.eq.f32	%p94, %f1035, 0f7F800000;
	@%p94 bra 	BB0_95;

	fma.rn.f32 	%f1035, %f1035, %f187, %f1035;

BB0_95:
	setp.lt.f32	%p95, %f182, 0f00000000;
	setp.eq.f32	%p96, %f185, 0f3F800000;
	and.pred  	%p4, %p95, %p96;
	mov.b32 	 %r280, %f1035;
	xor.b32  	%r281, %r280, -2147483648;
	mov.b32 	 %f692, %r281;
	selp.f32	%f1037, %f692, %f1035, %p4;
	setp.eq.f32	%p97, %f182, 0f00000000;
	@%p97 bra 	BB0_98;
	bra.uni 	BB0_96;

BB0_98:
	add.f32 	%f695, %f182, %f182;
	selp.f32	%f1037, %f695, 0f00000000, %p96;
	bra.uni 	BB0_99;

BB0_96:
	setp.geu.f32	%p98, %f182, 0f00000000;
	@%p98 bra 	BB0_99;

	cvt.rzi.f32.f32	%f694, %f666;
	setp.neu.f32	%p99, %f694, 0f3EE66666;
	selp.f32	%f1037, 0f7FFFFFFF, %f1037, %p99;

BB0_99:
	add.f32 	%f696, %f186, 0f3EE66666;
	mov.b32 	 %r282, %f696;
	setp.lt.s32	%p101, %r282, 2139095040;
	@%p101 bra 	BB0_104;

	setp.gtu.f32	%p102, %f186, 0f7F800000;
	@%p102 bra 	BB0_103;
	bra.uni 	BB0_101;

BB0_103:
	add.f32 	%f1037, %f182, 0f3EE66666;
	bra.uni 	BB0_104;

BB0_101:
	setp.neu.f32	%p103, %f186, 0f7F800000;
	@%p103 bra 	BB0_104;

	selp.f32	%f1037, 0fFF800000, 0f7F800000, %p4;

BB0_104:
	setp.eq.f32	%p104, %f182, 0f3F800000;
	selp.f32	%f198, 0f3F800000, %f1037, %p104;
	abs.f32 	%f199, %f183;
	setp.lt.f32	%p105, %f199, 0f00800000;
	mul.f32 	%f699, %f199, 0f4B800000;
	selp.f32	%f700, 0fC3170000, 0fC2FE0000, %p105;
	selp.f32	%f701, %f699, %f199, %p105;
	mov.b32 	 %r283, %f701;
	and.b32  	%r284, %r283, 8388607;
	or.b32  	%r285, %r284, 1065353216;
	mov.b32 	 %f702, %r285;
	shr.u32 	%r286, %r283, 23;
	cvt.rn.f32.u32	%f703, %r286;
	add.f32 	%f704, %f700, %f703;
	setp.gt.f32	%p106, %f702, 0f3FB504F3;
	mul.f32 	%f705, %f702, 0f3F000000;
	add.f32 	%f706, %f704, 0f3F800000;
	selp.f32	%f707, %f705, %f702, %p106;
	selp.f32	%f708, %f706, %f704, %p106;
	add.f32 	%f709, %f707, 0fBF800000;
	add.f32 	%f698, %f707, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f697,%f698;
	// inline asm
	add.f32 	%f710, %f709, %f709;
	mul.f32 	%f711, %f697, %f710;
	mul.f32 	%f712, %f711, %f711;
	fma.rn.f32 	%f715, %f636, %f712, %f635;
	fma.rn.f32 	%f717, %f715, %f712, %f638;
	mul.rn.f32 	%f718, %f717, %f712;
	mul.rn.f32 	%f719, %f718, %f711;
	sub.f32 	%f720, %f709, %f711;
	neg.f32 	%f721, %f711;
	add.f32 	%f722, %f720, %f720;
	fma.rn.f32 	%f723, %f721, %f709, %f722;
	mul.rn.f32 	%f724, %f697, %f723;
	add.f32 	%f725, %f719, %f711;
	sub.f32 	%f726, %f711, %f725;
	add.f32 	%f727, %f719, %f726;
	add.f32 	%f728, %f724, %f727;
	add.f32 	%f729, %f725, %f728;
	sub.f32 	%f730, %f725, %f729;
	add.f32 	%f731, %f728, %f730;
	mul.rn.f32 	%f733, %f708, %f654;
	mul.rn.f32 	%f735, %f708, %f656;
	add.f32 	%f736, %f733, %f729;
	sub.f32 	%f737, %f733, %f736;
	add.f32 	%f738, %f729, %f737;
	add.f32 	%f739, %f731, %f738;
	add.f32 	%f740, %f735, %f739;
	add.f32 	%f741, %f736, %f740;
	sub.f32 	%f742, %f736, %f741;
	add.f32 	%f743, %f740, %f742;
	mul.rn.f32 	%f745, %f666, %f741;
	neg.f32 	%f746, %f745;
	fma.rn.f32 	%f747, %f666, %f741, %f746;
	fma.rn.f32 	%f748, %f666, %f743, %f747;
	fma.rn.f32 	%f750, %f671, %f741, %f748;
	add.rn.f32 	%f751, %f745, %f750;
	neg.f32 	%f752, %f751;
	add.rn.f32 	%f753, %f745, %f752;
	add.rn.f32 	%f754, %f753, %f750;
	mov.b32 	 %r287, %f751;
	setp.eq.s32	%p107, %r287, 1118925336;
	add.s32 	%r288, %r287, -1;
	mov.b32 	 %f755, %r288;
	add.f32 	%f756, %f754, 0f37000000;
	selp.f32	%f757, %f755, %f751, %p107;
	selp.f32	%f200, %f756, %f754, %p107;
	mul.f32 	%f758, %f757, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f759, %f758;
	fma.rn.f32 	%f761, %f759, %f682, %f757;
	fma.rn.f32 	%f763, %f759, %f684, %f761;
	mul.f32 	%f764, %f763, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f765, %f764;
	add.f32 	%f766, %f759, 0f00000000;
	ex2.approx.f32 	%f767, %f766;
	mul.f32 	%f768, %f765, %f767;
	setp.lt.f32	%p108, %f757, 0fC2D20000;
	selp.f32	%f769, 0f00000000, %f768, %p108;
	setp.gt.f32	%p109, %f757, 0f42D20000;
	selp.f32	%f1038, 0f7F800000, %f769, %p109;
	setp.eq.f32	%p110, %f1038, 0f7F800000;
	@%p110 bra 	BB0_106;

	fma.rn.f32 	%f1038, %f1038, %f200, %f1038;

BB0_106:
	setp.lt.f32	%p111, %f183, 0f00000000;
	and.pred  	%p5, %p111, %p96;
	mov.b32 	 %r289, %f1038;
	xor.b32  	%r290, %r289, -2147483648;
	mov.b32 	 %f770, %r290;
	selp.f32	%f1040, %f770, %f1038, %p5;
	setp.eq.f32	%p113, %f183, 0f00000000;
	@%p113 bra 	BB0_109;
	bra.uni 	BB0_107;

BB0_109:
	add.f32 	%f773, %f183, %f183;
	selp.f32	%f1040, %f773, 0f00000000, %p96;
	bra.uni 	BB0_110;

BB0_107:
	setp.geu.f32	%p114, %f183, 0f00000000;
	@%p114 bra 	BB0_110;

	cvt.rzi.f32.f32	%f772, %f666;
	setp.neu.f32	%p115, %f772, 0f3EE66666;
	selp.f32	%f1040, 0f7FFFFFFF, %f1040, %p115;

BB0_110:
	add.f32 	%f774, %f199, 0f3EE66666;
	mov.b32 	 %r291, %f774;
	setp.lt.s32	%p117, %r291, 2139095040;
	@%p117 bra 	BB0_115;

	setp.gtu.f32	%p118, %f199, 0f7F800000;
	@%p118 bra 	BB0_114;
	bra.uni 	BB0_112;

BB0_114:
	add.f32 	%f1040, %f183, 0f3EE66666;
	bra.uni 	BB0_115;

BB0_112:
	setp.neu.f32	%p119, %f199, 0f7F800000;
	@%p119 bra 	BB0_115;

	selp.f32	%f1040, 0fFF800000, 0f7F800000, %p5;

BB0_115:
	setp.eq.f32	%p120, %f183, 0f3F800000;
	selp.f32	%f211, 0f3F800000, %f1040, %p120;
	abs.f32 	%f212, %f184;
	setp.lt.f32	%p121, %f212, 0f00800000;
	mul.f32 	%f777, %f212, 0f4B800000;
	selp.f32	%f778, 0fC3170000, 0fC2FE0000, %p121;
	selp.f32	%f779, %f777, %f212, %p121;
	mov.b32 	 %r292, %f779;
	and.b32  	%r293, %r292, 8388607;
	or.b32  	%r294, %r293, 1065353216;
	mov.b32 	 %f780, %r294;
	shr.u32 	%r295, %r292, 23;
	cvt.rn.f32.u32	%f781, %r295;
	add.f32 	%f782, %f778, %f781;
	setp.gt.f32	%p122, %f780, 0f3FB504F3;
	mul.f32 	%f783, %f780, 0f3F000000;
	add.f32 	%f784, %f782, 0f3F800000;
	selp.f32	%f785, %f783, %f780, %p122;
	selp.f32	%f786, %f784, %f782, %p122;
	add.f32 	%f787, %f785, 0fBF800000;
	add.f32 	%f776, %f785, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f775,%f776;
	// inline asm
	add.f32 	%f788, %f787, %f787;
	mul.f32 	%f789, %f775, %f788;
	mul.f32 	%f790, %f789, %f789;
	fma.rn.f32 	%f793, %f636, %f790, %f635;
	fma.rn.f32 	%f795, %f793, %f790, %f638;
	mul.rn.f32 	%f796, %f795, %f790;
	mul.rn.f32 	%f797, %f796, %f789;
	sub.f32 	%f798, %f787, %f789;
	neg.f32 	%f799, %f789;
	add.f32 	%f800, %f798, %f798;
	fma.rn.f32 	%f801, %f799, %f787, %f800;
	mul.rn.f32 	%f802, %f775, %f801;
	add.f32 	%f803, %f797, %f789;
	sub.f32 	%f804, %f789, %f803;
	add.f32 	%f805, %f797, %f804;
	add.f32 	%f806, %f802, %f805;
	add.f32 	%f807, %f803, %f806;
	sub.f32 	%f808, %f803, %f807;
	add.f32 	%f809, %f806, %f808;
	mul.rn.f32 	%f811, %f786, %f654;
	mul.rn.f32 	%f813, %f786, %f656;
	add.f32 	%f814, %f811, %f807;
	sub.f32 	%f815, %f811, %f814;
	add.f32 	%f816, %f807, %f815;
	add.f32 	%f817, %f809, %f816;
	add.f32 	%f818, %f813, %f817;
	add.f32 	%f819, %f814, %f818;
	sub.f32 	%f820, %f814, %f819;
	add.f32 	%f821, %f818, %f820;
	mul.rn.f32 	%f823, %f666, %f819;
	neg.f32 	%f824, %f823;
	fma.rn.f32 	%f825, %f666, %f819, %f824;
	fma.rn.f32 	%f826, %f666, %f821, %f825;
	fma.rn.f32 	%f828, %f671, %f819, %f826;
	add.rn.f32 	%f829, %f823, %f828;
	neg.f32 	%f830, %f829;
	add.rn.f32 	%f831, %f823, %f830;
	add.rn.f32 	%f832, %f831, %f828;
	mov.b32 	 %r296, %f829;
	setp.eq.s32	%p123, %r296, 1118925336;
	add.s32 	%r297, %r296, -1;
	mov.b32 	 %f833, %r297;
	add.f32 	%f834, %f832, 0f37000000;
	selp.f32	%f835, %f833, %f829, %p123;
	selp.f32	%f213, %f834, %f832, %p123;
	mul.f32 	%f836, %f835, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f837, %f836;
	fma.rn.f32 	%f839, %f837, %f682, %f835;
	fma.rn.f32 	%f841, %f837, %f684, %f839;
	mul.f32 	%f842, %f841, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f843, %f842;
	add.f32 	%f844, %f837, 0f00000000;
	ex2.approx.f32 	%f845, %f844;
	mul.f32 	%f846, %f843, %f845;
	setp.lt.f32	%p124, %f835, 0fC2D20000;
	selp.f32	%f847, 0f00000000, %f846, %p124;
	setp.gt.f32	%p125, %f835, 0f42D20000;
	selp.f32	%f1041, 0f7F800000, %f847, %p125;
	setp.eq.f32	%p126, %f1041, 0f7F800000;
	@%p126 bra 	BB0_117;

	fma.rn.f32 	%f1041, %f1041, %f213, %f1041;

BB0_117:
	setp.lt.f32	%p127, %f184, 0f00000000;
	and.pred  	%p6, %p127, %p96;
	mov.b32 	 %r298, %f1041;
	xor.b32  	%r299, %r298, -2147483648;
	mov.b32 	 %f848, %r299;
	selp.f32	%f1043, %f848, %f1041, %p6;
	setp.eq.f32	%p129, %f184, 0f00000000;
	@%p129 bra 	BB0_120;
	bra.uni 	BB0_118;

BB0_120:
	add.f32 	%f851, %f184, %f184;
	selp.f32	%f1043, %f851, 0f00000000, %p96;
	bra.uni 	BB0_121;

BB0_118:
	setp.geu.f32	%p130, %f184, 0f00000000;
	@%p130 bra 	BB0_121;

	cvt.rzi.f32.f32	%f850, %f666;
	setp.neu.f32	%p131, %f850, 0f3EE66666;
	selp.f32	%f1043, 0f7FFFFFFF, %f1043, %p131;

BB0_121:
	add.f32 	%f852, %f212, 0f3EE66666;
	mov.b32 	 %r300, %f852;
	setp.lt.s32	%p133, %r300, 2139095040;
	@%p133 bra 	BB0_126;

	setp.gtu.f32	%p134, %f212, 0f7F800000;
	@%p134 bra 	BB0_125;
	bra.uni 	BB0_123;

BB0_125:
	add.f32 	%f1043, %f184, 0f3EE66666;
	bra.uni 	BB0_126;

BB0_123:
	setp.neu.f32	%p135, %f212, 0f7F800000;
	@%p135 bra 	BB0_126;

	selp.f32	%f1043, 0fFF800000, 0f7F800000, %p6;

BB0_126:
	setp.eq.f32	%p136, %f184, 0f3F800000;
	selp.f32	%f853, 0f3F800000, %f1043, %p136;
	cvt.u64.u32	%rd83, %r3;
	cvt.u64.u32	%rd82, %r2;
	mov.u64 	%rd86, image;
	cvta.global.u64 	%rd81, %rd86;
	// inline asm
	call (%rd80), _rt_buffer_get_64, (%rd81, %r106, %r107, %rd82, %rd83, %rd26, %rd26);
	// inline asm
	cvt.sat.f32.f32	%f854, %f853;
	mul.f32 	%f855, %f854, 0f437FFD71;
	cvt.rzi.u32.f32	%r303, %f855;
	cvt.sat.f32.f32	%f856, %f211;
	mul.f32 	%f857, %f856, 0f437FFD71;
	cvt.rzi.u32.f32	%r304, %f857;
	cvt.sat.f32.f32	%f858, %f198;
	mul.f32 	%f859, %f858, 0f437FFD71;
	cvt.rzi.u32.f32	%r305, %f859;
	cvt.u16.u32	%rs16, %r303;
	cvt.u16.u32	%rs17, %r305;
	cvt.u16.u32	%rs18, %r304;
	mov.u16 	%rs19, 255;
	st.v4.u8 	[%rd80], {%rs16, %rs18, %rs17, %rs19};
	ld.global.u32 	%r422, [imageEnabled];

BB0_127:
	cvt.u64.u32	%rd17, %r2;
	cvt.u64.u32	%rd18, %r3;
	and.b32  	%r306, %r422, 4;
	setp.eq.s32	%p137, %r306, 0;
	@%p137 bra 	BB0_131;

	ld.global.u32 	%r307, [additive];
	setp.eq.s32	%p138, %r307, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs20, %f410;}

	// inline asm
	@%p138 bra 	BB0_130;

	mov.u64 	%rd99, image_HDR;
	cvta.global.u64 	%rd88, %rd99;
	mov.u32 	%r311, 8;
	// inline asm
	call (%rd87), _rt_buffer_get_64, (%rd88, %r106, %r311, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	ld.v4.u16 	{%rs27, %rs28, %rs29, %rs30}, [%rd87];
	// inline asm
	{  cvt.f32.f16 %f861, %rs27;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f862, %rs28;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f863, %rs29;}

	// inline asm
	// inline asm
	call (%rd93), _rt_buffer_get_64, (%rd88, %r106, %r311, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	add.f32 	%f864, %f182, %f861;
	add.f32 	%f865, %f183, %f862;
	add.f32 	%f866, %f184, %f863;
	// inline asm
	{  cvt.rn.f16.f32 %rs26, %f866;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs25, %f865;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs24, %f864;}

	// inline asm
	st.v4.u16 	[%rd93], {%rs24, %rs25, %rs26, %rs20};
	bra.uni 	BB0_131;

BB0_130:
	mov.u64 	%rd106, image_HDR;
	cvta.global.u64 	%rd101, %rd106;
	mov.u32 	%r313, 8;
	// inline asm
	call (%rd100), _rt_buffer_get_64, (%rd101, %r106, %r313, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs33, %f184;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs32, %f183;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs31, %f182;}

	// inline asm
	st.v4.u16 	[%rd100], {%rs31, %rs32, %rs33, %rs20};

BB0_131:
	selp.f32	%f871, 0f3F000000, 0f3E800000, %p151;
	mul.f32 	%f224, %f871, %f1027;
	mul.f32 	%f225, %f871, %f1028;
	mul.f32 	%f226, %f871, %f1029;
	mul.f32 	%f227, %f871, %f1030;
	ld.global.f32 	%f872, [lightColor];
	mul.f32 	%f228, %f224, %f872;
	ld.global.f32 	%f873, [lightColor+4];
	mul.f32 	%f229, %f224, %f873;
	ld.global.f32 	%f874, [lightColor+8];
	mul.f32 	%f230, %f224, %f874;
	ld.global.u32 	%r314, [additive];
	setp.eq.s32	%p139, %r314, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs34, %f410;}

	// inline asm
	@%p139 bra 	BB0_133;

	mov.u64 	%rd119, image_RNM0;
	cvta.global.u64 	%rd108, %rd119;
	mov.u32 	%r318, 8;
	// inline asm
	call (%rd107), _rt_buffer_get_64, (%rd108, %r106, %r318, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	ld.v4.u16 	{%rs41, %rs42, %rs43, %rs44}, [%rd107];
	// inline asm
	{  cvt.f32.f16 %f875, %rs41;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f876, %rs42;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f877, %rs43;}

	// inline asm
	// inline asm
	call (%rd113), _rt_buffer_get_64, (%rd108, %r106, %r318, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	add.f32 	%f878, %f228, %f875;
	add.f32 	%f879, %f229, %f876;
	add.f32 	%f880, %f230, %f877;
	// inline asm
	{  cvt.rn.f16.f32 %rs40, %f880;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs39, %f879;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs38, %f878;}

	// inline asm
	st.v4.u16 	[%rd113], {%rs38, %rs39, %rs40, %rs34};
	bra.uni 	BB0_134;

BB0_133:
	mov.u64 	%rd126, image_RNM0;
	cvta.global.u64 	%rd121, %rd126;
	mov.u32 	%r320, 8;
	// inline asm
	call (%rd120), _rt_buffer_get_64, (%rd121, %r106, %r320, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs47, %f230;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs46, %f229;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs45, %f228;}

	// inline asm
	st.v4.u16 	[%rd120], {%rs45, %rs46, %rs47, %rs34};

BB0_134:
	mov.f32 	%f885, 0f34000000;
	max.f32 	%f886, %f224, %f885;
	div.rn.f32 	%f887, %f225, %f886;
	fma.rn.f32 	%f231, %f887, 0f3F000000, 0f3F000000;
	div.rn.f32 	%f888, %f226, %f886;
	fma.rn.f32 	%f232, %f888, 0f3F000000, 0f3F000000;
	div.rn.f32 	%f889, %f227, %f886;
	fma.rn.f32 	%f233, %f889, 0f3F000000, 0f3F000000;
	ld.global.u32 	%r321, [additive];
	setp.eq.s32	%p140, %r321, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs48, %f410;}

	// inline asm
	@%p140 bra 	BB0_136;

	mov.u64 	%rd139, image_RNM1;
	cvta.global.u64 	%rd128, %rd139;
	mov.u32 	%r325, 8;
	// inline asm
	call (%rd127), _rt_buffer_get_64, (%rd128, %r106, %r325, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	ld.v4.u16 	{%rs55, %rs56, %rs57, %rs58}, [%rd127];
	// inline asm
	{  cvt.f32.f16 %f890, %rs55;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f891, %rs56;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f892, %rs57;}

	// inline asm
	// inline asm
	call (%rd133), _rt_buffer_get_64, (%rd128, %r106, %r325, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	add.f32 	%f893, %f231, %f890;
	add.f32 	%f894, %f231, %f891;
	add.f32 	%f895, %f231, %f892;
	// inline asm
	{  cvt.rn.f16.f32 %rs54, %f895;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs53, %f894;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs52, %f893;}

	// inline asm
	st.v4.u16 	[%rd133], {%rs52, %rs53, %rs54, %rs48};
	bra.uni 	BB0_137;

BB0_136:
	mov.u64 	%rd146, image_RNM1;
	cvta.global.u64 	%rd141, %rd146;
	mov.u32 	%r327, 8;
	// inline asm
	call (%rd140), _rt_buffer_get_64, (%rd141, %r106, %r327, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs59, %f231;}

	// inline asm
	st.v4.u16 	[%rd140], {%rs59, %rs59, %rs59, %rs48};

BB0_137:
	ld.global.u32 	%r328, [additive];
	setp.eq.s32	%p141, %r328, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs60, %f410;}

	// inline asm
	@%p141 bra 	BB0_139;

	mov.u64 	%rd159, image_RNM2;
	cvta.global.u64 	%rd148, %rd159;
	mov.u32 	%r332, 8;
	// inline asm
	call (%rd147), _rt_buffer_get_64, (%rd148, %r106, %r332, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	ld.v4.u16 	{%rs67, %rs68, %rs69, %rs70}, [%rd147];
	// inline asm
	{  cvt.f32.f16 %f898, %rs67;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f899, %rs68;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f900, %rs69;}

	// inline asm
	// inline asm
	call (%rd153), _rt_buffer_get_64, (%rd148, %r106, %r332, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	add.f32 	%f901, %f232, %f898;
	add.f32 	%f902, %f232, %f899;
	add.f32 	%f903, %f232, %f900;
	// inline asm
	{  cvt.rn.f16.f32 %rs66, %f903;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs65, %f902;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs64, %f901;}

	// inline asm
	st.v4.u16 	[%rd153], {%rs64, %rs65, %rs66, %rs60};
	bra.uni 	BB0_140;

BB0_139:
	mov.u64 	%rd166, image_RNM2;
	cvta.global.u64 	%rd161, %rd166;
	mov.u32 	%r334, 8;
	// inline asm
	call (%rd160), _rt_buffer_get_64, (%rd161, %r106, %r334, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs71, %f232;}

	// inline asm
	st.v4.u16 	[%rd160], {%rs71, %rs71, %rs71, %rs60};

BB0_140:
	ld.global.u32 	%r335, [additive];
	setp.eq.s32	%p142, %r335, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs72, %f410;}

	// inline asm
	@%p142 bra 	BB0_142;

	mov.u64 	%rd179, image_RNM3;
	cvta.global.u64 	%rd168, %rd179;
	mov.u32 	%r339, 8;
	// inline asm
	call (%rd167), _rt_buffer_get_64, (%rd168, %r106, %r339, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	ld.v4.u16 	{%rs79, %rs80, %rs81, %rs82}, [%rd167];
	// inline asm
	{  cvt.f32.f16 %f906, %rs79;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f907, %rs80;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f908, %rs81;}

	// inline asm
	// inline asm
	call (%rd173), _rt_buffer_get_64, (%rd168, %r106, %r339, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	add.f32 	%f909, %f233, %f906;
	add.f32 	%f910, %f233, %f907;
	add.f32 	%f911, %f233, %f908;
	// inline asm
	{  cvt.rn.f16.f32 %rs78, %f911;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs77, %f910;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs76, %f909;}

	// inline asm
	st.v4.u16 	[%rd173], {%rs76, %rs77, %rs78, %rs72};
	bra.uni 	BB0_163;

BB0_142:
	mov.u64 	%rd186, image_RNM3;
	cvta.global.u64 	%rd181, %rd186;
	mov.u32 	%r341, 8;
	// inline asm
	call (%rd180), _rt_buffer_get_64, (%rd181, %r106, %r341, %rd17, %rd18, %rd26, %rd26);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs83, %f233;}

	// inline asm
	st.v4.u16 	[%rd180], {%rs83, %rs83, %rs83, %rs72};

BB0_163:
	ret;
}


