//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-23083092
// Cuda compilation tools, release 9.1, V9.1.85
// Based on LLVM 3.4svn
//

.version 6.1
.target sm_30
.address_size 64

	// .globl	_Z6oxMainv
.global .align 8 .b8 pixelID[8];
.global .align 8 .b8 resolution[8];
.global .align 4 .b8 normal[12];
.global .align 4 .b8 camPos[12];
.global .align 4 .b8 root[4];
.global .align 4 .u32 imageEnabled;
.global .texref lightmap;
.global .align 16 .b8 tileInfo[16];
.global .align 4 .u32 additive;
.global .align 1 .b8 image[1];
.global .align 1 .b8 image_HDR[1];
.global .align 1 .b8 image_HDR2[1];
.global .align 1 .b8 image_Mask[1];
.global .align 1 .b8 image_RNM0[1];
.global .align 1 .b8 image_RNM1[1];
.global .align 1 .b8 image_RNM2[1];
.global .align 1 .b8 image_RNM3[1];
.global .align 1 .b8 uvpos[1];
.global .align 1 .b8 uvnormal[1];
.global .align 4 .u32 samples;
.global .align 4 .f32 lightInvCutoff;
.global .align 4 .f32 lightRadius;
.global .align 4 .b8 lightPos[12];
.global .align 4 .b8 lightColor[12];
.global .align 4 .u32 ignoreNormal;
.global .align 4 .u32 lightCubemap;
.global .align 4 .b8 lightMatrix[36];
.global .align 4 .f32 lightFalloffFakeDistanceMult;
.global .align 4 .b8 _ZN21rti_internal_typeinfo7pixelIDE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10resolutionE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6camPosE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4rootE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12imageEnabledE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8tileInfoE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8additiveE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo7samplesE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14lightInvCutoffE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11lightRadiusE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8lightPosE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10lightColorE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12ignoreNormalE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12lightCubemapE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11lightMatrixE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo28lightFalloffFakeDistanceMultE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 8 .b8 _ZN21rti_internal_typename7pixelIDE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10resolutionE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6camPosE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 16 .b8 _ZN21rti_internal_typename4rootE[9] = {114, 116, 79, 98, 106, 101, 99, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12imageEnabledE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8tileInfoE[6] = {117, 105, 110, 116, 52, 0};
.global .align 4 .b8 _ZN21rti_internal_typename8additiveE[4] = {105, 110, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename7samplesE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename14lightInvCutoffE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename11lightRadiusE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8lightPosE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10lightColorE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12ignoreNormalE[4] = {105, 110, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12lightCubemapE[4] = {105, 110, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename11lightMatrixE[10] = {77, 97, 116, 114, 105, 120, 51, 120, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename28lightFalloffFakeDistanceMultE[6] = {102, 108, 111, 97, 116, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum7pixelIDE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10resolutionE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6camPosE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4rootE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12imageEnabledE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8tileInfoE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8additiveE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum7samplesE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14lightInvCutoffE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11lightRadiusE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8lightPosE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10lightColorE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12ignoreNormalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12lightCubemapE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11lightMatrixE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum28lightFalloffFakeDistanceMultE = 4919;
.global .align 16 .b8 _ZN21rti_internal_semantic7pixelIDE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic10resolutionE[12] = {114, 116, 76, 97, 117, 110, 99, 104, 68, 105, 109, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic6normalE[17] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic6camPosE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic4rootE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12imageEnabledE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8tileInfoE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8additiveE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic7samplesE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic14lightInvCutoffE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11lightRadiusE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8lightPosE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic10lightColorE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12ignoreNormalE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12lightCubemapE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11lightMatrixE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic28lightFalloffFakeDistanceMultE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7pixelIDE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10resolutionE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6camPosE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4rootE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12imageEnabledE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8tileInfoE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8additiveE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7samplesE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14lightInvCutoffE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11lightRadiusE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8lightPosE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10lightColorE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12ignoreNormalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12lightCubemapE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11lightMatrixE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation28lightFalloffFakeDistanceMultE[1];

.visible .entry _Z6oxMainv(

)
{
	.local .align 4 .b8 	__local_depot0[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<121>;
	.reg .b16 	%rs<221>;
	.reg .f32 	%f<877>;
	.reg .b32 	%r<240>;
	.reg .b64 	%rd<369>;


	mov.u64 	%rd368, __local_depot0;
	cvta.local.u64 	%SP, %rd368;
	ld.global.v2.u32 	{%r26, %r27}, [pixelID];
	cvt.u64.u32	%rd12, %r26;
	cvt.u64.u32	%rd13, %r27;
	mov.u64 	%rd16, uvnormal;
	cvta.global.u64 	%rd11, %rd16;
	mov.u32 	%r24, 2;
	mov.u32 	%r25, 4;
	mov.u64 	%rd15, 0;
	// inline asm
	call (%rd10), _rt_buffer_get_64, (%rd11, %r24, %r25, %rd12, %rd13, %rd15, %rd15);
	// inline asm
	ld.u32 	%r1, [%rd10];
	shr.u32 	%r30, %r1, 16;
	cvt.u16.u32	%rs1, %r30;
	and.b16  	%rs12, %rs1, 255;
	cvt.u16.u32	%rs13, %r1;
	or.b16  	%rs14, %rs13, %rs12;
	setp.eq.s16	%p6, %rs14, 0;
	mov.f32 	%f856, 0f00000000;
	mov.f32 	%f857, %f856;
	mov.f32 	%f858, %f856;
	@%p6 bra 	BB0_2;

	ld.u8 	%rs15, [%rd10+1];
	and.b16  	%rs17, %rs13, 255;
	cvt.rn.f32.u16	%f106, %rs17;
	div.rn.f32 	%f107, %f106, 0f437F0000;
	fma.rn.f32 	%f108, %f107, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f109, %rs15;
	div.rn.f32 	%f110, %f109, 0f437F0000;
	fma.rn.f32 	%f111, %f110, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f112, %rs12;
	div.rn.f32 	%f113, %f112, 0f437F0000;
	fma.rn.f32 	%f114, %f113, 0f40000000, 0fBF800000;
	mul.f32 	%f115, %f111, %f111;
	fma.rn.f32 	%f116, %f108, %f108, %f115;
	fma.rn.f32 	%f117, %f114, %f114, %f116;
	sqrt.rn.f32 	%f118, %f117;
	rcp.rn.f32 	%f119, %f118;
	mul.f32 	%f856, %f108, %f119;
	mul.f32 	%f857, %f111, %f119;
	mul.f32 	%f858, %f114, %f119;

BB0_2:
	ld.global.v2.u32 	{%r31, %r32}, [pixelID];
	ld.global.v2.u32 	{%r34, %r35}, [tileInfo];
	add.s32 	%r2, %r31, %r34;
	add.s32 	%r3, %r32, %r35;
	setp.eq.f32	%p7, %f857, 0f00000000;
	setp.eq.f32	%p8, %f856, 0f00000000;
	and.pred  	%p9, %p8, %p7;
	setp.eq.f32	%p10, %f858, 0f00000000;
	and.pred  	%p11, %p9, %p10;
	@%p11 bra 	BB0_104;
	bra.uni 	BB0_3;

BB0_104:
	ld.global.u32 	%r239, [imageEnabled];
	and.b32  	%r188, %r239, 1;
	setp.eq.b32	%p113, %r188, 1;
	@!%p113 bra 	BB0_106;
	bra.uni 	BB0_105;

BB0_105:
	cvt.u64.u32	%rd256, %r2;
	cvt.u64.u32	%rd257, %r3;
	mov.u64 	%rd260, image;
	cvta.global.u64 	%rd255, %rd260;
	// inline asm
	call (%rd254), _rt_buffer_get_64, (%rd255, %r24, %r25, %rd256, %rd257, %rd15, %rd15);
	// inline asm
	mov.u16 	%rs153, 0;
	st.v4.u8 	[%rd254], {%rs153, %rs153, %rs153, %rs153};
	ld.global.u32 	%r239, [imageEnabled];

BB0_106:
	and.b32  	%r191, %r239, 8;
	setp.eq.s32	%p114, %r191, 0;
	@%p114 bra 	BB0_108;

	cvt.u64.u32	%rd264, %r3;
	cvt.u64.u32	%rd263, %r2;
	mov.u64 	%rd267, image_Mask;
	cvta.global.u64 	%rd262, %rd267;
	// inline asm
	call (%rd261), _rt_buffer_get_64, (%rd262, %r24, %r24, %rd263, %rd264, %rd15, %rd15);
	// inline asm
	mov.f32 	%f773, 0f00000000;
	cvt.rzi.u32.f32	%r194, %f773;
	cvt.u16.u32	%rs154, %r194;
	mov.u16 	%rs155, 0;
	st.v2.u8 	[%rd261], {%rs154, %rs155};
	ld.global.u32 	%r239, [imageEnabled];

BB0_108:
	cvt.u64.u32	%rd8, %r2;
	cvt.u64.u32	%rd9, %r3;
	and.b32  	%r195, %r239, 4;
	setp.eq.s32	%p115, %r195, 0;
	@%p115 bra 	BB0_112;

	ld.global.u32 	%r196, [additive];
	setp.eq.s32	%p116, %r196, 0;
	@%p116 bra 	BB0_111;

	mov.u64 	%rd280, image_HDR;
	cvta.global.u64 	%rd269, %rd280;
	mov.u32 	%r200, 8;
	// inline asm
	call (%rd268), _rt_buffer_get_64, (%rd269, %r24, %r200, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs162, %rs163, %rs164, %rs165}, [%rd268];
	// inline asm
	{  cvt.f32.f16 %f774, %rs162;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f775, %rs163;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f776, %rs164;}

	// inline asm
	// inline asm
	call (%rd274), _rt_buffer_get_64, (%rd269, %r24, %r200, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f777, %f774, 0f00000000;
	add.f32 	%f778, %f775, 0f00000000;
	add.f32 	%f779, %f776, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs161, %f779;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs160, %f778;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs159, %f777;}

	// inline asm
	mov.u16 	%rs166, 0;
	st.v4.u16 	[%rd274], {%rs159, %rs160, %rs161, %rs166};
	bra.uni 	BB0_112;

BB0_3:
	ld.global.v2.u32 	{%r41, %r42}, [pixelID];
	cvt.u64.u32	%rd19, %r41;
	cvt.u64.u32	%rd20, %r42;
	mov.u64 	%rd23, uvpos;
	cvta.global.u64 	%rd18, %rd23;
	mov.u32 	%r40, 12;
	// inline asm
	call (%rd17), _rt_buffer_get_64, (%rd18, %r24, %r40, %rd19, %rd20, %rd15, %rd15);
	// inline asm
	ld.global.f32 	%f122, [lightPos];
	ld.f32 	%f9, [%rd17+8];
	ld.f32 	%f8, [%rd17+4];
	ld.f32 	%f7, [%rd17];
	sub.f32 	%f123, %f122, %f7;
	ld.global.f32 	%f124, [lightPos+4];
	sub.f32 	%f125, %f124, %f8;
	ld.global.f32 	%f126, [lightPos+8];
	sub.f32 	%f127, %f126, %f9;
	mul.f32 	%f128, %f125, %f125;
	fma.rn.f32 	%f129, %f123, %f123, %f128;
	fma.rn.f32 	%f130, %f127, %f127, %f129;
	sqrt.rn.f32 	%f131, %f130;
	rcp.rn.f32 	%f132, %f131;
	mul.f32 	%f10, %f123, %f132;
	mul.f32 	%f11, %f125, %f132;
	mul.f32 	%f12, %f127, %f132;
	ld.global.f32 	%f133, [lightFalloffFakeDistanceMult];
	mul.f32 	%f13, %f131, %f133;
	ld.global.f32 	%f134, [lightInvCutoff];
	mul.f32 	%f14, %f131, %f134;
	mov.f32 	%f138, 0f40800000;
	abs.f32 	%f16, %f14;
	setp.lt.f32	%p12, %f16, 0f00800000;
	mul.f32 	%f140, %f16, 0f4B800000;
	selp.f32	%f141, 0fC3170000, 0fC2FE0000, %p12;
	selp.f32	%f142, %f140, %f16, %p12;
	mov.b32 	 %r45, %f142;
	and.b32  	%r46, %r45, 8388607;
	or.b32  	%r47, %r46, 1065353216;
	mov.b32 	 %f143, %r47;
	shr.u32 	%r48, %r45, 23;
	cvt.rn.f32.u32	%f144, %r48;
	add.f32 	%f145, %f141, %f144;
	setp.gt.f32	%p13, %f143, 0f3FB504F3;
	mul.f32 	%f146, %f143, 0f3F000000;
	add.f32 	%f147, %f145, 0f3F800000;
	selp.f32	%f148, %f146, %f143, %p13;
	selp.f32	%f149, %f147, %f145, %p13;
	add.f32 	%f150, %f148, 0fBF800000;
	add.f32 	%f121, %f148, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f120,%f121;
	// inline asm
	add.f32 	%f151, %f150, %f150;
	mul.f32 	%f152, %f120, %f151;
	mul.f32 	%f153, %f152, %f152;
	mov.f32 	%f154, 0f3C4CAF63;
	mov.f32 	%f155, 0f3B18F0FE;
	fma.rn.f32 	%f156, %f155, %f153, %f154;
	mov.f32 	%f157, 0f3DAAAABD;
	fma.rn.f32 	%f158, %f156, %f153, %f157;
	mul.rn.f32 	%f159, %f158, %f153;
	mul.rn.f32 	%f160, %f159, %f152;
	sub.f32 	%f161, %f150, %f152;
	neg.f32 	%f162, %f152;
	add.f32 	%f163, %f161, %f161;
	fma.rn.f32 	%f164, %f162, %f150, %f163;
	mul.rn.f32 	%f165, %f120, %f164;
	add.f32 	%f166, %f160, %f152;
	sub.f32 	%f167, %f152, %f166;
	add.f32 	%f168, %f160, %f167;
	add.f32 	%f169, %f165, %f168;
	add.f32 	%f170, %f166, %f169;
	sub.f32 	%f171, %f166, %f170;
	add.f32 	%f172, %f169, %f171;
	mov.f32 	%f173, 0f3F317200;
	mul.rn.f32 	%f174, %f149, %f173;
	mov.f32 	%f175, 0f35BFBE8E;
	mul.rn.f32 	%f176, %f149, %f175;
	add.f32 	%f177, %f174, %f170;
	sub.f32 	%f178, %f174, %f177;
	add.f32 	%f179, %f170, %f178;
	add.f32 	%f180, %f172, %f179;
	add.f32 	%f181, %f176, %f180;
	add.f32 	%f182, %f177, %f181;
	sub.f32 	%f183, %f177, %f182;
	add.f32 	%f184, %f181, %f183;
	mul.rn.f32 	%f185, %f138, %f182;
	neg.f32 	%f186, %f185;
	fma.rn.f32 	%f187, %f138, %f182, %f186;
	fma.rn.f32 	%f188, %f138, %f184, %f187;
	mov.f32 	%f189, 0f00000000;
	fma.rn.f32 	%f190, %f189, %f182, %f188;
	add.rn.f32 	%f191, %f185, %f190;
	neg.f32 	%f192, %f191;
	add.rn.f32 	%f193, %f185, %f192;
	add.rn.f32 	%f194, %f193, %f190;
	mov.b32 	 %r49, %f191;
	setp.eq.s32	%p14, %r49, 1118925336;
	add.s32 	%r50, %r49, -1;
	mov.b32 	 %f195, %r50;
	add.f32 	%f196, %f194, 0f37000000;
	selp.f32	%f197, %f195, %f191, %p14;
	selp.f32	%f17, %f196, %f194, %p14;
	mul.f32 	%f198, %f197, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f199, %f198;
	mov.f32 	%f200, 0fBF317200;
	fma.rn.f32 	%f201, %f199, %f200, %f197;
	mov.f32 	%f202, 0fB5BFBE8E;
	fma.rn.f32 	%f203, %f199, %f202, %f201;
	mul.f32 	%f204, %f203, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f205, %f204;
	add.f32 	%f206, %f199, 0f00000000;
	ex2.approx.f32 	%f207, %f206;
	mul.f32 	%f208, %f205, %f207;
	setp.lt.f32	%p15, %f197, 0fC2D20000;
	selp.f32	%f209, 0f00000000, %f208, %p15;
	setp.gt.f32	%p16, %f197, 0f42D20000;
	selp.f32	%f859, 0f7F800000, %f209, %p16;
	setp.eq.f32	%p17, %f859, 0f7F800000;
	@%p17 bra 	BB0_5;

	fma.rn.f32 	%f859, %f859, %f17, %f859;

BB0_5:
	mov.f32 	%f814, 0f40000000;
	cvt.rzi.f32.f32	%f813, %f814;
	add.f32 	%f812, %f813, %f813;
	mov.f32 	%f811, 0f40800000;
	sub.f32 	%f810, %f811, %f812;
	abs.f32 	%f809, %f810;
	setp.lt.f32	%p18, %f14, 0f00000000;
	setp.eq.f32	%p19, %f809, 0f3F800000;
	and.pred  	%p1, %p18, %p19;
	mov.b32 	 %r51, %f859;
	xor.b32  	%r52, %r51, -2147483648;
	mov.b32 	 %f210, %r52;
	selp.f32	%f861, %f210, %f859, %p1;
	setp.eq.f32	%p20, %f14, 0f00000000;
	@%p20 bra 	BB0_8;
	bra.uni 	BB0_6;

BB0_8:
	add.f32 	%f213, %f14, %f14;
	selp.f32	%f861, %f213, 0f00000000, %p19;
	bra.uni 	BB0_9;

BB0_6:
	setp.geu.f32	%p21, %f14, 0f00000000;
	@%p21 bra 	BB0_9;

	mov.f32 	%f847, 0f40800000;
	cvt.rzi.f32.f32	%f212, %f847;
	setp.neu.f32	%p22, %f212, 0f40800000;
	selp.f32	%f861, 0f7FFFFFFF, %f861, %p22;

BB0_9:
	abs.f32 	%f815, %f14;
	add.f32 	%f214, %f815, 0f40800000;
	mov.b32 	 %r53, %f214;
	setp.lt.s32	%p24, %r53, 2139095040;
	@%p24 bra 	BB0_14;

	abs.f32 	%f845, %f14;
	setp.gtu.f32	%p25, %f845, 0f7F800000;
	@%p25 bra 	BB0_13;
	bra.uni 	BB0_11;

BB0_13:
	add.f32 	%f861, %f14, 0f40800000;
	bra.uni 	BB0_14;

BB0_11:
	abs.f32 	%f846, %f14;
	setp.neu.f32	%p26, %f846, 0f7F800000;
	@%p26 bra 	BB0_14;

	selp.f32	%f861, 0fFF800000, 0f7F800000, %p1;

BB0_14:
	mov.f32 	%f864, 0f3F800000;
	sub.f32 	%f223, %f864, %f861;
	setp.eq.f32	%p27, %f14, 0f3F800000;
	selp.f32	%f224, 0f00000000, %f223, %p27;
	cvt.sat.f32.f32	%f225, %f224;
	fma.rn.f32 	%f226, %f13, %f13, 0f3F800000;
	div.rn.f32 	%f28, %f225, %f226;
	mul.f32 	%f227, %f857, %f11;
	fma.rn.f32 	%f228, %f856, %f10, %f227;
	fma.rn.f32 	%f229, %f858, %f12, %f228;
	ld.global.u32 	%r57, [ignoreNormal];
	setp.eq.s32	%p28, %r57, 0;
	selp.f32	%f29, %f229, 0f3F800000, %p28;
	ld.global.f32 	%f230, [lightMatrix];
	fma.rn.f32 	%f231, %f230, %f10, 0f00000000;
	ld.global.f32 	%f232, [lightMatrix+4];
	fma.rn.f32 	%f233, %f232, %f11, %f231;
	ld.global.f32 	%f234, [lightMatrix+8];
	fma.rn.f32 	%f221, %f234, %f12, %f233;
	ld.global.f32 	%f235, [lightMatrix+12];
	fma.rn.f32 	%f236, %f235, %f10, 0f00000000;
	ld.global.f32 	%f237, [lightMatrix+16];
	fma.rn.f32 	%f238, %f237, %f11, %f236;
	ld.global.f32 	%f239, [lightMatrix+20];
	fma.rn.f32 	%f220, %f239, %f12, %f238;
	ld.global.f32 	%f240, [lightMatrix+24];
	fma.rn.f32 	%f241, %f240, %f10, 0f00000000;
	ld.global.f32 	%f242, [lightMatrix+28];
	fma.rn.f32 	%f243, %f242, %f11, %f241;
	ld.global.f32 	%f244, [lightMatrix+32];
	fma.rn.f32 	%f219, %f244, %f12, %f243;
	ld.global.u32 	%r54, [lightCubemap];
	mov.u32 	%r55, 6;
	mov.u32 	%r232, 0;
	// inline asm
	call (%f215, %f216, %f217, %f218), _rt_texture_get_base_id, (%r54, %r55, %f219, %f220, %f221, %r232);
	// inline asm
	max.f32 	%f245, %f215, %f216;
	max.f32 	%f246, %f245, %f217;
	mul.f32 	%f247, %f28, %f246;
	ld.global.f32 	%f248, [lightColor+4];
	ld.global.f32 	%f249, [lightColor];
	max.f32 	%f250, %f249, %f248;
	ld.global.f32 	%f251, [lightColor+8];
	max.f32 	%f252, %f250, %f251;
	mul.f32 	%f253, %f247, %f252;
	setp.lt.f32	%p29, %f253, 0f3727C5AC;
	@%p29 bra 	BB0_84;
	bra.uni 	BB0_15;

BB0_84:
	ld.global.u32 	%r237, [imageEnabled];
	and.b32  	%r145, %r237, 1;
	setp.eq.b32	%p105, %r145, 1;
	@!%p105 bra 	BB0_86;
	bra.uni 	BB0_85;

BB0_85:
	cvt.u64.u32	%rd142, %r2;
	cvt.u64.u32	%rd143, %r3;
	mov.u64 	%rd146, image;
	cvta.global.u64 	%rd141, %rd146;
	// inline asm
	call (%rd140), _rt_buffer_get_64, (%rd141, %r24, %r25, %rd142, %rd143, %rd15, %rd15);
	// inline asm
	mov.u16 	%rs89, 1;
	mov.u16 	%rs90, 0;
	st.v4.u8 	[%rd140], {%rs90, %rs90, %rs90, %rs89};
	ld.global.u32 	%r237, [imageEnabled];

BB0_86:
	and.b32  	%r148, %r237, 8;
	setp.eq.s32	%p106, %r148, 0;
	@%p106 bra 	BB0_88;

	cvt.u64.u32	%rd150, %r3;
	cvt.u64.u32	%rd149, %r2;
	mov.u64 	%rd153, image_Mask;
	cvta.global.u64 	%rd148, %rd153;
	// inline asm
	call (%rd147), _rt_buffer_get_64, (%rd148, %r24, %r24, %rd149, %rd150, %rd15, %rd15);
	// inline asm
	mov.f32 	%f730, 0f00000000;
	cvt.rzi.u32.f32	%r151, %f730;
	cvt.u16.u32	%rs91, %r151;
	mov.u16 	%rs92, 255;
	st.v2.u8 	[%rd147], {%rs91, %rs92};
	ld.global.u32 	%r237, [imageEnabled];

BB0_88:
	cvt.u64.u32	%rd6, %r2;
	cvt.u64.u32	%rd7, %r3;
	and.b32  	%r152, %r237, 4;
	setp.eq.s32	%p107, %r152, 0;
	@%p107 bra 	BB0_92;

	ld.global.u32 	%r153, [additive];
	setp.eq.s32	%p108, %r153, 0;
	mov.f32 	%f731, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs93, %f731;}

	// inline asm
	@%p108 bra 	BB0_91;

	mov.u64 	%rd166, image_HDR;
	cvta.global.u64 	%rd155, %rd166;
	mov.u32 	%r157, 8;
	// inline asm
	call (%rd154), _rt_buffer_get_64, (%rd155, %r24, %r157, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs100, %rs101, %rs102, %rs103}, [%rd154];
	// inline asm
	{  cvt.f32.f16 %f732, %rs100;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f733, %rs101;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f734, %rs102;}

	// inline asm
	// inline asm
	call (%rd160), _rt_buffer_get_64, (%rd155, %r24, %r157, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f735, %f732, 0f00000000;
	add.f32 	%f736, %f733, 0f00000000;
	add.f32 	%f737, %f734, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs99, %f737;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs98, %f736;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs97, %f735;}

	// inline asm
	st.v4.u16 	[%rd160], {%rs97, %rs98, %rs99, %rs93};
	bra.uni 	BB0_92;

BB0_15:
	mov.f32 	%f863, 0f00000000;
	mul.f32 	%f255, %f7, 0f3456BF95;
	abs.f32 	%f256, %f856;
	div.rn.f32 	%f257, %f255, %f256;
	abs.f32 	%f258, %f857;
	mul.f32 	%f259, %f8, 0f3456BF95;
	div.rn.f32 	%f260, %f259, %f258;
	abs.f32 	%f261, %f858;
	mul.f32 	%f262, %f9, 0f3456BF95;
	div.rn.f32 	%f263, %f262, %f261;
	abs.f32 	%f264, %f257;
	abs.f32 	%f265, %f260;
	abs.f32 	%f266, %f263;
	mov.f32 	%f267, 0f38D1B717;
	max.f32 	%f268, %f264, %f267;
	max.f32 	%f269, %f265, %f267;
	max.f32 	%f270, %f266, %f267;
	fma.rn.f32 	%f33, %f856, %f268, %f7;
	fma.rn.f32 	%f34, %f857, %f269, %f8;
	fma.rn.f32 	%f35, %f858, %f270, %f9;
	ld.global.u32 	%r233, [samples];
	setp.lt.s32	%p30, %r233, 1;
	@%p30 bra 	BB0_18;

	mul.f32 	%f272, %f33, 0f3456BF95;
	abs.f32 	%f273, %f272;
	mul.f32 	%f274, %f34, 0f3456BF95;
	abs.f32 	%f275, %f274;
	mul.f32 	%f276, %f35, 0f3456BF95;
	abs.f32 	%f277, %f276;
	max.f32 	%f278, %f273, %f275;
	max.f32 	%f279, %f278, %f277;
	max.f32 	%f36, %f279, %f267;
	add.u64 	%rd24, %SP, 0;
	cvta.to.local.u64 	%rd2, %rd24;
	mov.f32 	%f863, 0f00000000;

BB0_17:
	cvt.rn.f32.s32	%f289, %r232;
	mul.f32 	%f290, %f289, 0f3DD32618;
	cvt.rmi.f32.f32	%f291, %f290;
	sub.f32 	%f292, %f290, %f291;
	mul.f32 	%f293, %f289, 0f3DD2F1AA;
	cvt.rmi.f32.f32	%f294, %f293;
	sub.f32 	%f295, %f293, %f294;
	mul.f32 	%f296, %f289, 0f3DC74539;
	cvt.rmi.f32.f32	%f297, %f296;
	sub.f32 	%f298, %f296, %f297;
	add.f32 	%f299, %f295, 0f4199851F;
	add.f32 	%f300, %f298, 0f4199851F;
	add.f32 	%f301, %f292, 0f4199851F;
	mul.f32 	%f302, %f295, %f300;
	fma.rn.f32 	%f303, %f292, %f299, %f302;
	fma.rn.f32 	%f304, %f301, %f298, %f303;
	add.f32 	%f305, %f292, %f304;
	add.f32 	%f306, %f295, %f304;
	add.f32 	%f307, %f298, %f304;
	add.f32 	%f308, %f305, %f306;
	mul.f32 	%f309, %f307, %f308;
	cvt.rmi.f32.f32	%f310, %f309;
	sub.f32 	%f311, %f309, %f310;
	add.f32 	%f312, %f305, %f307;
	mul.f32 	%f313, %f306, %f312;
	cvt.rmi.f32.f32	%f314, %f313;
	sub.f32 	%f315, %f313, %f314;
	add.f32 	%f316, %f306, %f307;
	mul.f32 	%f317, %f305, %f316;
	cvt.rmi.f32.f32	%f318, %f317;
	sub.f32 	%f319, %f317, %f318;
	fma.rn.f32 	%f320, %f311, 0f40000000, 0fBF800000;
	fma.rn.f32 	%f321, %f315, 0f40000000, 0fBF800000;
	fma.rn.f32 	%f322, %f319, 0f40000000, 0fBF800000;
	ld.global.f32 	%f323, [lightRadius];
	ld.global.f32 	%f324, [lightPos];
	fma.rn.f32 	%f325, %f323, %f320, %f324;
	ld.global.f32 	%f326, [lightPos+4];
	fma.rn.f32 	%f327, %f323, %f321, %f326;
	ld.global.f32 	%f328, [lightPos+8];
	fma.rn.f32 	%f329, %f323, %f322, %f328;
	sub.f32 	%f330, %f325, %f7;
	sub.f32 	%f331, %f327, %f8;
	sub.f32 	%f332, %f329, %f9;
	mul.f32 	%f333, %f331, %f331;
	fma.rn.f32 	%f334, %f330, %f330, %f333;
	fma.rn.f32 	%f335, %f332, %f332, %f334;
	sqrt.rn.f32 	%f288, %f335;
	rcp.rn.f32 	%f336, %f288;
	mul.f32 	%f284, %f336, %f330;
	mul.f32 	%f285, %f336, %f331;
	mul.f32 	%f286, %f336, %f332;
	mov.u32 	%r62, 1065353216;
	st.local.u32 	[%rd2], %r62;
	ld.global.u32 	%r59, [root];
	mov.u32 	%r60, 1;
	// inline asm
	call _rt_trace_64, (%r59, %f33, %f34, %f35, %f284, %f285, %f286, %r60, %f36, %f288, %rd24, %r25);
	// inline asm
	ld.local.f32 	%f337, [%rd2];
	add.f32 	%f863, %f863, %f337;
	ld.global.u32 	%r233, [samples];
	add.s32 	%r232, %r232, 1;
	setp.lt.s32	%p31, %r232, %r233;
	@%p31 bra 	BB0_17;

BB0_18:
	setp.eq.s32	%p32, %r233, 0;
	@%p32 bra 	BB0_20;

	cvt.rn.f32.s32	%f339, %r233;
	div.rn.f32 	%f864, %f863, %f339;

BB0_20:
	cvt.sat.f32.f32	%f340, %f29;
	mul.f32 	%f341, %f28, %f340;
	mul.f32 	%f342, %f864, %f341;
	ld.global.f32 	%f343, [lightColor];
	mul.f32 	%f344, %f343, %f342;
	ld.global.f32 	%f345, [lightColor+4];
	mul.f32 	%f346, %f345, %f342;
	ld.global.f32 	%f347, [lightColor+8];
	mul.f32 	%f348, %f342, %f347;
	mul.f32 	%f42, %f215, %f344;
	mul.f32 	%f43, %f216, %f346;
	mul.f32 	%f44, %f217, %f348;
	ld.global.u32 	%r235, [imageEnabled];
	and.b32  	%r63, %r235, 8;
	setp.eq.s32	%p33, %r63, 0;
	@%p33 bra 	BB0_33;

	mov.f32 	%f823, 0fB5BFBE8E;
	mov.f32 	%f822, 0fBF317200;
	mov.f32 	%f821, 0f35BFBE8E;
	mov.f32 	%f820, 0f3F317200;
	mov.f32 	%f819, 0f3DAAAABD;
	mov.f32 	%f818, 0f3C4CAF63;
	mov.f32 	%f817, 0f3B18F0FE;
	cvt.u64.u32	%rd28, %r2;
	cvt.u64.u32	%rd29, %r3;
	mov.u64 	%rd32, image_Mask;
	cvta.global.u64 	%rd27, %rd32;
	// inline asm
	call (%rd26), _rt_buffer_get_64, (%rd27, %r24, %r24, %rd28, %rd29, %rd15, %rd15);
	// inline asm
	abs.f32 	%f46, %f864;
	setp.lt.f32	%p34, %f46, 0f00800000;
	mul.f32 	%f354, %f46, 0f4B800000;
	selp.f32	%f355, 0fC3170000, 0fC2FE0000, %p34;
	selp.f32	%f356, %f354, %f46, %p34;
	mov.b32 	 %r66, %f356;
	and.b32  	%r67, %r66, 8388607;
	or.b32  	%r68, %r67, 1065353216;
	mov.b32 	 %f357, %r68;
	shr.u32 	%r69, %r66, 23;
	cvt.rn.f32.u32	%f358, %r69;
	add.f32 	%f359, %f355, %f358;
	setp.gt.f32	%p35, %f357, 0f3FB504F3;
	mul.f32 	%f360, %f357, 0f3F000000;
	add.f32 	%f361, %f359, 0f3F800000;
	selp.f32	%f362, %f360, %f357, %p35;
	selp.f32	%f363, %f361, %f359, %p35;
	add.f32 	%f364, %f362, 0fBF800000;
	add.f32 	%f350, %f362, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f349,%f350;
	// inline asm
	add.f32 	%f365, %f364, %f364;
	mul.f32 	%f366, %f349, %f365;
	mul.f32 	%f367, %f366, %f366;
	fma.rn.f32 	%f370, %f817, %f367, %f818;
	fma.rn.f32 	%f372, %f370, %f367, %f819;
	mul.rn.f32 	%f373, %f372, %f367;
	mul.rn.f32 	%f374, %f373, %f366;
	sub.f32 	%f375, %f364, %f366;
	neg.f32 	%f376, %f366;
	add.f32 	%f377, %f375, %f375;
	fma.rn.f32 	%f378, %f376, %f364, %f377;
	mul.rn.f32 	%f379, %f349, %f378;
	add.f32 	%f380, %f374, %f366;
	sub.f32 	%f381, %f366, %f380;
	add.f32 	%f382, %f374, %f381;
	add.f32 	%f383, %f379, %f382;
	add.f32 	%f384, %f380, %f383;
	sub.f32 	%f385, %f380, %f384;
	add.f32 	%f386, %f383, %f385;
	mul.rn.f32 	%f388, %f363, %f820;
	mul.rn.f32 	%f390, %f363, %f821;
	add.f32 	%f391, %f388, %f384;
	sub.f32 	%f392, %f388, %f391;
	add.f32 	%f393, %f384, %f392;
	add.f32 	%f394, %f386, %f393;
	add.f32 	%f395, %f390, %f394;
	add.f32 	%f396, %f391, %f395;
	sub.f32 	%f397, %f391, %f396;
	add.f32 	%f398, %f395, %f397;
	mov.f32 	%f399, 0f3EE8BA2E;
	mul.rn.f32 	%f400, %f399, %f396;
	neg.f32 	%f401, %f400;
	fma.rn.f32 	%f402, %f399, %f396, %f401;
	fma.rn.f32 	%f403, %f399, %f398, %f402;
	mov.f32 	%f404, 0f00000000;
	fma.rn.f32 	%f405, %f404, %f396, %f403;
	add.rn.f32 	%f406, %f400, %f405;
	neg.f32 	%f407, %f406;
	add.rn.f32 	%f408, %f400, %f407;
	add.rn.f32 	%f409, %f408, %f405;
	mov.b32 	 %r70, %f406;
	setp.eq.s32	%p36, %r70, 1118925336;
	add.s32 	%r71, %r70, -1;
	mov.b32 	 %f410, %r71;
	add.f32 	%f411, %f409, 0f37000000;
	selp.f32	%f412, %f410, %f406, %p36;
	selp.f32	%f47, %f411, %f409, %p36;
	mul.f32 	%f413, %f412, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f414, %f413;
	fma.rn.f32 	%f416, %f414, %f822, %f412;
	fma.rn.f32 	%f418, %f414, %f823, %f416;
	mul.f32 	%f419, %f418, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f420, %f419;
	add.f32 	%f421, %f414, 0f00000000;
	ex2.approx.f32 	%f422, %f421;
	mul.f32 	%f423, %f420, %f422;
	setp.lt.f32	%p37, %f412, 0fC2D20000;
	selp.f32	%f424, 0f00000000, %f423, %p37;
	setp.gt.f32	%p38, %f412, 0f42D20000;
	selp.f32	%f865, 0f7F800000, %f424, %p38;
	setp.eq.f32	%p39, %f865, 0f7F800000;
	@%p39 bra 	BB0_23;

	fma.rn.f32 	%f865, %f865, %f47, %f865;

BB0_23:
	mov.f32 	%f851, 0f3E68BA2E;
	cvt.rzi.f32.f32	%f850, %f851;
	fma.rn.f32 	%f849, %f850, 0fC0000000, 0f3EE8BA2E;
	abs.f32 	%f848, %f849;
	setp.lt.f32	%p40, %f864, 0f00000000;
	setp.eq.f32	%p41, %f848, 0f3F800000;
	and.pred  	%p2, %p40, %p41;
	mov.b32 	 %r72, %f865;
	xor.b32  	%r73, %r72, -2147483648;
	mov.b32 	 %f425, %r73;
	selp.f32	%f867, %f425, %f865, %p2;
	setp.eq.f32	%p42, %f864, 0f00000000;
	@%p42 bra 	BB0_26;
	bra.uni 	BB0_24;

BB0_26:
	add.f32 	%f428, %f864, %f864;
	selp.f32	%f867, %f428, 0f00000000, %p41;
	bra.uni 	BB0_27;

BB0_111:
	mov.u64 	%rd287, image_HDR;
	cvta.global.u64 	%rd282, %rd287;
	mov.u32 	%r202, 8;
	// inline asm
	call (%rd281), _rt_buffer_get_64, (%rd282, %r24, %r202, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f780, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs167, %f780;}

	// inline asm
	mov.u16 	%rs168, 0;
	st.v4.u16 	[%rd281], {%rs167, %rs167, %rs167, %rs168};

BB0_112:
	ld.global.u32 	%r203, [additive];
	setp.eq.s32	%p117, %r203, 0;
	@%p117 bra 	BB0_114;

	mov.u64 	%rd300, image_RNM0;
	cvta.global.u64 	%rd289, %rd300;
	mov.u32 	%r207, 8;
	// inline asm
	call (%rd288), _rt_buffer_get_64, (%rd289, %r24, %r207, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs175, %rs176, %rs177, %rs178}, [%rd288];
	// inline asm
	{  cvt.f32.f16 %f781, %rs175;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f782, %rs176;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f783, %rs177;}

	// inline asm
	// inline asm
	call (%rd294), _rt_buffer_get_64, (%rd289, %r24, %r207, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f784, %f781, 0f00000000;
	add.f32 	%f785, %f782, 0f00000000;
	add.f32 	%f786, %f783, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs174, %f786;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs173, %f785;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs172, %f784;}

	// inline asm
	mov.u16 	%rs179, 0;
	st.v4.u16 	[%rd294], {%rs172, %rs173, %rs174, %rs179};
	bra.uni 	BB0_115;

BB0_114:
	mov.u64 	%rd307, image_RNM0;
	cvta.global.u64 	%rd302, %rd307;
	mov.u32 	%r209, 8;
	// inline asm
	call (%rd301), _rt_buffer_get_64, (%rd302, %r24, %r209, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f787, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs180, %f787;}

	// inline asm
	mov.u16 	%rs181, 0;
	st.v4.u16 	[%rd301], {%rs180, %rs180, %rs180, %rs181};

BB0_115:
	ld.global.u32 	%r210, [additive];
	setp.eq.s32	%p118, %r210, 0;
	@%p118 bra 	BB0_117;

	mov.u64 	%rd320, image_RNM1;
	cvta.global.u64 	%rd309, %rd320;
	mov.u32 	%r214, 8;
	// inline asm
	call (%rd308), _rt_buffer_get_64, (%rd309, %r24, %r214, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs188, %rs189, %rs190, %rs191}, [%rd308];
	// inline asm
	{  cvt.f32.f16 %f788, %rs188;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f789, %rs189;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f790, %rs190;}

	// inline asm
	// inline asm
	call (%rd314), _rt_buffer_get_64, (%rd309, %r24, %r214, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f791, %f788, 0f00000000;
	add.f32 	%f792, %f789, 0f00000000;
	add.f32 	%f793, %f790, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs187, %f793;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs186, %f792;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs185, %f791;}

	// inline asm
	mov.u16 	%rs192, 0;
	st.v4.u16 	[%rd314], {%rs185, %rs186, %rs187, %rs192};
	bra.uni 	BB0_118;

BB0_117:
	mov.u64 	%rd327, image_RNM1;
	cvta.global.u64 	%rd322, %rd327;
	mov.u32 	%r216, 8;
	// inline asm
	call (%rd321), _rt_buffer_get_64, (%rd322, %r24, %r216, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f794, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs193, %f794;}

	// inline asm
	mov.u16 	%rs194, 0;
	st.v4.u16 	[%rd321], {%rs193, %rs193, %rs193, %rs194};

BB0_118:
	ld.global.u32 	%r217, [additive];
	setp.eq.s32	%p119, %r217, 0;
	@%p119 bra 	BB0_120;

	mov.u64 	%rd340, image_RNM2;
	cvta.global.u64 	%rd329, %rd340;
	mov.u32 	%r221, 8;
	// inline asm
	call (%rd328), _rt_buffer_get_64, (%rd329, %r24, %r221, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs201, %rs202, %rs203, %rs204}, [%rd328];
	// inline asm
	{  cvt.f32.f16 %f795, %rs201;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f796, %rs202;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f797, %rs203;}

	// inline asm
	// inline asm
	call (%rd334), _rt_buffer_get_64, (%rd329, %r24, %r221, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f798, %f795, 0f00000000;
	add.f32 	%f799, %f796, 0f00000000;
	add.f32 	%f800, %f797, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs200, %f800;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs199, %f799;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs198, %f798;}

	// inline asm
	mov.u16 	%rs205, 0;
	st.v4.u16 	[%rd334], {%rs198, %rs199, %rs200, %rs205};
	bra.uni 	BB0_121;

BB0_120:
	mov.u64 	%rd347, image_RNM2;
	cvta.global.u64 	%rd342, %rd347;
	mov.u32 	%r223, 8;
	// inline asm
	call (%rd341), _rt_buffer_get_64, (%rd342, %r24, %r223, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f801, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs206, %f801;}

	// inline asm
	mov.u16 	%rs207, 0;
	st.v4.u16 	[%rd341], {%rs206, %rs206, %rs206, %rs207};

BB0_121:
	ld.global.u32 	%r224, [additive];
	setp.eq.s32	%p120, %r224, 0;
	@%p120 bra 	BB0_123;

	mov.u64 	%rd360, image_RNM3;
	cvta.global.u64 	%rd349, %rd360;
	mov.u32 	%r228, 8;
	// inline asm
	call (%rd348), _rt_buffer_get_64, (%rd349, %r24, %r228, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs214, %rs215, %rs216, %rs217}, [%rd348];
	// inline asm
	{  cvt.f32.f16 %f802, %rs214;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f803, %rs215;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f804, %rs216;}

	// inline asm
	// inline asm
	call (%rd354), _rt_buffer_get_64, (%rd349, %r24, %r228, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f805, %f802, 0f00000000;
	add.f32 	%f806, %f803, 0f00000000;
	add.f32 	%f807, %f804, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs213, %f807;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs212, %f806;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs211, %f805;}

	// inline asm
	mov.u16 	%rs218, 0;
	st.v4.u16 	[%rd354], {%rs211, %rs212, %rs213, %rs218};
	bra.uni 	BB0_124;

BB0_123:
	mov.u64 	%rd367, image_RNM3;
	cvta.global.u64 	%rd362, %rd367;
	mov.u32 	%r230, 8;
	// inline asm
	call (%rd361), _rt_buffer_get_64, (%rd362, %r24, %r230, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f808, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs219, %f808;}

	// inline asm
	mov.u16 	%rs220, 0;
	st.v4.u16 	[%rd361], {%rs219, %rs219, %rs219, %rs220};
	bra.uni 	BB0_124;

BB0_91:
	mov.u64 	%rd173, image_HDR;
	cvta.global.u64 	%rd168, %rd173;
	mov.u32 	%r159, 8;
	// inline asm
	call (%rd167), _rt_buffer_get_64, (%rd168, %r24, %r159, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f738, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs104, %f738;}

	// inline asm
	st.v4.u16 	[%rd167], {%rs104, %rs104, %rs104, %rs93};

BB0_92:
	ld.global.u32 	%r160, [additive];
	setp.eq.s32	%p109, %r160, 0;
	mov.f32 	%f739, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs105, %f739;}

	// inline asm
	@%p109 bra 	BB0_94;

	mov.u64 	%rd186, image_RNM0;
	cvta.global.u64 	%rd175, %rd186;
	mov.u32 	%r164, 8;
	// inline asm
	call (%rd174), _rt_buffer_get_64, (%rd175, %r24, %r164, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs112, %rs113, %rs114, %rs115}, [%rd174];
	// inline asm
	{  cvt.f32.f16 %f740, %rs112;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f741, %rs113;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f742, %rs114;}

	// inline asm
	// inline asm
	call (%rd180), _rt_buffer_get_64, (%rd175, %r24, %r164, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f743, %f740, 0f00000000;
	add.f32 	%f744, %f741, 0f00000000;
	add.f32 	%f745, %f742, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs111, %f745;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs110, %f744;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs109, %f743;}

	// inline asm
	st.v4.u16 	[%rd180], {%rs109, %rs110, %rs111, %rs105};
	bra.uni 	BB0_95;

BB0_94:
	mov.u64 	%rd193, image_RNM0;
	cvta.global.u64 	%rd188, %rd193;
	mov.u32 	%r166, 8;
	// inline asm
	call (%rd187), _rt_buffer_get_64, (%rd188, %r24, %r166, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f746, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs116, %f746;}

	// inline asm
	st.v4.u16 	[%rd187], {%rs116, %rs116, %rs116, %rs105};

BB0_95:
	ld.global.u32 	%r167, [additive];
	setp.eq.s32	%p110, %r167, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs117, %f739;}

	// inline asm
	@%p110 bra 	BB0_97;

	mov.u64 	%rd206, image_RNM1;
	cvta.global.u64 	%rd195, %rd206;
	mov.u32 	%r171, 8;
	// inline asm
	call (%rd194), _rt_buffer_get_64, (%rd195, %r24, %r171, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs124, %rs125, %rs126, %rs127}, [%rd194];
	// inline asm
	{  cvt.f32.f16 %f748, %rs124;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f749, %rs125;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f750, %rs126;}

	// inline asm
	// inline asm
	call (%rd200), _rt_buffer_get_64, (%rd195, %r24, %r171, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f751, %f748, 0f00000000;
	add.f32 	%f752, %f749, 0f00000000;
	add.f32 	%f753, %f750, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs123, %f753;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs122, %f752;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs121, %f751;}

	// inline asm
	st.v4.u16 	[%rd200], {%rs121, %rs122, %rs123, %rs117};
	bra.uni 	BB0_98;

BB0_97:
	mov.u64 	%rd213, image_RNM1;
	cvta.global.u64 	%rd208, %rd213;
	mov.u32 	%r173, 8;
	// inline asm
	call (%rd207), _rt_buffer_get_64, (%rd208, %r24, %r173, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f754, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs128, %f754;}

	// inline asm
	st.v4.u16 	[%rd207], {%rs128, %rs128, %rs128, %rs117};

BB0_98:
	ld.global.u32 	%r174, [additive];
	setp.eq.s32	%p111, %r174, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs129, %f739;}

	// inline asm
	@%p111 bra 	BB0_100;

	mov.u64 	%rd226, image_RNM2;
	cvta.global.u64 	%rd215, %rd226;
	mov.u32 	%r178, 8;
	// inline asm
	call (%rd214), _rt_buffer_get_64, (%rd215, %r24, %r178, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs136, %rs137, %rs138, %rs139}, [%rd214];
	// inline asm
	{  cvt.f32.f16 %f756, %rs136;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f757, %rs137;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f758, %rs138;}

	// inline asm
	// inline asm
	call (%rd220), _rt_buffer_get_64, (%rd215, %r24, %r178, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f759, %f756, 0f00000000;
	add.f32 	%f760, %f757, 0f00000000;
	add.f32 	%f761, %f758, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs135, %f761;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs134, %f760;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs133, %f759;}

	// inline asm
	st.v4.u16 	[%rd220], {%rs133, %rs134, %rs135, %rs129};
	bra.uni 	BB0_101;

BB0_100:
	mov.u64 	%rd233, image_RNM2;
	cvta.global.u64 	%rd228, %rd233;
	mov.u32 	%r180, 8;
	// inline asm
	call (%rd227), _rt_buffer_get_64, (%rd228, %r24, %r180, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f762, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs140, %f762;}

	// inline asm
	st.v4.u16 	[%rd227], {%rs140, %rs140, %rs140, %rs129};

BB0_101:
	ld.global.u32 	%r181, [additive];
	setp.eq.s32	%p112, %r181, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs141, %f739;}

	// inline asm
	@%p112 bra 	BB0_103;

	mov.u64 	%rd246, image_RNM3;
	cvta.global.u64 	%rd235, %rd246;
	mov.u32 	%r185, 8;
	// inline asm
	call (%rd234), _rt_buffer_get_64, (%rd235, %r24, %r185, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs148, %rs149, %rs150, %rs151}, [%rd234];
	// inline asm
	{  cvt.f32.f16 %f764, %rs148;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f765, %rs149;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f766, %rs150;}

	// inline asm
	// inline asm
	call (%rd240), _rt_buffer_get_64, (%rd235, %r24, %r185, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f767, %f764, 0f00000000;
	add.f32 	%f768, %f765, 0f00000000;
	add.f32 	%f769, %f766, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs147, %f769;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs146, %f768;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs145, %f767;}

	// inline asm
	st.v4.u16 	[%rd240], {%rs145, %rs146, %rs147, %rs141};
	bra.uni 	BB0_124;

BB0_103:
	mov.u64 	%rd253, image_RNM3;
	cvta.global.u64 	%rd248, %rd253;
	mov.u32 	%r187, 8;
	// inline asm
	call (%rd247), _rt_buffer_get_64, (%rd248, %r24, %r187, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f770, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs152, %f770;}

	// inline asm
	st.v4.u16 	[%rd247], {%rs152, %rs152, %rs152, %rs141};
	bra.uni 	BB0_124;

BB0_24:
	setp.geu.f32	%p43, %f864, 0f00000000;
	@%p43 bra 	BB0_27;

	mov.f32 	%f855, 0f3EE8BA2E;
	cvt.rzi.f32.f32	%f427, %f855;
	setp.neu.f32	%p44, %f427, 0f3EE8BA2E;
	selp.f32	%f867, 0f7FFFFFFF, %f867, %p44;

BB0_27:
	abs.f32 	%f852, %f864;
	add.f32 	%f429, %f852, 0f3EE8BA2E;
	mov.b32 	 %r74, %f429;
	setp.lt.s32	%p46, %r74, 2139095040;
	@%p46 bra 	BB0_32;

	abs.f32 	%f853, %f864;
	setp.gtu.f32	%p47, %f853, 0f7F800000;
	@%p47 bra 	BB0_31;
	bra.uni 	BB0_29;

BB0_31:
	add.f32 	%f867, %f864, 0f3EE8BA2E;
	bra.uni 	BB0_32;

BB0_29:
	abs.f32 	%f854, %f864;
	setp.neu.f32	%p48, %f854, 0f7F800000;
	@%p48 bra 	BB0_32;

	selp.f32	%f867, 0fFF800000, 0f7F800000, %p2;

BB0_32:
	mul.f32 	%f430, %f867, 0f437F0000;
	setp.eq.f32	%p49, %f864, 0f3F800000;
	selp.f32	%f431, 0f437F0000, %f430, %p49;
	cvt.rzi.u32.f32	%r75, %f431;
	cvt.u16.u32	%rs19, %r75;
	mov.u16 	%rs20, 255;
	st.v2.u8 	[%rd26], {%rs19, %rs20};
	ld.global.u32 	%r235, [imageEnabled];

BB0_33:
	and.b32  	%r76, %r235, 1;
	setp.eq.b32	%p50, %r76, 1;
	@!%p50 bra 	BB0_68;
	bra.uni 	BB0_34;

BB0_34:
	mov.f32 	%f830, 0fB5BFBE8E;
	mov.f32 	%f829, 0fBF317200;
	mov.f32 	%f828, 0f35BFBE8E;
	mov.f32 	%f827, 0f3F317200;
	mov.f32 	%f826, 0f3DAAAABD;
	mov.f32 	%f825, 0f3C4CAF63;
	mov.f32 	%f824, 0f3B18F0FE;
	mov.f32 	%f434, 0f3E666666;
	cvt.rzi.f32.f32	%f435, %f434;
	fma.rn.f32 	%f436, %f435, 0fC0000000, 0f3EE66666;
	abs.f32 	%f58, %f436;
	abs.f32 	%f59, %f42;
	setp.lt.f32	%p51, %f59, 0f00800000;
	mul.f32 	%f437, %f59, 0f4B800000;
	selp.f32	%f438, 0fC3170000, 0fC2FE0000, %p51;
	selp.f32	%f439, %f437, %f59, %p51;
	mov.b32 	 %r77, %f439;
	and.b32  	%r78, %r77, 8388607;
	or.b32  	%r79, %r78, 1065353216;
	mov.b32 	 %f440, %r79;
	shr.u32 	%r80, %r77, 23;
	cvt.rn.f32.u32	%f441, %r80;
	add.f32 	%f442, %f438, %f441;
	setp.gt.f32	%p52, %f440, 0f3FB504F3;
	mul.f32 	%f443, %f440, 0f3F000000;
	add.f32 	%f444, %f442, 0f3F800000;
	selp.f32	%f445, %f443, %f440, %p52;
	selp.f32	%f446, %f444, %f442, %p52;
	add.f32 	%f447, %f445, 0fBF800000;
	add.f32 	%f433, %f445, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f432,%f433;
	// inline asm
	add.f32 	%f448, %f447, %f447;
	mul.f32 	%f449, %f432, %f448;
	mul.f32 	%f450, %f449, %f449;
	fma.rn.f32 	%f453, %f824, %f450, %f825;
	fma.rn.f32 	%f455, %f453, %f450, %f826;
	mul.rn.f32 	%f456, %f455, %f450;
	mul.rn.f32 	%f457, %f456, %f449;
	sub.f32 	%f458, %f447, %f449;
	neg.f32 	%f459, %f449;
	add.f32 	%f460, %f458, %f458;
	fma.rn.f32 	%f461, %f459, %f447, %f460;
	mul.rn.f32 	%f462, %f432, %f461;
	add.f32 	%f463, %f457, %f449;
	sub.f32 	%f464, %f449, %f463;
	add.f32 	%f465, %f457, %f464;
	add.f32 	%f466, %f462, %f465;
	add.f32 	%f467, %f463, %f466;
	sub.f32 	%f468, %f463, %f467;
	add.f32 	%f469, %f466, %f468;
	mul.rn.f32 	%f471, %f446, %f827;
	mul.rn.f32 	%f473, %f446, %f828;
	add.f32 	%f474, %f471, %f467;
	sub.f32 	%f475, %f471, %f474;
	add.f32 	%f476, %f467, %f475;
	add.f32 	%f477, %f469, %f476;
	add.f32 	%f478, %f473, %f477;
	add.f32 	%f479, %f474, %f478;
	sub.f32 	%f480, %f474, %f479;
	add.f32 	%f481, %f478, %f480;
	mov.f32 	%f482, 0f3EE66666;
	mul.rn.f32 	%f483, %f482, %f479;
	neg.f32 	%f484, %f483;
	fma.rn.f32 	%f485, %f482, %f479, %f484;
	fma.rn.f32 	%f486, %f482, %f481, %f485;
	mov.f32 	%f487, 0f00000000;
	fma.rn.f32 	%f488, %f487, %f479, %f486;
	add.rn.f32 	%f489, %f483, %f488;
	neg.f32 	%f490, %f489;
	add.rn.f32 	%f491, %f483, %f490;
	add.rn.f32 	%f492, %f491, %f488;
	mov.b32 	 %r81, %f489;
	setp.eq.s32	%p53, %r81, 1118925336;
	add.s32 	%r82, %r81, -1;
	mov.b32 	 %f493, %r82;
	add.f32 	%f494, %f492, 0f37000000;
	selp.f32	%f495, %f493, %f489, %p53;
	selp.f32	%f60, %f494, %f492, %p53;
	mul.f32 	%f496, %f495, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f497, %f496;
	fma.rn.f32 	%f499, %f497, %f829, %f495;
	fma.rn.f32 	%f501, %f497, %f830, %f499;
	mul.f32 	%f502, %f501, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f503, %f502;
	add.f32 	%f504, %f497, 0f00000000;
	ex2.approx.f32 	%f505, %f504;
	mul.f32 	%f506, %f503, %f505;
	setp.lt.f32	%p54, %f495, 0fC2D20000;
	selp.f32	%f507, 0f00000000, %f506, %p54;
	setp.gt.f32	%p55, %f495, 0f42D20000;
	selp.f32	%f868, 0f7F800000, %f507, %p55;
	setp.eq.f32	%p56, %f868, 0f7F800000;
	@%p56 bra 	BB0_36;

	fma.rn.f32 	%f868, %f868, %f60, %f868;

BB0_36:
	setp.lt.f32	%p57, %f42, 0f00000000;
	setp.eq.f32	%p58, %f58, 0f3F800000;
	and.pred  	%p3, %p57, %p58;
	mov.b32 	 %r83, %f868;
	xor.b32  	%r84, %r83, -2147483648;
	mov.b32 	 %f508, %r84;
	selp.f32	%f870, %f508, %f868, %p3;
	setp.eq.f32	%p59, %f42, 0f00000000;
	@%p59 bra 	BB0_39;
	bra.uni 	BB0_37;

BB0_39:
	add.f32 	%f511, %f42, %f42;
	selp.f32	%f870, %f511, 0f00000000, %p58;
	bra.uni 	BB0_40;

BB0_37:
	setp.geu.f32	%p60, %f42, 0f00000000;
	@%p60 bra 	BB0_40;

	cvt.rzi.f32.f32	%f510, %f482;
	setp.neu.f32	%p61, %f510, 0f3EE66666;
	selp.f32	%f870, 0f7FFFFFFF, %f870, %p61;

BB0_40:
	add.f32 	%f512, %f59, 0f3EE66666;
	mov.b32 	 %r85, %f512;
	setp.lt.s32	%p63, %r85, 2139095040;
	@%p63 bra 	BB0_45;

	setp.gtu.f32	%p64, %f59, 0f7F800000;
	@%p64 bra 	BB0_44;
	bra.uni 	BB0_42;

BB0_44:
	add.f32 	%f870, %f42, 0f3EE66666;
	bra.uni 	BB0_45;

BB0_42:
	setp.neu.f32	%p65, %f59, 0f7F800000;
	@%p65 bra 	BB0_45;

	selp.f32	%f870, 0fFF800000, 0f7F800000, %p3;

BB0_45:
	mov.f32 	%f837, 0fB5BFBE8E;
	mov.f32 	%f836, 0fBF317200;
	mov.f32 	%f835, 0f35BFBE8E;
	mov.f32 	%f834, 0f3F317200;
	mov.f32 	%f833, 0f3DAAAABD;
	mov.f32 	%f832, 0f3C4CAF63;
	mov.f32 	%f831, 0f3B18F0FE;
	setp.eq.f32	%p66, %f42, 0f3F800000;
	selp.f32	%f71, 0f3F800000, %f870, %p66;
	abs.f32 	%f72, %f43;
	setp.lt.f32	%p67, %f72, 0f00800000;
	mul.f32 	%f515, %f72, 0f4B800000;
	selp.f32	%f516, 0fC3170000, 0fC2FE0000, %p67;
	selp.f32	%f517, %f515, %f72, %p67;
	mov.b32 	 %r86, %f517;
	and.b32  	%r87, %r86, 8388607;
	or.b32  	%r88, %r87, 1065353216;
	mov.b32 	 %f518, %r88;
	shr.u32 	%r89, %r86, 23;
	cvt.rn.f32.u32	%f519, %r89;
	add.f32 	%f520, %f516, %f519;
	setp.gt.f32	%p68, %f518, 0f3FB504F3;
	mul.f32 	%f521, %f518, 0f3F000000;
	add.f32 	%f522, %f520, 0f3F800000;
	selp.f32	%f523, %f521, %f518, %p68;
	selp.f32	%f524, %f522, %f520, %p68;
	add.f32 	%f525, %f523, 0fBF800000;
	add.f32 	%f514, %f523, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f513,%f514;
	// inline asm
	add.f32 	%f526, %f525, %f525;
	mul.f32 	%f527, %f513, %f526;
	mul.f32 	%f528, %f527, %f527;
	fma.rn.f32 	%f531, %f831, %f528, %f832;
	fma.rn.f32 	%f533, %f531, %f528, %f833;
	mul.rn.f32 	%f534, %f533, %f528;
	mul.rn.f32 	%f535, %f534, %f527;
	sub.f32 	%f536, %f525, %f527;
	neg.f32 	%f537, %f527;
	add.f32 	%f538, %f536, %f536;
	fma.rn.f32 	%f539, %f537, %f525, %f538;
	mul.rn.f32 	%f540, %f513, %f539;
	add.f32 	%f541, %f535, %f527;
	sub.f32 	%f542, %f527, %f541;
	add.f32 	%f543, %f535, %f542;
	add.f32 	%f544, %f540, %f543;
	add.f32 	%f545, %f541, %f544;
	sub.f32 	%f546, %f541, %f545;
	add.f32 	%f547, %f544, %f546;
	mul.rn.f32 	%f549, %f524, %f834;
	mul.rn.f32 	%f551, %f524, %f835;
	add.f32 	%f552, %f549, %f545;
	sub.f32 	%f553, %f549, %f552;
	add.f32 	%f554, %f545, %f553;
	add.f32 	%f555, %f547, %f554;
	add.f32 	%f556, %f551, %f555;
	add.f32 	%f557, %f552, %f556;
	sub.f32 	%f558, %f552, %f557;
	add.f32 	%f559, %f556, %f558;
	mul.rn.f32 	%f561, %f482, %f557;
	neg.f32 	%f562, %f561;
	fma.rn.f32 	%f563, %f482, %f557, %f562;
	fma.rn.f32 	%f564, %f482, %f559, %f563;
	fma.rn.f32 	%f566, %f487, %f557, %f564;
	add.rn.f32 	%f567, %f561, %f566;
	neg.f32 	%f568, %f567;
	add.rn.f32 	%f569, %f561, %f568;
	add.rn.f32 	%f570, %f569, %f566;
	mov.b32 	 %r90, %f567;
	setp.eq.s32	%p69, %r90, 1118925336;
	add.s32 	%r91, %r90, -1;
	mov.b32 	 %f571, %r91;
	add.f32 	%f572, %f570, 0f37000000;
	selp.f32	%f573, %f571, %f567, %p69;
	selp.f32	%f73, %f572, %f570, %p69;
	mul.f32 	%f574, %f573, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f575, %f574;
	fma.rn.f32 	%f577, %f575, %f836, %f573;
	fma.rn.f32 	%f579, %f575, %f837, %f577;
	mul.f32 	%f580, %f579, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f581, %f580;
	add.f32 	%f582, %f575, 0f00000000;
	ex2.approx.f32 	%f583, %f582;
	mul.f32 	%f584, %f581, %f583;
	setp.lt.f32	%p70, %f573, 0fC2D20000;
	selp.f32	%f585, 0f00000000, %f584, %p70;
	setp.gt.f32	%p71, %f573, 0f42D20000;
	selp.f32	%f871, 0f7F800000, %f585, %p71;
	setp.eq.f32	%p72, %f871, 0f7F800000;
	@%p72 bra 	BB0_47;

	fma.rn.f32 	%f871, %f871, %f73, %f871;

BB0_47:
	setp.lt.f32	%p73, %f43, 0f00000000;
	and.pred  	%p4, %p73, %p58;
	mov.b32 	 %r92, %f871;
	xor.b32  	%r93, %r92, -2147483648;
	mov.b32 	 %f586, %r93;
	selp.f32	%f873, %f586, %f871, %p4;
	setp.eq.f32	%p75, %f43, 0f00000000;
	@%p75 bra 	BB0_50;
	bra.uni 	BB0_48;

BB0_50:
	add.f32 	%f589, %f43, %f43;
	selp.f32	%f873, %f589, 0f00000000, %p58;
	bra.uni 	BB0_51;

BB0_48:
	setp.geu.f32	%p76, %f43, 0f00000000;
	@%p76 bra 	BB0_51;

	cvt.rzi.f32.f32	%f588, %f482;
	setp.neu.f32	%p77, %f588, 0f3EE66666;
	selp.f32	%f873, 0f7FFFFFFF, %f873, %p77;

BB0_51:
	add.f32 	%f590, %f72, 0f3EE66666;
	mov.b32 	 %r94, %f590;
	setp.lt.s32	%p79, %r94, 2139095040;
	@%p79 bra 	BB0_56;

	setp.gtu.f32	%p80, %f72, 0f7F800000;
	@%p80 bra 	BB0_55;
	bra.uni 	BB0_53;

BB0_55:
	add.f32 	%f873, %f43, 0f3EE66666;
	bra.uni 	BB0_56;

BB0_53:
	setp.neu.f32	%p81, %f72, 0f7F800000;
	@%p81 bra 	BB0_56;

	selp.f32	%f873, 0fFF800000, 0f7F800000, %p4;

BB0_56:
	mov.f32 	%f844, 0fB5BFBE8E;
	mov.f32 	%f843, 0fBF317200;
	mov.f32 	%f842, 0f35BFBE8E;
	mov.f32 	%f841, 0f3F317200;
	mov.f32 	%f840, 0f3DAAAABD;
	mov.f32 	%f839, 0f3C4CAF63;
	mov.f32 	%f838, 0f3B18F0FE;
	setp.eq.f32	%p82, %f43, 0f3F800000;
	selp.f32	%f84, 0f3F800000, %f873, %p82;
	abs.f32 	%f85, %f44;
	setp.lt.f32	%p83, %f85, 0f00800000;
	mul.f32 	%f593, %f85, 0f4B800000;
	selp.f32	%f594, 0fC3170000, 0fC2FE0000, %p83;
	selp.f32	%f595, %f593, %f85, %p83;
	mov.b32 	 %r95, %f595;
	and.b32  	%r96, %r95, 8388607;
	or.b32  	%r97, %r96, 1065353216;
	mov.b32 	 %f596, %r97;
	shr.u32 	%r98, %r95, 23;
	cvt.rn.f32.u32	%f597, %r98;
	add.f32 	%f598, %f594, %f597;
	setp.gt.f32	%p84, %f596, 0f3FB504F3;
	mul.f32 	%f599, %f596, 0f3F000000;
	add.f32 	%f600, %f598, 0f3F800000;
	selp.f32	%f601, %f599, %f596, %p84;
	selp.f32	%f602, %f600, %f598, %p84;
	add.f32 	%f603, %f601, 0fBF800000;
	add.f32 	%f592, %f601, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f591,%f592;
	// inline asm
	add.f32 	%f604, %f603, %f603;
	mul.f32 	%f605, %f591, %f604;
	mul.f32 	%f606, %f605, %f605;
	fma.rn.f32 	%f609, %f838, %f606, %f839;
	fma.rn.f32 	%f611, %f609, %f606, %f840;
	mul.rn.f32 	%f612, %f611, %f606;
	mul.rn.f32 	%f613, %f612, %f605;
	sub.f32 	%f614, %f603, %f605;
	neg.f32 	%f615, %f605;
	add.f32 	%f616, %f614, %f614;
	fma.rn.f32 	%f617, %f615, %f603, %f616;
	mul.rn.f32 	%f618, %f591, %f617;
	add.f32 	%f619, %f613, %f605;
	sub.f32 	%f620, %f605, %f619;
	add.f32 	%f621, %f613, %f620;
	add.f32 	%f622, %f618, %f621;
	add.f32 	%f623, %f619, %f622;
	sub.f32 	%f624, %f619, %f623;
	add.f32 	%f625, %f622, %f624;
	mul.rn.f32 	%f627, %f602, %f841;
	mul.rn.f32 	%f629, %f602, %f842;
	add.f32 	%f630, %f627, %f623;
	sub.f32 	%f631, %f627, %f630;
	add.f32 	%f632, %f623, %f631;
	add.f32 	%f633, %f625, %f632;
	add.f32 	%f634, %f629, %f633;
	add.f32 	%f635, %f630, %f634;
	sub.f32 	%f636, %f630, %f635;
	add.f32 	%f637, %f634, %f636;
	mul.rn.f32 	%f639, %f482, %f635;
	neg.f32 	%f640, %f639;
	fma.rn.f32 	%f641, %f482, %f635, %f640;
	fma.rn.f32 	%f642, %f482, %f637, %f641;
	fma.rn.f32 	%f644, %f487, %f635, %f642;
	add.rn.f32 	%f645, %f639, %f644;
	neg.f32 	%f646, %f645;
	add.rn.f32 	%f647, %f639, %f646;
	add.rn.f32 	%f648, %f647, %f644;
	mov.b32 	 %r99, %f645;
	setp.eq.s32	%p85, %r99, 1118925336;
	add.s32 	%r100, %r99, -1;
	mov.b32 	 %f649, %r100;
	add.f32 	%f650, %f648, 0f37000000;
	selp.f32	%f651, %f649, %f645, %p85;
	selp.f32	%f86, %f650, %f648, %p85;
	mul.f32 	%f652, %f651, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f653, %f652;
	fma.rn.f32 	%f655, %f653, %f843, %f651;
	fma.rn.f32 	%f657, %f653, %f844, %f655;
	mul.f32 	%f658, %f657, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f659, %f658;
	add.f32 	%f660, %f653, 0f00000000;
	ex2.approx.f32 	%f661, %f660;
	mul.f32 	%f662, %f659, %f661;
	setp.lt.f32	%p86, %f651, 0fC2D20000;
	selp.f32	%f663, 0f00000000, %f662, %p86;
	setp.gt.f32	%p87, %f651, 0f42D20000;
	selp.f32	%f874, 0f7F800000, %f663, %p87;
	setp.eq.f32	%p88, %f874, 0f7F800000;
	@%p88 bra 	BB0_58;

	fma.rn.f32 	%f874, %f874, %f86, %f874;

BB0_58:
	setp.lt.f32	%p89, %f44, 0f00000000;
	and.pred  	%p5, %p89, %p58;
	mov.b32 	 %r101, %f874;
	xor.b32  	%r102, %r101, -2147483648;
	mov.b32 	 %f664, %r102;
	selp.f32	%f876, %f664, %f874, %p5;
	setp.eq.f32	%p91, %f44, 0f00000000;
	@%p91 bra 	BB0_61;
	bra.uni 	BB0_59;

BB0_61:
	add.f32 	%f667, %f44, %f44;
	selp.f32	%f876, %f667, 0f00000000, %p58;
	bra.uni 	BB0_62;

BB0_59:
	setp.geu.f32	%p92, %f44, 0f00000000;
	@%p92 bra 	BB0_62;

	cvt.rzi.f32.f32	%f666, %f482;
	setp.neu.f32	%p93, %f666, 0f3EE66666;
	selp.f32	%f876, 0f7FFFFFFF, %f876, %p93;

BB0_62:
	add.f32 	%f668, %f85, 0f3EE66666;
	mov.b32 	 %r103, %f668;
	setp.lt.s32	%p95, %r103, 2139095040;
	@%p95 bra 	BB0_67;

	setp.gtu.f32	%p96, %f85, 0f7F800000;
	@%p96 bra 	BB0_66;
	bra.uni 	BB0_64;

BB0_66:
	add.f32 	%f876, %f44, 0f3EE66666;
	bra.uni 	BB0_67;

BB0_64:
	setp.neu.f32	%p97, %f85, 0f7F800000;
	@%p97 bra 	BB0_67;

	selp.f32	%f876, 0fFF800000, 0f7F800000, %p5;

BB0_67:
	mov.u32 	%r231, 4;
	setp.eq.f32	%p98, %f44, 0f3F800000;
	selp.f32	%f669, 0f3F800000, %f876, %p98;
	cvt.u64.u32	%rd36, %r3;
	cvt.u64.u32	%rd35, %r2;
	mov.u64 	%rd39, image;
	cvta.global.u64 	%rd34, %rd39;
	// inline asm
	call (%rd33), _rt_buffer_get_64, (%rd34, %r24, %r231, %rd35, %rd36, %rd15, %rd15);
	// inline asm
	cvt.sat.f32.f32	%f670, %f669;
	mul.f32 	%f671, %f670, 0f437FFD71;
	cvt.rzi.u32.f32	%r106, %f671;
	cvt.sat.f32.f32	%f672, %f84;
	mul.f32 	%f673, %f672, 0f437FFD71;
	cvt.rzi.u32.f32	%r107, %f673;
	cvt.sat.f32.f32	%f674, %f71;
	mul.f32 	%f675, %f674, 0f437FFD71;
	cvt.rzi.u32.f32	%r108, %f675;
	cvt.u16.u32	%rs21, %r106;
	cvt.u16.u32	%rs22, %r108;
	cvt.u16.u32	%rs23, %r107;
	mov.u16 	%rs24, 255;
	st.v4.u8 	[%rd33], {%rs21, %rs23, %rs22, %rs24};
	ld.global.u32 	%r235, [imageEnabled];

BB0_68:
	cvt.u64.u32	%rd4, %r2;
	cvt.u64.u32	%rd5, %r3;
	and.b32  	%r109, %r235, 4;
	setp.eq.s32	%p99, %r109, 0;
	@%p99 bra 	BB0_72;

	ld.global.u32 	%r110, [additive];
	setp.eq.s32	%p100, %r110, 0;
	mov.f32 	%f676, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs25, %f676;}

	// inline asm
	@%p100 bra 	BB0_71;

	mov.u64 	%rd52, image_HDR;
	cvta.global.u64 	%rd41, %rd52;
	mov.u32 	%r114, 8;
	// inline asm
	call (%rd40), _rt_buffer_get_64, (%rd41, %r24, %r114, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs32, %rs33, %rs34, %rs35}, [%rd40];
	// inline asm
	{  cvt.f32.f16 %f677, %rs32;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f678, %rs33;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f679, %rs34;}

	// inline asm
	// inline asm
	call (%rd46), _rt_buffer_get_64, (%rd41, %r24, %r114, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f680, %f42, %f677;
	add.f32 	%f681, %f43, %f678;
	add.f32 	%f682, %f44, %f679;
	// inline asm
	{  cvt.rn.f16.f32 %rs31, %f682;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs30, %f681;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs29, %f680;}

	// inline asm
	st.v4.u16 	[%rd46], {%rs29, %rs30, %rs31, %rs25};
	bra.uni 	BB0_72;

BB0_71:
	mov.u64 	%rd59, image_HDR;
	cvta.global.u64 	%rd54, %rd59;
	mov.u32 	%r116, 8;
	// inline asm
	call (%rd53), _rt_buffer_get_64, (%rd54, %r24, %r116, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs38, %f44;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs37, %f43;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs36, %f42;}

	// inline asm
	st.v4.u16 	[%rd53], {%rs36, %rs37, %rs38, %rs25};

BB0_72:
	mul.f32 	%f687, %f28, 0f3E800000;
	mul.f32 	%f688, %f687, %f864;
	ld.global.f32 	%f689, [lightColor];
	mul.f32 	%f690, %f688, %f689;
	ld.global.f32 	%f691, [lightColor+4];
	mul.f32 	%f692, %f688, %f691;
	ld.global.f32 	%f693, [lightColor+8];
	mul.f32 	%f694, %f688, %f693;
	mul.f32 	%f97, %f215, %f690;
	mul.f32 	%f98, %f216, %f692;
	mul.f32 	%f99, %f217, %f694;
	ld.global.u32 	%r117, [additive];
	setp.eq.s32	%p101, %r117, 0;
	mov.f32 	%f686, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs39, %f686;}

	// inline asm
	@%p101 bra 	BB0_74;

	mov.u64 	%rd72, image_RNM0;
	cvta.global.u64 	%rd61, %rd72;
	mov.u32 	%r121, 8;
	// inline asm
	call (%rd60), _rt_buffer_get_64, (%rd61, %r24, %r121, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs46, %rs47, %rs48, %rs49}, [%rd60];
	// inline asm
	{  cvt.f32.f16 %f695, %rs46;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f696, %rs47;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f697, %rs48;}

	// inline asm
	// inline asm
	call (%rd66), _rt_buffer_get_64, (%rd61, %r24, %r121, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f698, %f97, %f695;
	add.f32 	%f699, %f98, %f696;
	add.f32 	%f700, %f99, %f697;
	// inline asm
	{  cvt.rn.f16.f32 %rs45, %f700;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs44, %f699;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs43, %f698;}

	// inline asm
	st.v4.u16 	[%rd66], {%rs43, %rs44, %rs45, %rs39};
	bra.uni 	BB0_75;

BB0_74:
	mov.u64 	%rd79, image_RNM0;
	cvta.global.u64 	%rd74, %rd79;
	mov.u32 	%r123, 8;
	// inline asm
	call (%rd73), _rt_buffer_get_64, (%rd74, %r24, %r123, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs52, %f99;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs51, %f98;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs50, %f97;}

	// inline asm
	st.v4.u16 	[%rd73], {%rs50, %rs51, %rs52, %rs39};

BB0_75:
	fma.rn.f32 	%f100, %f10, 0f3F000000, 0f3F000000;
	fma.rn.f32 	%f101, %f11, 0f3F000000, 0f3F000000;
	fma.rn.f32 	%f102, %f12, 0f3F000000, 0f3F000000;
	ld.global.u32 	%r124, [additive];
	setp.eq.s32	%p102, %r124, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs53, %f686;}

	// inline asm
	@%p102 bra 	BB0_77;

	mov.u64 	%rd92, image_RNM1;
	cvta.global.u64 	%rd81, %rd92;
	mov.u32 	%r128, 8;
	// inline asm
	call (%rd80), _rt_buffer_get_64, (%rd81, %r24, %r128, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs60, %rs61, %rs62, %rs63}, [%rd80];
	// inline asm
	{  cvt.f32.f16 %f705, %rs60;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f706, %rs61;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f707, %rs62;}

	// inline asm
	// inline asm
	call (%rd86), _rt_buffer_get_64, (%rd81, %r24, %r128, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f708, %f100, %f705;
	add.f32 	%f709, %f100, %f706;
	add.f32 	%f710, %f100, %f707;
	// inline asm
	{  cvt.rn.f16.f32 %rs59, %f710;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs58, %f709;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs57, %f708;}

	// inline asm
	st.v4.u16 	[%rd86], {%rs57, %rs58, %rs59, %rs53};
	bra.uni 	BB0_78;

BB0_77:
	mov.u64 	%rd99, image_RNM1;
	cvta.global.u64 	%rd94, %rd99;
	mov.u32 	%r130, 8;
	// inline asm
	call (%rd93), _rt_buffer_get_64, (%rd94, %r24, %r130, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs64, %f100;}

	// inline asm
	st.v4.u16 	[%rd93], {%rs64, %rs64, %rs64, %rs53};

BB0_78:
	ld.global.u32 	%r131, [additive];
	setp.eq.s32	%p103, %r131, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs65, %f686;}

	// inline asm
	@%p103 bra 	BB0_80;

	mov.u64 	%rd112, image_RNM2;
	cvta.global.u64 	%rd101, %rd112;
	mov.u32 	%r135, 8;
	// inline asm
	call (%rd100), _rt_buffer_get_64, (%rd101, %r24, %r135, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs72, %rs73, %rs74, %rs75}, [%rd100];
	// inline asm
	{  cvt.f32.f16 %f713, %rs72;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f714, %rs73;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f715, %rs74;}

	// inline asm
	// inline asm
	call (%rd106), _rt_buffer_get_64, (%rd101, %r24, %r135, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f716, %f101, %f713;
	add.f32 	%f717, %f101, %f714;
	add.f32 	%f718, %f101, %f715;
	// inline asm
	{  cvt.rn.f16.f32 %rs71, %f718;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs70, %f717;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs69, %f716;}

	// inline asm
	st.v4.u16 	[%rd106], {%rs69, %rs70, %rs71, %rs65};
	bra.uni 	BB0_81;

BB0_80:
	mov.u64 	%rd119, image_RNM2;
	cvta.global.u64 	%rd114, %rd119;
	mov.u32 	%r137, 8;
	// inline asm
	call (%rd113), _rt_buffer_get_64, (%rd114, %r24, %r137, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs76, %f101;}

	// inline asm
	st.v4.u16 	[%rd113], {%rs76, %rs76, %rs76, %rs65};

BB0_81:
	ld.global.u32 	%r138, [additive];
	setp.eq.s32	%p104, %r138, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs77, %f686;}

	// inline asm
	@%p104 bra 	BB0_83;

	mov.u64 	%rd132, image_RNM3;
	cvta.global.u64 	%rd121, %rd132;
	mov.u32 	%r142, 8;
	// inline asm
	call (%rd120), _rt_buffer_get_64, (%rd121, %r24, %r142, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs84, %rs85, %rs86, %rs87}, [%rd120];
	// inline asm
	{  cvt.f32.f16 %f721, %rs84;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f722, %rs85;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f723, %rs86;}

	// inline asm
	// inline asm
	call (%rd126), _rt_buffer_get_64, (%rd121, %r24, %r142, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f724, %f102, %f721;
	add.f32 	%f725, %f102, %f722;
	add.f32 	%f726, %f102, %f723;
	// inline asm
	{  cvt.rn.f16.f32 %rs83, %f726;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs82, %f725;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs81, %f724;}

	// inline asm
	st.v4.u16 	[%rd126], {%rs81, %rs82, %rs83, %rs77};
	bra.uni 	BB0_124;

BB0_83:
	mov.u64 	%rd139, image_RNM3;
	cvta.global.u64 	%rd134, %rd139;
	mov.u32 	%r144, 8;
	// inline asm
	call (%rd133), _rt_buffer_get_64, (%rd134, %r24, %r144, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs88, %f102;}

	// inline asm
	st.v4.u16 	[%rd133], {%rs88, %rs88, %rs88, %rs77};

BB0_124:
	ret;
}


