//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-23083092
// Cuda compilation tools, release 9.1, V9.1.85
// Based on LLVM 3.4svn
//

.version 6.1
.target sm_30
.address_size 64

	// .globl	_Z6oxMainv
.global .align 8 .b8 pixelID[8];
.global .align 8 .b8 resolution[8];
.global .align 4 .b8 normal[12];
.global .align 4 .b8 camPos[12];
.global .align 4 .b8 root[4];
.global .align 4 .u32 imageEnabled;
.global .texref lightmap;
.global .align 16 .b8 tileInfo[16];
.global .align 4 .u32 additive;
.global .align 1 .b8 image[1];
.global .align 1 .b8 image_HDR[1];
.global .align 1 .b8 image_HDR2[1];
.global .align 1 .b8 image_RNM0[1];
.global .align 1 .b8 image_RNM1[1];
.global .align 1 .b8 image_RNM2[1];
.global .align 1 .b8 image_RNM3[1];
.global .align 1 .b8 uvpos[1];
.global .align 1 .b8 uvnormal[1];
.global .align 1 .b8 rnd_seeds[1];
.global .align 4 .u32 sky;
.global .align 4 .b8 skyColor[12];
.global .align 4 .u32 samples;
.global .align 4 .u32 hemispherical;
.global .align 4 .b8 _ZN21rti_internal_typeinfo7pixelIDE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10resolutionE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6camPosE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4rootE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12imageEnabledE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8tileInfoE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8additiveE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo3skyE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8skyColorE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo7samplesE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo13hemisphericalE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 8 .b8 _ZN21rti_internal_typename7pixelIDE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10resolutionE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6camPosE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 16 .b8 _ZN21rti_internal_typename4rootE[9] = {114, 116, 79, 98, 106, 101, 99, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12imageEnabledE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8tileInfoE[6] = {117, 105, 110, 116, 52, 0};
.global .align 4 .b8 _ZN21rti_internal_typename8additiveE[4] = {105, 110, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename3skyE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8skyColorE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 4 .b8 _ZN21rti_internal_typename7samplesE[4] = {105, 110, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename13hemisphericalE[4] = {105, 110, 116, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum7pixelIDE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10resolutionE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6camPosE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4rootE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12imageEnabledE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8tileInfoE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8additiveE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum3skyE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8skyColorE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum7samplesE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum13hemisphericalE = 4919;
.global .align 16 .b8 _ZN21rti_internal_semantic7pixelIDE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic10resolutionE[12] = {114, 116, 76, 97, 117, 110, 99, 104, 68, 105, 109, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic6normalE[17] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic6camPosE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic4rootE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12imageEnabledE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8tileInfoE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8additiveE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic3skyE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8skyColorE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic7samplesE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic13hemisphericalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7pixelIDE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10resolutionE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6camPosE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4rootE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12imageEnabledE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8tileInfoE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8additiveE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3skyE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8skyColorE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7samplesE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation13hemisphericalE[1];
.const .align 4 .b8 __cudart_i2opi_f[24] = {65, 144, 67, 60, 153, 149, 98, 219, 192, 221, 52, 245, 209, 87, 39, 252, 41, 21, 68, 78, 110, 131, 249, 162};

.visible .entry _Z6oxMainv(

)
{
	.local .align 4 .b8 	__local_depot0[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<107>;
	.reg .b16 	%rs<154>;
	.reg .f32 	%f<893>;
	.reg .b32 	%r<394>;
	.reg .b64 	%rd<288>;


	mov.u64 	%rd287, __local_depot0;
	cvta.local.u64 	%SP, %rd287;
	ld.global.v2.u32 	{%r100, %r101}, [pixelID];
	cvt.u64.u32	%rd22, %r100;
	cvt.u64.u32	%rd23, %r101;
	mov.u64 	%rd26, uvnormal;
	cvta.global.u64 	%rd21, %rd26;
	mov.u32 	%r98, 2;
	mov.u32 	%r99, 4;
	mov.u64 	%rd25, 0;
	// inline asm
	call (%rd20), _rt_buffer_get_64, (%rd21, %r98, %r99, %rd22, %rd23, %rd25, %rd25);
	// inline asm
	ld.u32 	%r1, [%rd20];
	shr.u32 	%r104, %r1, 16;
	cvt.u16.u32	%rs1, %r104;
	and.b16  	%rs7, %rs1, 255;
	cvt.u16.u32	%rs8, %r1;
	or.b16  	%rs9, %rs8, %rs7;
	setp.eq.s16	%p4, %rs9, 0;
	mov.f32 	%f794, 0f00000000;
	mov.f32 	%f795, %f794;
	mov.f32 	%f796, %f794;
	@%p4 bra 	BB0_2;

	ld.u8 	%rs10, [%rd20+1];
	and.b16  	%rs12, %rs8, 255;
	cvt.rn.f32.u16	%f230, %rs12;
	div.rn.f32 	%f231, %f230, 0f437F0000;
	fma.rn.f32 	%f232, %f231, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f233, %rs10;
	div.rn.f32 	%f234, %f233, 0f437F0000;
	fma.rn.f32 	%f235, %f234, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f236, %rs7;
	div.rn.f32 	%f237, %f236, 0f437F0000;
	fma.rn.f32 	%f238, %f237, 0f40000000, 0fBF800000;
	mul.f32 	%f239, %f235, %f235;
	fma.rn.f32 	%f240, %f232, %f232, %f239;
	fma.rn.f32 	%f241, %f238, %f238, %f240;
	sqrt.rn.f32 	%f242, %f241;
	rcp.rn.f32 	%f243, %f242;
	mul.f32 	%f794, %f232, %f243;
	mul.f32 	%f795, %f235, %f243;
	mul.f32 	%f796, %f238, %f243;

BB0_2:
	ld.global.v2.u32 	{%r105, %r106}, [pixelID];
	ld.global.v2.u32 	{%r108, %r109}, [tileInfo];
	add.s32 	%r2, %r105, %r108;
	add.s32 	%r3, %r106, %r109;
	setp.eq.f32	%p5, %f795, 0f00000000;
	setp.eq.f32	%p6, %f794, 0f00000000;
	and.pred  	%p7, %p6, %p5;
	setp.eq.f32	%p8, %f796, 0f00000000;
	and.pred  	%p9, %p7, %p8;
	@%p9 bra 	BB0_109;
	bra.uni 	BB0_3;

BB0_109:
	ld.global.u32 	%r393, [imageEnabled];
	and.b32  	%r298, %r393, 1;
	setp.eq.b32	%p99, %r298, 1;
	@!%p99 bra 	BB0_111;
	bra.uni 	BB0_110;

BB0_110:
	cvt.u64.u32	%rd173, %r3;
	cvt.u64.u32	%rd172, %r2;
	mov.u64 	%rd176, image;
	cvta.global.u64 	%rd171, %rd176;
	mov.u64 	%rd175, 0;
	// inline asm
	call (%rd170), _rt_buffer_get_64, (%rd171, %r98, %r99, %rd172, %rd173, %rd175, %rd175);
	// inline asm
	mov.u16 	%rs88, 0;
	st.v4.u8 	[%rd170], {%rs88, %rs88, %rs88, %rs88};
	ld.global.u32 	%r393, [imageEnabled];

BB0_111:
	cvt.u64.u32	%rd18, %r2;
	cvt.u64.u32	%rd19, %r3;
	and.b32  	%r301, %r393, 4;
	setp.eq.s32	%p100, %r301, 0;
	@%p100 bra 	BB0_115;

	ld.global.u32 	%r302, [additive];
	setp.eq.s32	%p101, %r302, 0;
	@%p101 bra 	BB0_114;

	mov.u64 	%rd189, image_HDR;
	cvta.global.u64 	%rd178, %rd189;
	mov.u32 	%r306, 8;
	mov.u64 	%rd188, 0;
	// inline asm
	call (%rd177), _rt_buffer_get_64, (%rd178, %r98, %r306, %rd18, %rd19, %rd188, %rd188);
	// inline asm
	ld.v4.u16 	{%rs95, %rs96, %rs97, %rs98}, [%rd177];
	// inline asm
	{  cvt.f32.f16 %f737, %rs95;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f738, %rs96;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f739, %rs97;}

	// inline asm
	// inline asm
	call (%rd183), _rt_buffer_get_64, (%rd178, %r98, %r306, %rd18, %rd19, %rd188, %rd188);
	// inline asm
	add.f32 	%f740, %f737, 0f00000000;
	add.f32 	%f741, %f738, 0f00000000;
	add.f32 	%f742, %f739, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs94, %f742;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs93, %f741;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs92, %f740;}

	// inline asm
	mov.u16 	%rs99, 0;
	st.v4.u16 	[%rd183], {%rs92, %rs93, %rs94, %rs99};
	bra.uni 	BB0_115;

BB0_3:
	ld.global.v2.u32 	{%r117, %r118}, [pixelID];
	cvt.u64.u32	%rd29, %r117;
	cvt.u64.u32	%rd30, %r118;
	mov.u64 	%rd39, uvpos;
	cvta.global.u64 	%rd28, %rd39;
	mov.u32 	%r114, 12;
	// inline asm
	call (%rd27), _rt_buffer_get_64, (%rd28, %r98, %r114, %rd29, %rd30, %rd25, %rd25);
	// inline asm
	ld.f32 	%f259, [%rd27+8];
	ld.f32 	%f260, [%rd27+4];
	ld.f32 	%f261, [%rd27];
	mul.f32 	%f262, %f261, 0f3456BF95;
	mul.f32 	%f263, %f260, 0f3456BF95;
	mul.f32 	%f264, %f259, 0f3456BF95;
	abs.f32 	%f265, %f794;
	div.rn.f32 	%f266, %f262, %f265;
	abs.f32 	%f267, %f795;
	div.rn.f32 	%f268, %f263, %f267;
	abs.f32 	%f269, %f796;
	div.rn.f32 	%f270, %f264, %f269;
	abs.f32 	%f271, %f266;
	abs.f32 	%f272, %f268;
	abs.f32 	%f273, %f270;
	mov.f32 	%f274, 0f38D1B717;
	max.f32 	%f275, %f271, %f274;
	max.f32 	%f276, %f272, %f274;
	max.f32 	%f277, %f273, %f274;
	fma.rn.f32 	%f7, %f794, %f275, %f261;
	fma.rn.f32 	%f8, %f795, %f276, %f260;
	fma.rn.f32 	%f9, %f796, %f277, %f259;
	ld.global.u32 	%r4, [hemispherical];
	setp.gt.f32	%p10, %f265, %f269;
	neg.f32 	%f278, %f795;
	selp.f32	%f279, %f278, 0f00000000, %p10;
	neg.f32 	%f280, %f796;
	selp.f32	%f281, %f794, %f280, %p10;
	selp.f32	%f282, 0f00000000, %f795, %p10;
	mul.f32 	%f283, %f281, %f281;
	fma.rn.f32 	%f284, %f279, %f279, %f283;
	fma.rn.f32 	%f285, %f282, %f282, %f284;
	sqrt.rn.f32 	%f286, %f285;
	rcp.rn.f32 	%f287, %f286;
	mul.f32 	%f10, %f279, %f287;
	mul.f32 	%f11, %f281, %f287;
	mul.f32 	%f12, %f282, %f287;
	ld.global.v2.u32 	{%r121, %r122}, [pixelID];
	cvt.u64.u32	%rd35, %r121;
	cvt.u64.u32	%rd36, %r122;
	mov.u64 	%rd40, rnd_seeds;
	cvta.global.u64 	%rd34, %rd40;
	// inline asm
	call (%rd33), _rt_buffer_get_64, (%rd34, %r98, %r99, %rd35, %rd36, %rd25, %rd25);
	// inline asm
	ld.global.u32 	%r388, [samples];
	mov.f32 	%f853, 0f00000000;
	setp.lt.s32	%p11, %r388, 1;
	@%p11 bra 	BB0_4;

	cvt.rn.f32.s32	%f303, %r388;
	rcp.rn.f32 	%f13, %f303;
	ld.u32 	%r390, [%rd33];
	mul.f32 	%f14, %f7, 0f3456BF95;
	mul.f32 	%f15, %f8, 0f3456BF95;
	mul.f32 	%f16, %f9, 0f3456BF95;
	mul.f32 	%f304, %f794, %f11;
	mul.f32 	%f305, %f795, %f10;
	sub.f32 	%f17, %f305, %f304;
	mul.f32 	%f306, %f796, %f10;
	mul.f32 	%f307, %f794, %f12;
	sub.f32 	%f18, %f307, %f306;
	mul.f32 	%f308, %f795, %f12;
	mul.f32 	%f309, %f796, %f11;
	sub.f32 	%f19, %f309, %f308;
	mov.f32 	%f853, 0f00000000;
	mov.u32 	%r363, 0;
	abs.f32 	%f391, %f15;
	abs.f32 	%f392, %f14;
	max.f32 	%f393, %f392, %f391;
	abs.f32 	%f394, %f16;
	max.f32 	%f395, %f393, %f394;
	mov.f32 	%f852, %f853;
	mov.f32 	%f851, %f853;
	mov.f32 	%f850, %f853;
	mov.f32 	%f849, %f853;
	mov.f32 	%f848, %f853;
	mov.f32 	%f847, %f853;
	mov.f32 	%f846, %f853;
	mov.f32 	%f845, %f853;
	mov.f32 	%f844, %f853;
	mov.f32 	%f843, %f853;
	mov.f32 	%f842, %f853;
	mov.f32 	%f841, %f853;
	mov.f32 	%f840, %f853;
	mov.f32 	%f839, %f853;

BB0_6:
	setp.lt.s32	%p12, %r388, 1;
	@%p12 bra 	BB0_57;

	mov.u32 	%r366, 0;

BB0_8:
	cvt.rn.f32.s32	%f778, %r363;
	mad.lo.s32 	%r127, %r390, 1664525, 1013904223;
	and.b32  	%r128, %r127, 16777215;
	cvt.rn.f32.u32	%f310, %r128;
	fma.rn.f32 	%f311, %f310, 0f33800000, %f778;
	mul.f32 	%f312, %f13, %f311;
	mad.lo.s32 	%r13, %r127, 1664525, 1013904223;
	and.b32  	%r129, %r13, 16777215;
	cvt.rn.f32.u32	%f313, %r129;
	cvt.rn.f32.s32	%f314, %r366;
	fma.rn.f32 	%f315, %f313, 0f33800000, %f314;
	mul.f32 	%f316, %f13, %f315;
	fma.rn.f32 	%f51, %f312, 0fC0000000, 0f3F800000;
	mul.f32 	%f317, %f51, %f51;
	mov.f32 	%f318, 0f3F800000;
	sub.f32 	%f319, %f318, %f317;
	mov.f32 	%f320, 0f00000000;
	max.f32 	%f321, %f320, %f319;
	sqrt.rn.f32 	%f52, %f321;
	mul.f32 	%f833, %f316, 0f40C90FDB;
	abs.f32 	%f54, %f833;
	setp.neu.f32	%p13, %f54, 0f7F800000;
	mov.f32 	%f827, %f833;
	@%p13 bra 	BB0_10;

	mul.rn.f32 	%f827, %f833, %f320;

BB0_10:
	mul.f32 	%f323, %f827, 0f3F22F983;
	cvt.rni.s32.f32	%r377, %f323;
	cvt.rn.f32.s32	%f324, %r377;
	neg.f32 	%f325, %f324;
	mov.f32 	%f326, 0f3FC90FDA;
	fma.rn.f32 	%f327, %f325, %f326, %f827;
	mov.f32 	%f328, 0f33A22168;
	fma.rn.f32 	%f329, %f325, %f328, %f327;
	mov.f32 	%f330, 0f27C234C5;
	fma.rn.f32 	%f828, %f325, %f330, %f329;
	abs.f32 	%f331, %f827;
	setp.leu.f32	%p14, %f331, 0f47CE4780;
	@%p14 bra 	BB0_21;

	add.u64 	%rd42, %SP, 12;
	cvta.to.local.u64 	%rd283, %rd42;
	mov.u32 	%r368, 0;
	mov.u64 	%rd284, 0;
	mov.u32 	%r369, %r368;

BB0_12:
	.pragma "nounroll";
	mov.b32 	 %r339, %f827;
	shl.b32 	%r338, %r339, 8;
	or.b32  	%r337, %r338, -2147483648;
	add.u64 	%rd278, %SP, 12;
	cvta.to.local.u64 	%rd277, %rd278;
	shl.b64 	%rd43, %rd284, 2;
	mov.u64 	%rd44, __cudart_i2opi_f;
	add.s64 	%rd45, %rd44, %rd43;
	ld.const.u32 	%r135, [%rd45];
	// inline asm
	{
	mad.lo.cc.u32   %r133, %r135, %r337, %r369;
	madc.hi.u32     %r369, %r135, %r337,  0;
	}
	// inline asm
	st.local.u32 	[%rd283], %r133;
	add.s32 	%r368, %r368, 1;
	cvt.s64.s32	%rd284, %r368;
	mul.wide.s32 	%rd48, %r368, 4;
	add.s64 	%rd283, %rd277, %rd48;
	setp.ne.s32	%p15, %r368, 6;
	@%p15 bra 	BB0_12;

	mov.b32 	 %r341, %f827;
	shr.u32 	%r340, %r341, 23;
	add.u64 	%rd279, %SP, 12;
	and.b32  	%r138, %r340, 255;
	add.s32 	%r139, %r138, -128;
	shr.u32 	%r140, %r139, 5;
	cvta.to.local.u64 	%rd50, %rd279;
	st.local.u32 	[%rd50+24], %r369;
	mov.u32 	%r141, 6;
	sub.s32 	%r142, %r141, %r140;
	mul.wide.s32 	%rd51, %r142, 4;
	add.s64 	%rd8, %rd50, %rd51;
	ld.local.u32 	%r370, [%rd8];
	ld.local.u32 	%r371, [%rd8+-4];
	and.b32  	%r25, %r340, 31;
	setp.eq.s32	%p16, %r25, 0;
	@%p16 bra 	BB0_15;

	mov.u32 	%r143, 32;
	sub.s32 	%r144, %r143, %r25;
	shr.u32 	%r145, %r371, %r144;
	shl.b32 	%r146, %r370, %r25;
	add.s32 	%r370, %r145, %r146;
	ld.local.u32 	%r147, [%rd8+-8];
	shr.u32 	%r148, %r147, %r144;
	shl.b32 	%r149, %r371, %r25;
	add.s32 	%r371, %r148, %r149;

BB0_15:
	mov.b32 	 %r347, %f827;
	and.b32  	%r373, %r347, -2147483648;
	shr.u32 	%r150, %r371, 30;
	shl.b32 	%r151, %r370, 2;
	add.s32 	%r372, %r150, %r151;
	shl.b32 	%r31, %r371, 2;
	shr.u32 	%r152, %r372, 31;
	shr.u32 	%r153, %r370, 30;
	add.s32 	%r32, %r152, %r153;
	setp.eq.s32	%p17, %r152, 0;
	@%p17 bra 	BB0_16;
	bra.uni 	BB0_17;

BB0_16:
	mov.u32 	%r374, %r31;
	bra.uni 	BB0_18;

BB0_17:
	mov.b32 	 %r349, %f827;
	and.b32  	%r348, %r349, -2147483648;
	not.b32 	%r154, %r372;
	neg.s32 	%r374, %r31;
	setp.eq.s32	%p18, %r31, 0;
	selp.u32	%r155, 1, 0, %p18;
	add.s32 	%r372, %r155, %r154;
	xor.b32  	%r373, %r348, -2147483648;

BB0_18:
	mov.b32 	 %r351, %f827;
	and.b32  	%r350, %r351, -2147483648;
	clz.b32 	%r376, %r372;
	setp.eq.s32	%p19, %r376, 0;
	shl.b32 	%r156, %r372, %r376;
	mov.u32 	%r157, 32;
	sub.s32 	%r158, %r157, %r376;
	shr.u32 	%r159, %r374, %r158;
	add.s32 	%r160, %r159, %r156;
	selp.b32	%r40, %r372, %r160, %p19;
	mov.u32 	%r161, -921707870;
	mul.hi.u32 	%r375, %r40, %r161;
	setp.eq.s32	%p20, %r350, 0;
	neg.s32 	%r162, %r32;
	selp.b32	%r377, %r32, %r162, %p20;
	setp.lt.s32	%p21, %r375, 1;
	@%p21 bra 	BB0_20;

	mul.lo.s32 	%r163, %r40, -921707870;
	shr.u32 	%r164, %r163, 31;
	shl.b32 	%r165, %r375, 1;
	add.s32 	%r375, %r164, %r165;
	add.s32 	%r376, %r376, 1;

BB0_20:
	mov.u32 	%r166, 126;
	sub.s32 	%r167, %r166, %r376;
	shl.b32 	%r168, %r167, 23;
	add.s32 	%r169, %r375, 1;
	shr.u32 	%r170, %r169, 7;
	add.s32 	%r171, %r170, 1;
	shr.u32 	%r172, %r171, 1;
	add.s32 	%r173, %r172, %r168;
	or.b32  	%r174, %r173, %r373;
	mov.b32 	 %f828, %r174;

BB0_21:
	add.s32 	%r48, %r377, 1;
	and.b32  	%r49, %r48, 1;
	setp.eq.s32	%p22, %r49, 0;
	@%p22 bra 	BB0_23;
	bra.uni 	BB0_22;

BB0_23:
	mul.rn.f32 	%f788, %f828, %f828;
	mov.f32 	%f334, 0f3C08839E;
	mov.f32 	%f335, 0fB94CA1F9;
	fma.rn.f32 	%f829, %f335, %f788, %f334;
	bra.uni 	BB0_24;

BB0_22:
	mul.rn.f32 	%f784, %f828, %f828;
	mov.f32 	%f332, 0fBAB6061A;
	mov.f32 	%f333, 0f37CCF5CE;
	fma.rn.f32 	%f829, %f333, %f784, %f332;

BB0_24:
	@%p22 bra 	BB0_26;
	bra.uni 	BB0_25;

BB0_26:
	mul.rn.f32 	%f787, %f828, %f828;
	mov.f32 	%f783, 0f00000000;
	mov.f32 	%f339, 0fBE2AAAA3;
	fma.rn.f32 	%f340, %f829, %f787, %f339;
	fma.rn.f32 	%f830, %f340, %f787, %f783;
	bra.uni 	BB0_27;

BB0_25:
	mul.rn.f32 	%f785, %f828, %f828;
	mov.f32 	%f336, 0f3D2AAAA5;
	fma.rn.f32 	%f337, %f829, %f785, %f336;
	mov.f32 	%f338, 0fBF000000;
	fma.rn.f32 	%f830, %f337, %f785, %f338;

BB0_27:
	fma.rn.f32 	%f831, %f830, %f828, %f828;
	@%p22 bra 	BB0_29;

	mul.rn.f32 	%f786, %f828, %f828;
	mov.f32 	%f772, 0f3F800000;
	fma.rn.f32 	%f831, %f830, %f786, %f772;

BB0_29:
	add.s32 	%r352, %r377, 1;
	and.b32  	%r175, %r352, 2;
	setp.eq.s32	%p25, %r175, 0;
	@%p25 bra 	BB0_31;

	mov.f32 	%f779, 0f00000000;
	mov.f32 	%f344, 0fBF800000;
	fma.rn.f32 	%f831, %f831, %f344, %f779;

BB0_31:
	abs.f32 	%f773, %f833;
	setp.neu.f32	%p106, %f773, 0f7F800000;
	@%p106 bra 	BB0_33;

	mov.f32 	%f782, 0f00000000;
	mul.rn.f32 	%f833, %f833, %f782;

BB0_33:
	mov.f32 	%f776, 0f27C234C5;
	mov.f32 	%f775, 0f33A22168;
	mov.f32 	%f774, 0f3FC90FDA;
	mul.f32 	%f346, %f833, 0f3F22F983;
	cvt.rni.s32.f32	%r387, %f346;
	cvt.rn.f32.s32	%f347, %r387;
	neg.f32 	%f348, %f347;
	fma.rn.f32 	%f350, %f348, %f774, %f833;
	fma.rn.f32 	%f352, %f348, %f775, %f350;
	fma.rn.f32 	%f834, %f348, %f776, %f352;
	abs.f32 	%f354, %f833;
	setp.leu.f32	%p27, %f354, 0f47CE4780;
	@%p27 bra 	BB0_44;

	add.u64 	%rd53, %SP, 12;
	cvta.to.local.u64 	%rd285, %rd53;
	mov.b32 	 %r51, %f833;
	shl.b32 	%r178, %r51, 8;
	or.b32  	%r53, %r178, -2147483648;
	mov.u32 	%r378, 0;
	mov.u64 	%rd286, %rd25;
	mov.u32 	%r379, %r378;

BB0_35:
	.pragma "nounroll";
	add.u64 	%rd281, %SP, 12;
	cvta.to.local.u64 	%rd280, %rd281;
	shl.b64 	%rd54, %rd286, 2;
	mov.u64 	%rd55, __cudart_i2opi_f;
	add.s64 	%rd56, %rd55, %rd54;
	ld.const.u32 	%r181, [%rd56];
	// inline asm
	{
	mad.lo.cc.u32   %r179, %r181, %r53, %r379;
	madc.hi.u32     %r379, %r181, %r53,  0;
	}
	// inline asm
	st.local.u32 	[%rd285], %r179;
	add.s32 	%r378, %r378, 1;
	cvt.s64.s32	%rd286, %r378;
	mul.wide.s32 	%rd57, %r378, 4;
	add.s64 	%rd285, %rd280, %rd57;
	setp.ne.s32	%p28, %r378, 6;
	@%p28 bra 	BB0_35;

	mov.b32 	 %r354, %f833;
	shr.u32 	%r353, %r354, 23;
	add.u64 	%rd282, %SP, 12;
	and.b32  	%r184, %r353, 255;
	add.s32 	%r185, %r184, -128;
	shr.u32 	%r186, %r185, 5;
	cvta.to.local.u64 	%rd59, %rd282;
	st.local.u32 	[%rd59+24], %r379;
	mov.u32 	%r187, 6;
	sub.s32 	%r188, %r187, %r186;
	mul.wide.s32 	%rd60, %r188, 4;
	add.s64 	%rd15, %rd59, %rd60;
	ld.local.u32 	%r380, [%rd15];
	ld.local.u32 	%r381, [%rd15+-4];
	and.b32  	%r61, %r353, 31;
	setp.eq.s32	%p29, %r61, 0;
	@%p29 bra 	BB0_38;

	mov.u32 	%r189, 32;
	sub.s32 	%r190, %r189, %r61;
	shr.u32 	%r191, %r381, %r190;
	shl.b32 	%r192, %r380, %r61;
	add.s32 	%r380, %r191, %r192;
	ld.local.u32 	%r193, [%rd15+-8];
	shr.u32 	%r194, %r193, %r190;
	shl.b32 	%r195, %r381, %r61;
	add.s32 	%r381, %r194, %r195;

BB0_38:
	mov.b32 	 %r357, %f833;
	and.b32  	%r383, %r357, -2147483648;
	shr.u32 	%r196, %r381, 30;
	shl.b32 	%r197, %r380, 2;
	add.s32 	%r382, %r196, %r197;
	shl.b32 	%r67, %r381, 2;
	shr.u32 	%r198, %r382, 31;
	shr.u32 	%r199, %r380, 30;
	add.s32 	%r68, %r198, %r199;
	setp.eq.s32	%p30, %r198, 0;
	@%p30 bra 	BB0_39;
	bra.uni 	BB0_40;

BB0_39:
	mov.u32 	%r384, %r67;
	bra.uni 	BB0_41;

BB0_40:
	mov.b32 	 %r359, %f833;
	and.b32  	%r358, %r359, -2147483648;
	not.b32 	%r200, %r382;
	neg.s32 	%r384, %r67;
	setp.eq.s32	%p31, %r67, 0;
	selp.u32	%r201, 1, 0, %p31;
	add.s32 	%r382, %r201, %r200;
	xor.b32  	%r383, %r358, -2147483648;

BB0_41:
	mov.b32 	 %r361, %f833;
	and.b32  	%r360, %r361, -2147483648;
	clz.b32 	%r386, %r382;
	setp.eq.s32	%p32, %r386, 0;
	shl.b32 	%r202, %r382, %r386;
	mov.u32 	%r203, 32;
	sub.s32 	%r204, %r203, %r386;
	shr.u32 	%r205, %r384, %r204;
	add.s32 	%r206, %r205, %r202;
	selp.b32	%r76, %r382, %r206, %p32;
	mov.u32 	%r207, -921707870;
	mul.hi.u32 	%r385, %r76, %r207;
	setp.eq.s32	%p33, %r360, 0;
	neg.s32 	%r208, %r68;
	selp.b32	%r387, %r68, %r208, %p33;
	setp.lt.s32	%p34, %r385, 1;
	@%p34 bra 	BB0_43;

	mul.lo.s32 	%r209, %r76, -921707870;
	shr.u32 	%r210, %r209, 31;
	shl.b32 	%r211, %r385, 1;
	add.s32 	%r385, %r210, %r211;
	add.s32 	%r386, %r386, 1;

BB0_43:
	mov.u32 	%r212, 126;
	sub.s32 	%r213, %r212, %r386;
	shl.b32 	%r214, %r213, 23;
	add.s32 	%r215, %r385, 1;
	shr.u32 	%r216, %r215, 7;
	add.s32 	%r217, %r216, 1;
	shr.u32 	%r218, %r217, 1;
	add.s32 	%r219, %r218, %r214;
	or.b32  	%r220, %r219, %r383;
	mov.b32 	 %f834, %r220;

BB0_44:
	and.b32  	%r84, %r387, 1;
	setp.eq.s32	%p35, %r84, 0;
	@%p35 bra 	BB0_46;
	bra.uni 	BB0_45;

BB0_46:
	mul.rn.f32 	%f793, %f834, %f834;
	mov.f32 	%f357, 0f3C08839E;
	mov.f32 	%f358, 0fB94CA1F9;
	fma.rn.f32 	%f835, %f358, %f793, %f357;
	bra.uni 	BB0_47;

BB0_45:
	mul.rn.f32 	%f789, %f834, %f834;
	mov.f32 	%f355, 0fBAB6061A;
	mov.f32 	%f356, 0f37CCF5CE;
	fma.rn.f32 	%f835, %f356, %f789, %f355;

BB0_47:
	@%p35 bra 	BB0_49;
	bra.uni 	BB0_48;

BB0_49:
	mul.rn.f32 	%f792, %f834, %f834;
	mov.f32 	%f781, 0f00000000;
	mov.f32 	%f362, 0fBE2AAAA3;
	fma.rn.f32 	%f363, %f835, %f792, %f362;
	fma.rn.f32 	%f836, %f363, %f792, %f781;
	bra.uni 	BB0_50;

BB0_48:
	mul.rn.f32 	%f790, %f834, %f834;
	mov.f32 	%f359, 0f3D2AAAA5;
	fma.rn.f32 	%f360, %f835, %f790, %f359;
	mov.f32 	%f361, 0fBF000000;
	fma.rn.f32 	%f836, %f360, %f790, %f361;

BB0_50:
	fma.rn.f32 	%f837, %f836, %f834, %f834;
	@%p35 bra 	BB0_52;

	mul.rn.f32 	%f791, %f834, %f834;
	mov.f32 	%f777, 0f3F800000;
	fma.rn.f32 	%f837, %f836, %f791, %f777;

BB0_52:
	and.b32  	%r221, %r387, 2;
	setp.eq.s32	%p38, %r221, 0;
	@%p38 bra 	BB0_54;

	mov.f32 	%f780, 0f00000000;
	mov.f32 	%f367, 0fBF800000;
	fma.rn.f32 	%f837, %f837, %f367, %f780;

BB0_54:
	mul.f32 	%f368, %f52, %f831;
	mul.f32 	%f369, %f52, %f837;
	mul.f32 	%f370, %f10, %f369;
	mul.f32 	%f371, %f11, %f369;
	mul.f32 	%f372, %f12, %f369;
	fma.rn.f32 	%f373, %f19, %f368, %f370;
	fma.rn.f32 	%f374, %f18, %f368, %f371;
	fma.rn.f32 	%f375, %f17, %f368, %f372;
	fma.rn.f32 	%f89, %f794, %f51, %f373;
	fma.rn.f32 	%f90, %f795, %f51, %f374;
	fma.rn.f32 	%f91, %f796, %f51, %f375;
	setp.gt.f32	%p39, %f90, 0f00000000;
	setp.eq.s32	%p40, %r4, 0;
	or.pred  	%p41, %p40, %p39;
	@!%p41 bra 	BB0_56;
	bra.uni 	BB0_55;

BB0_55:
	add.u64 	%rd61, %SP, 0;
	cvta.to.local.u64 	%rd62, %rd61;
	max.f32 	%f389, %f395, %f274;
	ld.global.u32 	%r222, [sky];
	neg.f32 	%f382, %f89;
	neg.f32 	%f381, %f90;
	neg.f32 	%f380, %f91;
	mov.u32 	%r223, 6;
	mov.u32 	%r224, 0;
	// inline asm
	call (%f376, %f377, %f378, %f379), _rt_texture_get_base_id, (%r222, %r223, %f380, %f381, %f382, %r224);
	// inline asm
	st.local.f32 	[%rd62+8], %f378;
	st.local.f32 	[%rd62+4], %f377;
	st.local.f32 	[%rd62], %f376;
	ld.global.u32 	%r225, [root];
	mov.u32 	%r226, 1;
	mov.f32 	%f390, 0f6C4ECB8F;
	// inline asm
	call _rt_trace_64, (%r225, %f7, %f8, %f9, %f89, %f90, %f91, %r226, %f389, %f390, %rd61, %r114);
	// inline asm
	mul.f32 	%f397, %f795, %f90;
	fma.rn.f32 	%f398, %f794, %f89, %f397;
	fma.rn.f32 	%f399, %f796, %f91, %f398;
	ld.local.f32 	%f400, [%rd62+8];
	ld.local.f32 	%f401, [%rd62+4];
	ld.local.f32 	%f402, [%rd62];
	fma.rn.f32 	%f845, %f89, %f402, %f845;
	fma.rn.f32 	%f846, %f89, %f401, %f846;
	fma.rn.f32 	%f847, %f89, %f400, %f847;
	fma.rn.f32 	%f842, %f90, %f402, %f842;
	fma.rn.f32 	%f843, %f90, %f401, %f843;
	fma.rn.f32 	%f844, %f90, %f400, %f844;
	fma.rn.f32 	%f839, %f91, %f402, %f839;
	fma.rn.f32 	%f840, %f91, %f401, %f840;
	fma.rn.f32 	%f841, %f91, %f400, %f841;
	add.f32 	%f848, %f848, %f402;
	add.f32 	%f849, %f849, %f401;
	add.f32 	%f850, %f850, %f400;
	cvt.sat.f32.f32	%f403, %f399;
	fma.rn.f32 	%f851, %f403, %f402, %f851;
	fma.rn.f32 	%f852, %f403, %f401, %f852;
	fma.rn.f32 	%f853, %f403, %f400, %f853;
	ld.global.u32 	%r388, [samples];

BB0_56:
	mad.lo.s32 	%r344, %r390, 1664525, 1013904223;
	mad.lo.s32 	%r390, %r344, 1664525, 1013904223;
	add.s32 	%r366, %r366, 1;
	setp.lt.s32	%p42, %r366, %r388;
	@%p42 bra 	BB0_8;

BB0_57:
	add.s32 	%r363, %r363, 1;
	setp.lt.s32	%p43, %r363, %r388;
	@%p43 bra 	BB0_6;
	bra.uni 	BB0_58;

BB0_4:
	mov.f32 	%f852, %f853;
	mov.f32 	%f851, %f853;
	mov.f32 	%f850, %f853;
	mov.f32 	%f849, %f853;
	mov.f32 	%f848, %f853;
	mov.f32 	%f847, %f853;
	mov.f32 	%f846, %f853;
	mov.f32 	%f845, %f853;
	mov.f32 	%f844, %f853;
	mov.f32 	%f843, %f853;
	mov.f32 	%f842, %f853;
	mov.f32 	%f841, %f853;
	mov.f32 	%f840, %f853;
	mov.f32 	%f839, %f853;

BB0_58:
	mul.lo.s32 	%r228, %r388, %r388;
	cvt.rn.f32.s32	%f404, %r228;
	rcp.rn.f32 	%f405, %f404;
	mul.f32 	%f406, %f851, %f405;
	mul.f32 	%f407, %f852, %f405;
	mul.f32 	%f408, %f853, %f405;
	mul.f32 	%f152, %f848, %f405;
	mul.f32 	%f153, %f849, %f405;
	mul.f32 	%f154, %f850, %f405;
	mul.f32 	%f155, %f845, %f405;
	mul.f32 	%f156, %f846, %f405;
	mul.f32 	%f157, %f847, %f405;
	mul.f32 	%f158, %f842, %f405;
	mul.f32 	%f159, %f843, %f405;
	mul.f32 	%f160, %f844, %f405;
	mul.f32 	%f161, %f839, %f405;
	mul.f32 	%f162, %f840, %f405;
	mul.f32 	%f163, %f841, %f405;
	fma.rn.f32 	%f409, %f851, %f405, %f406;
	fma.rn.f32 	%f410, %f852, %f405, %f407;
	fma.rn.f32 	%f411, %f853, %f405, %f408;
	ld.global.f32 	%f412, [skyColor];
	mul.f32 	%f164, %f409, %f412;
	ld.global.f32 	%f413, [skyColor+4];
	mul.f32 	%f165, %f410, %f413;
	ld.global.f32 	%f414, [skyColor+8];
	mul.f32 	%f166, %f411, %f414;
	ld.global.u32 	%r392, [imageEnabled];
	and.b32  	%r229, %r392, 1;
	setp.eq.b32	%p44, %r229, 1;
	@!%p44 bra 	BB0_93;
	bra.uni 	BB0_59;

BB0_59:
	mov.f32 	%f417, 0f3E666666;
	cvt.rzi.f32.f32	%f418, %f417;
	fma.rn.f32 	%f419, %f418, 0fC0000000, 0f3EE66666;
	abs.f32 	%f167, %f419;
	abs.f32 	%f168, %f164;
	setp.lt.f32	%p45, %f168, 0f00800000;
	mul.f32 	%f420, %f168, 0f4B800000;
	selp.f32	%f421, 0fC3170000, 0fC2FE0000, %p45;
	selp.f32	%f422, %f420, %f168, %p45;
	mov.b32 	 %r230, %f422;
	and.b32  	%r231, %r230, 8388607;
	or.b32  	%r232, %r231, 1065353216;
	mov.b32 	 %f423, %r232;
	shr.u32 	%r233, %r230, 23;
	cvt.rn.f32.u32	%f424, %r233;
	add.f32 	%f425, %f421, %f424;
	setp.gt.f32	%p46, %f423, 0f3FB504F3;
	mul.f32 	%f426, %f423, 0f3F000000;
	add.f32 	%f427, %f425, 0f3F800000;
	selp.f32	%f428, %f426, %f423, %p46;
	selp.f32	%f429, %f427, %f425, %p46;
	add.f32 	%f430, %f428, 0fBF800000;
	add.f32 	%f416, %f428, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f415,%f416;
	// inline asm
	add.f32 	%f431, %f430, %f430;
	mul.f32 	%f432, %f415, %f431;
	mul.f32 	%f433, %f432, %f432;
	mov.f32 	%f434, 0f3C4CAF63;
	mov.f32 	%f435, 0f3B18F0FE;
	fma.rn.f32 	%f436, %f435, %f433, %f434;
	mov.f32 	%f437, 0f3DAAAABD;
	fma.rn.f32 	%f438, %f436, %f433, %f437;
	mul.rn.f32 	%f439, %f438, %f433;
	mul.rn.f32 	%f440, %f439, %f432;
	sub.f32 	%f441, %f430, %f432;
	neg.f32 	%f442, %f432;
	add.f32 	%f443, %f441, %f441;
	fma.rn.f32 	%f444, %f442, %f430, %f443;
	mul.rn.f32 	%f445, %f415, %f444;
	add.f32 	%f446, %f440, %f432;
	sub.f32 	%f447, %f432, %f446;
	add.f32 	%f448, %f440, %f447;
	add.f32 	%f449, %f445, %f448;
	add.f32 	%f450, %f446, %f449;
	sub.f32 	%f451, %f446, %f450;
	add.f32 	%f452, %f449, %f451;
	mov.f32 	%f453, 0f3F317200;
	mul.rn.f32 	%f454, %f429, %f453;
	mov.f32 	%f455, 0f35BFBE8E;
	mul.rn.f32 	%f456, %f429, %f455;
	add.f32 	%f457, %f454, %f450;
	sub.f32 	%f458, %f454, %f457;
	add.f32 	%f459, %f450, %f458;
	add.f32 	%f460, %f452, %f459;
	add.f32 	%f461, %f456, %f460;
	add.f32 	%f462, %f457, %f461;
	sub.f32 	%f463, %f457, %f462;
	add.f32 	%f464, %f461, %f463;
	mov.f32 	%f465, 0f3EE66666;
	mul.rn.f32 	%f466, %f465, %f462;
	neg.f32 	%f467, %f466;
	fma.rn.f32 	%f468, %f465, %f462, %f467;
	fma.rn.f32 	%f469, %f465, %f464, %f468;
	mov.f32 	%f470, 0f00000000;
	fma.rn.f32 	%f471, %f470, %f462, %f469;
	add.rn.f32 	%f472, %f466, %f471;
	neg.f32 	%f473, %f472;
	add.rn.f32 	%f474, %f466, %f473;
	add.rn.f32 	%f475, %f474, %f471;
	mov.b32 	 %r234, %f472;
	setp.eq.s32	%p47, %r234, 1118925336;
	add.s32 	%r235, %r234, -1;
	mov.b32 	 %f476, %r235;
	add.f32 	%f477, %f475, 0f37000000;
	selp.f32	%f478, %f476, %f472, %p47;
	selp.f32	%f169, %f477, %f475, %p47;
	mul.f32 	%f479, %f478, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f480, %f479;
	mov.f32 	%f481, 0fBF317200;
	fma.rn.f32 	%f482, %f480, %f481, %f478;
	mov.f32 	%f483, 0fB5BFBE8E;
	fma.rn.f32 	%f484, %f480, %f483, %f482;
	mul.f32 	%f485, %f484, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f486, %f485;
	add.f32 	%f487, %f480, 0f00000000;
	ex2.approx.f32 	%f488, %f487;
	mul.f32 	%f489, %f486, %f488;
	setp.lt.f32	%p48, %f478, 0fC2D20000;
	selp.f32	%f490, 0f00000000, %f489, %p48;
	setp.gt.f32	%p49, %f478, 0f42D20000;
	selp.f32	%f884, 0f7F800000, %f490, %p49;
	setp.eq.f32	%p50, %f884, 0f7F800000;
	@%p50 bra 	BB0_61;

	fma.rn.f32 	%f884, %f884, %f169, %f884;

BB0_61:
	setp.lt.f32	%p51, %f164, 0f00000000;
	setp.eq.f32	%p52, %f167, 0f3F800000;
	and.pred  	%p1, %p51, %p52;
	mov.b32 	 %r236, %f884;
	xor.b32  	%r237, %r236, -2147483648;
	mov.b32 	 %f491, %r237;
	selp.f32	%f886, %f491, %f884, %p1;
	setp.eq.f32	%p53, %f164, 0f00000000;
	@%p53 bra 	BB0_64;
	bra.uni 	BB0_62;

BB0_64:
	add.f32 	%f494, %f164, %f164;
	selp.f32	%f886, %f494, 0f00000000, %p52;
	bra.uni 	BB0_65;

BB0_114:
	mov.u64 	%rd196, image_HDR;
	cvta.global.u64 	%rd191, %rd196;
	mov.u32 	%r308, 8;
	mov.u64 	%rd195, 0;
	// inline asm
	call (%rd190), _rt_buffer_get_64, (%rd191, %r98, %r308, %rd18, %rd19, %rd195, %rd195);
	// inline asm
	mov.f32 	%f743, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs100, %f743;}

	// inline asm
	mov.u16 	%rs101, 0;
	st.v4.u16 	[%rd190], {%rs100, %rs100, %rs100, %rs101};

BB0_115:
	ld.global.u32 	%r309, [additive];
	setp.eq.s32	%p102, %r309, 0;
	@%p102 bra 	BB0_117;

	mov.u64 	%rd209, image_RNM0;
	cvta.global.u64 	%rd198, %rd209;
	mov.u32 	%r313, 8;
	mov.u64 	%rd208, 0;
	// inline asm
	call (%rd197), _rt_buffer_get_64, (%rd198, %r98, %r313, %rd18, %rd19, %rd208, %rd208);
	// inline asm
	ld.v4.u16 	{%rs108, %rs109, %rs110, %rs111}, [%rd197];
	// inline asm
	{  cvt.f32.f16 %f744, %rs108;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f745, %rs109;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f746, %rs110;}

	// inline asm
	// inline asm
	call (%rd203), _rt_buffer_get_64, (%rd198, %r98, %r313, %rd18, %rd19, %rd208, %rd208);
	// inline asm
	add.f32 	%f747, %f744, 0f00000000;
	add.f32 	%f748, %f745, 0f00000000;
	add.f32 	%f749, %f746, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs107, %f749;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs106, %f748;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs105, %f747;}

	// inline asm
	mov.u16 	%rs112, 0;
	st.v4.u16 	[%rd203], {%rs105, %rs106, %rs107, %rs112};
	bra.uni 	BB0_118;

BB0_117:
	mov.u64 	%rd216, image_RNM0;
	cvta.global.u64 	%rd211, %rd216;
	mov.u32 	%r315, 8;
	mov.u64 	%rd215, 0;
	// inline asm
	call (%rd210), _rt_buffer_get_64, (%rd211, %r98, %r315, %rd18, %rd19, %rd215, %rd215);
	// inline asm
	mov.f32 	%f750, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs113, %f750;}

	// inline asm
	mov.u16 	%rs114, 0;
	st.v4.u16 	[%rd210], {%rs113, %rs113, %rs113, %rs114};

BB0_118:
	ld.global.u32 	%r316, [additive];
	setp.eq.s32	%p103, %r316, 0;
	@%p103 bra 	BB0_120;

	mov.u64 	%rd229, image_RNM1;
	cvta.global.u64 	%rd218, %rd229;
	mov.u32 	%r320, 8;
	mov.u64 	%rd228, 0;
	// inline asm
	call (%rd217), _rt_buffer_get_64, (%rd218, %r98, %r320, %rd18, %rd19, %rd228, %rd228);
	// inline asm
	ld.v4.u16 	{%rs121, %rs122, %rs123, %rs124}, [%rd217];
	// inline asm
	{  cvt.f32.f16 %f751, %rs121;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f752, %rs122;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f753, %rs123;}

	// inline asm
	// inline asm
	call (%rd223), _rt_buffer_get_64, (%rd218, %r98, %r320, %rd18, %rd19, %rd228, %rd228);
	// inline asm
	add.f32 	%f754, %f751, 0f00000000;
	add.f32 	%f755, %f752, 0f00000000;
	add.f32 	%f756, %f753, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs120, %f756;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs119, %f755;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs118, %f754;}

	// inline asm
	mov.u16 	%rs125, 0;
	st.v4.u16 	[%rd223], {%rs118, %rs119, %rs120, %rs125};
	bra.uni 	BB0_121;

BB0_120:
	mov.u64 	%rd236, image_RNM1;
	cvta.global.u64 	%rd231, %rd236;
	mov.u32 	%r322, 8;
	mov.u64 	%rd235, 0;
	// inline asm
	call (%rd230), _rt_buffer_get_64, (%rd231, %r98, %r322, %rd18, %rd19, %rd235, %rd235);
	// inline asm
	mov.f32 	%f757, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs126, %f757;}

	// inline asm
	mov.u16 	%rs127, 0;
	st.v4.u16 	[%rd230], {%rs126, %rs126, %rs126, %rs127};

BB0_121:
	ld.global.u32 	%r323, [additive];
	setp.eq.s32	%p104, %r323, 0;
	@%p104 bra 	BB0_123;

	mov.u64 	%rd249, image_RNM2;
	cvta.global.u64 	%rd238, %rd249;
	mov.u32 	%r327, 8;
	mov.u64 	%rd248, 0;
	// inline asm
	call (%rd237), _rt_buffer_get_64, (%rd238, %r98, %r327, %rd18, %rd19, %rd248, %rd248);
	// inline asm
	ld.v4.u16 	{%rs134, %rs135, %rs136, %rs137}, [%rd237];
	// inline asm
	{  cvt.f32.f16 %f758, %rs134;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f759, %rs135;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f760, %rs136;}

	// inline asm
	// inline asm
	call (%rd243), _rt_buffer_get_64, (%rd238, %r98, %r327, %rd18, %rd19, %rd248, %rd248);
	// inline asm
	add.f32 	%f761, %f758, 0f00000000;
	add.f32 	%f762, %f759, 0f00000000;
	add.f32 	%f763, %f760, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs133, %f763;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs132, %f762;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs131, %f761;}

	// inline asm
	mov.u16 	%rs138, 0;
	st.v4.u16 	[%rd243], {%rs131, %rs132, %rs133, %rs138};
	bra.uni 	BB0_124;

BB0_123:
	mov.u64 	%rd256, image_RNM2;
	cvta.global.u64 	%rd251, %rd256;
	mov.u32 	%r329, 8;
	mov.u64 	%rd255, 0;
	// inline asm
	call (%rd250), _rt_buffer_get_64, (%rd251, %r98, %r329, %rd18, %rd19, %rd255, %rd255);
	// inline asm
	mov.f32 	%f764, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs139, %f764;}

	// inline asm
	mov.u16 	%rs140, 0;
	st.v4.u16 	[%rd250], {%rs139, %rs139, %rs139, %rs140};

BB0_124:
	ld.global.u32 	%r330, [additive];
	setp.eq.s32	%p105, %r330, 0;
	@%p105 bra 	BB0_126;

	mov.u64 	%rd269, image_RNM3;
	cvta.global.u64 	%rd258, %rd269;
	mov.u32 	%r334, 8;
	mov.u64 	%rd268, 0;
	// inline asm
	call (%rd257), _rt_buffer_get_64, (%rd258, %r98, %r334, %rd18, %rd19, %rd268, %rd268);
	// inline asm
	ld.v4.u16 	{%rs147, %rs148, %rs149, %rs150}, [%rd257];
	// inline asm
	{  cvt.f32.f16 %f765, %rs147;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f766, %rs148;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f767, %rs149;}

	// inline asm
	// inline asm
	call (%rd263), _rt_buffer_get_64, (%rd258, %r98, %r334, %rd18, %rd19, %rd268, %rd268);
	// inline asm
	add.f32 	%f768, %f765, 0f00000000;
	add.f32 	%f769, %f766, 0f00000000;
	add.f32 	%f770, %f767, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs146, %f770;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs145, %f769;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs144, %f768;}

	// inline asm
	mov.u16 	%rs151, 0;
	st.v4.u16 	[%rd263], {%rs144, %rs145, %rs146, %rs151};
	bra.uni 	BB0_127;

BB0_126:
	mov.u64 	%rd276, image_RNM3;
	cvta.global.u64 	%rd271, %rd276;
	mov.u32 	%r336, 8;
	mov.u64 	%rd275, 0;
	// inline asm
	call (%rd270), _rt_buffer_get_64, (%rd271, %r98, %r336, %rd18, %rd19, %rd275, %rd275);
	// inline asm
	mov.f32 	%f771, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs152, %f771;}

	// inline asm
	mov.u16 	%rs153, 0;
	st.v4.u16 	[%rd270], {%rs152, %rs152, %rs152, %rs153};
	bra.uni 	BB0_127;

BB0_62:
	setp.geu.f32	%p54, %f164, 0f00000000;
	@%p54 bra 	BB0_65;

	cvt.rzi.f32.f32	%f493, %f465;
	setp.neu.f32	%p55, %f493, 0f3EE66666;
	selp.f32	%f886, 0f7FFFFFFF, %f886, %p55;

BB0_65:
	add.f32 	%f495, %f168, 0f3EE66666;
	mov.b32 	 %r238, %f495;
	setp.lt.s32	%p57, %r238, 2139095040;
	@%p57 bra 	BB0_70;

	setp.gtu.f32	%p58, %f168, 0f7F800000;
	@%p58 bra 	BB0_69;
	bra.uni 	BB0_67;

BB0_69:
	add.f32 	%f886, %f164, 0f3EE66666;
	bra.uni 	BB0_70;

BB0_67:
	setp.neu.f32	%p59, %f168, 0f7F800000;
	@%p59 bra 	BB0_70;

	selp.f32	%f886, 0fFF800000, 0f7F800000, %p1;

BB0_70:
	setp.eq.f32	%p60, %f164, 0f3F800000;
	selp.f32	%f180, 0f3F800000, %f886, %p60;
	abs.f32 	%f181, %f165;
	setp.lt.f32	%p61, %f181, 0f00800000;
	mul.f32 	%f498, %f181, 0f4B800000;
	selp.f32	%f499, 0fC3170000, 0fC2FE0000, %p61;
	selp.f32	%f500, %f498, %f181, %p61;
	mov.b32 	 %r239, %f500;
	and.b32  	%r240, %r239, 8388607;
	or.b32  	%r241, %r240, 1065353216;
	mov.b32 	 %f501, %r241;
	shr.u32 	%r242, %r239, 23;
	cvt.rn.f32.u32	%f502, %r242;
	add.f32 	%f503, %f499, %f502;
	setp.gt.f32	%p62, %f501, 0f3FB504F3;
	mul.f32 	%f504, %f501, 0f3F000000;
	add.f32 	%f505, %f503, 0f3F800000;
	selp.f32	%f506, %f504, %f501, %p62;
	selp.f32	%f507, %f505, %f503, %p62;
	add.f32 	%f508, %f506, 0fBF800000;
	add.f32 	%f497, %f506, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f496,%f497;
	// inline asm
	add.f32 	%f509, %f508, %f508;
	mul.f32 	%f510, %f496, %f509;
	mul.f32 	%f511, %f510, %f510;
	fma.rn.f32 	%f514, %f435, %f511, %f434;
	fma.rn.f32 	%f516, %f514, %f511, %f437;
	mul.rn.f32 	%f517, %f516, %f511;
	mul.rn.f32 	%f518, %f517, %f510;
	sub.f32 	%f519, %f508, %f510;
	neg.f32 	%f520, %f510;
	add.f32 	%f521, %f519, %f519;
	fma.rn.f32 	%f522, %f520, %f508, %f521;
	mul.rn.f32 	%f523, %f496, %f522;
	add.f32 	%f524, %f518, %f510;
	sub.f32 	%f525, %f510, %f524;
	add.f32 	%f526, %f518, %f525;
	add.f32 	%f527, %f523, %f526;
	add.f32 	%f528, %f524, %f527;
	sub.f32 	%f529, %f524, %f528;
	add.f32 	%f530, %f527, %f529;
	mul.rn.f32 	%f532, %f507, %f453;
	mul.rn.f32 	%f534, %f507, %f455;
	add.f32 	%f535, %f532, %f528;
	sub.f32 	%f536, %f532, %f535;
	add.f32 	%f537, %f528, %f536;
	add.f32 	%f538, %f530, %f537;
	add.f32 	%f539, %f534, %f538;
	add.f32 	%f540, %f535, %f539;
	sub.f32 	%f541, %f535, %f540;
	add.f32 	%f542, %f539, %f541;
	mul.rn.f32 	%f544, %f465, %f540;
	neg.f32 	%f545, %f544;
	fma.rn.f32 	%f546, %f465, %f540, %f545;
	fma.rn.f32 	%f547, %f465, %f542, %f546;
	fma.rn.f32 	%f549, %f470, %f540, %f547;
	add.rn.f32 	%f550, %f544, %f549;
	neg.f32 	%f551, %f550;
	add.rn.f32 	%f552, %f544, %f551;
	add.rn.f32 	%f553, %f552, %f549;
	mov.b32 	 %r243, %f550;
	setp.eq.s32	%p63, %r243, 1118925336;
	add.s32 	%r244, %r243, -1;
	mov.b32 	 %f554, %r244;
	add.f32 	%f555, %f553, 0f37000000;
	selp.f32	%f556, %f554, %f550, %p63;
	selp.f32	%f182, %f555, %f553, %p63;
	mul.f32 	%f557, %f556, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f558, %f557;
	fma.rn.f32 	%f560, %f558, %f481, %f556;
	fma.rn.f32 	%f562, %f558, %f483, %f560;
	mul.f32 	%f563, %f562, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f564, %f563;
	add.f32 	%f565, %f558, 0f00000000;
	ex2.approx.f32 	%f566, %f565;
	mul.f32 	%f567, %f564, %f566;
	setp.lt.f32	%p64, %f556, 0fC2D20000;
	selp.f32	%f568, 0f00000000, %f567, %p64;
	setp.gt.f32	%p65, %f556, 0f42D20000;
	selp.f32	%f887, 0f7F800000, %f568, %p65;
	setp.eq.f32	%p66, %f887, 0f7F800000;
	@%p66 bra 	BB0_72;

	fma.rn.f32 	%f887, %f887, %f182, %f887;

BB0_72:
	setp.lt.f32	%p67, %f165, 0f00000000;
	and.pred  	%p2, %p67, %p52;
	mov.b32 	 %r245, %f887;
	xor.b32  	%r246, %r245, -2147483648;
	mov.b32 	 %f569, %r246;
	selp.f32	%f889, %f569, %f887, %p2;
	setp.eq.f32	%p69, %f165, 0f00000000;
	@%p69 bra 	BB0_75;
	bra.uni 	BB0_73;

BB0_75:
	add.f32 	%f572, %f165, %f165;
	selp.f32	%f889, %f572, 0f00000000, %p52;
	bra.uni 	BB0_76;

BB0_73:
	setp.geu.f32	%p70, %f165, 0f00000000;
	@%p70 bra 	BB0_76;

	cvt.rzi.f32.f32	%f571, %f465;
	setp.neu.f32	%p71, %f571, 0f3EE66666;
	selp.f32	%f889, 0f7FFFFFFF, %f889, %p71;

BB0_76:
	add.f32 	%f573, %f181, 0f3EE66666;
	mov.b32 	 %r247, %f573;
	setp.lt.s32	%p73, %r247, 2139095040;
	@%p73 bra 	BB0_81;

	setp.gtu.f32	%p74, %f181, 0f7F800000;
	@%p74 bra 	BB0_80;
	bra.uni 	BB0_78;

BB0_80:
	add.f32 	%f889, %f165, 0f3EE66666;
	bra.uni 	BB0_81;

BB0_78:
	setp.neu.f32	%p75, %f181, 0f7F800000;
	@%p75 bra 	BB0_81;

	selp.f32	%f889, 0fFF800000, 0f7F800000, %p2;

BB0_81:
	setp.eq.f32	%p76, %f165, 0f3F800000;
	selp.f32	%f193, 0f3F800000, %f889, %p76;
	abs.f32 	%f194, %f166;
	setp.lt.f32	%p77, %f194, 0f00800000;
	mul.f32 	%f576, %f194, 0f4B800000;
	selp.f32	%f577, 0fC3170000, 0fC2FE0000, %p77;
	selp.f32	%f578, %f576, %f194, %p77;
	mov.b32 	 %r248, %f578;
	and.b32  	%r249, %r248, 8388607;
	or.b32  	%r250, %r249, 1065353216;
	mov.b32 	 %f579, %r250;
	shr.u32 	%r251, %r248, 23;
	cvt.rn.f32.u32	%f580, %r251;
	add.f32 	%f581, %f577, %f580;
	setp.gt.f32	%p78, %f579, 0f3FB504F3;
	mul.f32 	%f582, %f579, 0f3F000000;
	add.f32 	%f583, %f581, 0f3F800000;
	selp.f32	%f584, %f582, %f579, %p78;
	selp.f32	%f585, %f583, %f581, %p78;
	add.f32 	%f586, %f584, 0fBF800000;
	add.f32 	%f575, %f584, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f574,%f575;
	// inline asm
	add.f32 	%f587, %f586, %f586;
	mul.f32 	%f588, %f574, %f587;
	mul.f32 	%f589, %f588, %f588;
	fma.rn.f32 	%f592, %f435, %f589, %f434;
	fma.rn.f32 	%f594, %f592, %f589, %f437;
	mul.rn.f32 	%f595, %f594, %f589;
	mul.rn.f32 	%f596, %f595, %f588;
	sub.f32 	%f597, %f586, %f588;
	neg.f32 	%f598, %f588;
	add.f32 	%f599, %f597, %f597;
	fma.rn.f32 	%f600, %f598, %f586, %f599;
	mul.rn.f32 	%f601, %f574, %f600;
	add.f32 	%f602, %f596, %f588;
	sub.f32 	%f603, %f588, %f602;
	add.f32 	%f604, %f596, %f603;
	add.f32 	%f605, %f601, %f604;
	add.f32 	%f606, %f602, %f605;
	sub.f32 	%f607, %f602, %f606;
	add.f32 	%f608, %f605, %f607;
	mul.rn.f32 	%f610, %f585, %f453;
	mul.rn.f32 	%f612, %f585, %f455;
	add.f32 	%f613, %f610, %f606;
	sub.f32 	%f614, %f610, %f613;
	add.f32 	%f615, %f606, %f614;
	add.f32 	%f616, %f608, %f615;
	add.f32 	%f617, %f612, %f616;
	add.f32 	%f618, %f613, %f617;
	sub.f32 	%f619, %f613, %f618;
	add.f32 	%f620, %f617, %f619;
	mul.rn.f32 	%f622, %f465, %f618;
	neg.f32 	%f623, %f622;
	fma.rn.f32 	%f624, %f465, %f618, %f623;
	fma.rn.f32 	%f625, %f465, %f620, %f624;
	fma.rn.f32 	%f627, %f470, %f618, %f625;
	add.rn.f32 	%f628, %f622, %f627;
	neg.f32 	%f629, %f628;
	add.rn.f32 	%f630, %f622, %f629;
	add.rn.f32 	%f631, %f630, %f627;
	mov.b32 	 %r252, %f628;
	setp.eq.s32	%p79, %r252, 1118925336;
	add.s32 	%r253, %r252, -1;
	mov.b32 	 %f632, %r253;
	add.f32 	%f633, %f631, 0f37000000;
	selp.f32	%f634, %f632, %f628, %p79;
	selp.f32	%f195, %f633, %f631, %p79;
	mul.f32 	%f635, %f634, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f636, %f635;
	fma.rn.f32 	%f638, %f636, %f481, %f634;
	fma.rn.f32 	%f640, %f636, %f483, %f638;
	mul.f32 	%f641, %f640, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f642, %f641;
	add.f32 	%f643, %f636, 0f00000000;
	ex2.approx.f32 	%f644, %f643;
	mul.f32 	%f645, %f642, %f644;
	setp.lt.f32	%p80, %f634, 0fC2D20000;
	selp.f32	%f646, 0f00000000, %f645, %p80;
	setp.gt.f32	%p81, %f634, 0f42D20000;
	selp.f32	%f890, 0f7F800000, %f646, %p81;
	setp.eq.f32	%p82, %f890, 0f7F800000;
	@%p82 bra 	BB0_83;

	fma.rn.f32 	%f890, %f890, %f195, %f890;

BB0_83:
	setp.lt.f32	%p83, %f166, 0f00000000;
	and.pred  	%p3, %p83, %p52;
	mov.b32 	 %r254, %f890;
	xor.b32  	%r255, %r254, -2147483648;
	mov.b32 	 %f647, %r255;
	selp.f32	%f892, %f647, %f890, %p3;
	setp.eq.f32	%p85, %f166, 0f00000000;
	@%p85 bra 	BB0_86;
	bra.uni 	BB0_84;

BB0_86:
	add.f32 	%f650, %f166, %f166;
	selp.f32	%f892, %f650, 0f00000000, %p52;
	bra.uni 	BB0_87;

BB0_84:
	setp.geu.f32	%p86, %f166, 0f00000000;
	@%p86 bra 	BB0_87;

	cvt.rzi.f32.f32	%f649, %f465;
	setp.neu.f32	%p87, %f649, 0f3EE66666;
	selp.f32	%f892, 0f7FFFFFFF, %f892, %p87;

BB0_87:
	add.f32 	%f651, %f194, 0f3EE66666;
	mov.b32 	 %r256, %f651;
	setp.lt.s32	%p89, %r256, 2139095040;
	@%p89 bra 	BB0_92;

	setp.gtu.f32	%p90, %f194, 0f7F800000;
	@%p90 bra 	BB0_91;
	bra.uni 	BB0_89;

BB0_91:
	add.f32 	%f892, %f166, 0f3EE66666;
	bra.uni 	BB0_92;

BB0_89:
	setp.neu.f32	%p91, %f194, 0f7F800000;
	@%p91 bra 	BB0_92;

	selp.f32	%f892, 0fFF800000, 0f7F800000, %p3;

BB0_92:
	mov.u32 	%r345, 4;
	setp.eq.f32	%p92, %f166, 0f3F800000;
	selp.f32	%f652, 0f3F800000, %f892, %p92;
	cvt.u64.u32	%rd66, %r3;
	cvt.u64.u32	%rd65, %r2;
	mov.u64 	%rd69, image;
	cvta.global.u64 	%rd64, %rd69;
	// inline asm
	call (%rd63), _rt_buffer_get_64, (%rd64, %r98, %r345, %rd65, %rd66, %rd25, %rd25);
	// inline asm
	cvt.sat.f32.f32	%f653, %f652;
	mul.f32 	%f654, %f653, 0f437FFD71;
	cvt.rzi.u32.f32	%r259, %f654;
	cvt.sat.f32.f32	%f655, %f193;
	mul.f32 	%f656, %f655, 0f437FFD71;
	cvt.rzi.u32.f32	%r260, %f656;
	cvt.sat.f32.f32	%f657, %f180;
	mul.f32 	%f658, %f657, 0f437FFD71;
	cvt.rzi.u32.f32	%r261, %f658;
	cvt.u16.u32	%rs14, %r259;
	cvt.u16.u32	%rs15, %r261;
	cvt.u16.u32	%rs16, %r260;
	mov.u16 	%rs17, 255;
	st.v4.u8 	[%rd63], {%rs14, %rs16, %rs15, %rs17};
	ld.global.u32 	%r392, [imageEnabled];

BB0_93:
	cvt.u64.u32	%rd16, %r2;
	cvt.u64.u32	%rd17, %r3;
	and.b32  	%r262, %r392, 4;
	setp.eq.s32	%p93, %r262, 0;
	@%p93 bra 	BB0_97;

	ld.global.u32 	%r263, [additive];
	setp.eq.s32	%p94, %r263, 0;
	mov.f32 	%f659, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs18, %f659;}

	// inline asm
	@%p94 bra 	BB0_96;

	mov.u64 	%rd82, image_HDR;
	cvta.global.u64 	%rd71, %rd82;
	mov.u32 	%r267, 8;
	// inline asm
	call (%rd70), _rt_buffer_get_64, (%rd71, %r98, %r267, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	ld.v4.u16 	{%rs25, %rs26, %rs27, %rs28}, [%rd70];
	// inline asm
	{  cvt.f32.f16 %f660, %rs25;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f661, %rs26;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f662, %rs27;}

	// inline asm
	// inline asm
	call (%rd76), _rt_buffer_get_64, (%rd71, %r98, %r267, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	add.f32 	%f663, %f164, %f660;
	add.f32 	%f664, %f165, %f661;
	add.f32 	%f665, %f166, %f662;
	// inline asm
	{  cvt.rn.f16.f32 %rs24, %f665;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs23, %f664;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs22, %f663;}

	// inline asm
	st.v4.u16 	[%rd76], {%rs22, %rs23, %rs24, %rs18};
	bra.uni 	BB0_97;

BB0_96:
	mov.u64 	%rd89, image_HDR;
	cvta.global.u64 	%rd84, %rd89;
	mov.u32 	%r269, 8;
	// inline asm
	call (%rd83), _rt_buffer_get_64, (%rd84, %r98, %r269, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs31, %f166;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs30, %f165;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs29, %f164;}

	// inline asm
	st.v4.u16 	[%rd83], {%rs29, %rs30, %rs31, %rs18};

BB0_97:
	ld.global.f32 	%f670, [skyColor];
	mul.f32 	%f671, %f152, %f670;
	ld.global.f32 	%f672, [skyColor+4];
	mul.f32 	%f673, %f153, %f672;
	ld.global.f32 	%f674, [skyColor+8];
	mul.f32 	%f675, %f154, %f674;
	mul.f32 	%f206, %f155, %f670;
	mul.f32 	%f207, %f156, %f672;
	mul.f32 	%f208, %f157, %f674;
	mul.f32 	%f209, %f158, %f670;
	mul.f32 	%f210, %f159, %f672;
	mul.f32 	%f211, %f160, %f674;
	mul.f32 	%f212, %f161, %f670;
	mul.f32 	%f213, %f162, %f672;
	mul.f32 	%f214, %f163, %f674;
	mul.f32 	%f215, %f671, 0f3F000000;
	mul.f32 	%f216, %f673, 0f3F000000;
	mul.f32 	%f217, %f675, 0f3F000000;
	ld.global.u32 	%r270, [additive];
	setp.eq.s32	%p95, %r270, 0;
	mov.f32 	%f669, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs32, %f669;}

	// inline asm
	@%p95 bra 	BB0_99;

	mov.u64 	%rd102, image_RNM0;
	cvta.global.u64 	%rd91, %rd102;
	mov.u32 	%r274, 8;
	// inline asm
	call (%rd90), _rt_buffer_get_64, (%rd91, %r98, %r274, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	ld.v4.u16 	{%rs39, %rs40, %rs41, %rs42}, [%rd90];
	// inline asm
	{  cvt.f32.f16 %f676, %rs39;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f677, %rs40;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f678, %rs41;}

	// inline asm
	// inline asm
	call (%rd96), _rt_buffer_get_64, (%rd91, %r98, %r274, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	add.f32 	%f679, %f215, %f676;
	add.f32 	%f680, %f216, %f677;
	add.f32 	%f681, %f217, %f678;
	// inline asm
	{  cvt.rn.f16.f32 %rs38, %f681;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs37, %f680;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs36, %f679;}

	// inline asm
	st.v4.u16 	[%rd96], {%rs36, %rs37, %rs38, %rs32};
	bra.uni 	BB0_100;

BB0_99:
	mov.u64 	%rd109, image_RNM0;
	cvta.global.u64 	%rd104, %rd109;
	mov.u32 	%r276, 8;
	// inline asm
	call (%rd103), _rt_buffer_get_64, (%rd104, %r98, %r276, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs45, %f217;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs44, %f216;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs43, %f215;}

	// inline asm
	st.v4.u16 	[%rd103], {%rs43, %rs44, %rs45, %rs32};

BB0_100:
	mov.f32 	%f686, 0f34000000;
	max.f32 	%f687, %f215, %f686;
	mul.f32 	%f688, %f206, 0f3F000000;
	div.rn.f32 	%f689, %f688, %f687;
	max.f32 	%f690, %f216, %f686;
	mul.f32 	%f691, %f207, 0f3F000000;
	div.rn.f32 	%f692, %f691, %f690;
	max.f32 	%f693, %f217, %f686;
	mul.f32 	%f694, %f208, 0f3F000000;
	div.rn.f32 	%f695, %f694, %f693;
	fma.rn.f32 	%f218, %f689, 0f3F000000, 0f3F000000;
	fma.rn.f32 	%f219, %f692, 0f3F000000, 0f3F000000;
	fma.rn.f32 	%f220, %f695, 0f3F000000, 0f3F000000;
	mul.f32 	%f696, %f209, 0f3F000000;
	div.rn.f32 	%f697, %f696, %f687;
	mul.f32 	%f698, %f210, 0f3F000000;
	div.rn.f32 	%f699, %f698, %f690;
	mul.f32 	%f700, %f211, 0f3F000000;
	div.rn.f32 	%f701, %f700, %f693;
	fma.rn.f32 	%f221, %f697, 0f3F000000, 0f3F000000;
	fma.rn.f32 	%f222, %f699, 0f3F000000, 0f3F000000;
	fma.rn.f32 	%f223, %f701, 0f3F000000, 0f3F000000;
	mul.f32 	%f702, %f212, 0f3F000000;
	div.rn.f32 	%f703, %f702, %f687;
	mul.f32 	%f704, %f213, 0f3F000000;
	div.rn.f32 	%f705, %f704, %f690;
	mul.f32 	%f706, %f214, 0f3F000000;
	div.rn.f32 	%f707, %f706, %f693;
	fma.rn.f32 	%f224, %f703, 0f3F000000, 0f3F000000;
	fma.rn.f32 	%f225, %f705, 0f3F000000, 0f3F000000;
	fma.rn.f32 	%f226, %f707, 0f3F000000, 0f3F000000;
	ld.global.u32 	%r277, [additive];
	setp.eq.s32	%p96, %r277, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs46, %f669;}

	// inline asm
	@%p96 bra 	BB0_102;

	mov.u64 	%rd122, image_RNM1;
	cvta.global.u64 	%rd111, %rd122;
	mov.u32 	%r281, 8;
	// inline asm
	call (%rd110), _rt_buffer_get_64, (%rd111, %r98, %r281, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	ld.v4.u16 	{%rs53, %rs54, %rs55, %rs56}, [%rd110];
	// inline asm
	{  cvt.f32.f16 %f708, %rs53;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f709, %rs54;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f710, %rs55;}

	// inline asm
	// inline asm
	call (%rd116), _rt_buffer_get_64, (%rd111, %r98, %r281, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	add.f32 	%f711, %f218, %f708;
	add.f32 	%f712, %f219, %f709;
	add.f32 	%f713, %f220, %f710;
	// inline asm
	{  cvt.rn.f16.f32 %rs52, %f713;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs51, %f712;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs50, %f711;}

	// inline asm
	st.v4.u16 	[%rd116], {%rs50, %rs51, %rs52, %rs46};
	bra.uni 	BB0_103;

BB0_102:
	mov.u64 	%rd129, image_RNM1;
	cvta.global.u64 	%rd124, %rd129;
	mov.u32 	%r283, 8;
	// inline asm
	call (%rd123), _rt_buffer_get_64, (%rd124, %r98, %r283, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs59, %f220;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs58, %f219;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs57, %f218;}

	// inline asm
	st.v4.u16 	[%rd123], {%rs57, %rs58, %rs59, %rs46};

BB0_103:
	ld.global.u32 	%r284, [additive];
	setp.eq.s32	%p97, %r284, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs60, %f669;}

	// inline asm
	@%p97 bra 	BB0_105;

	mov.u64 	%rd142, image_RNM2;
	cvta.global.u64 	%rd131, %rd142;
	mov.u32 	%r288, 8;
	// inline asm
	call (%rd130), _rt_buffer_get_64, (%rd131, %r98, %r288, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	ld.v4.u16 	{%rs67, %rs68, %rs69, %rs70}, [%rd130];
	// inline asm
	{  cvt.f32.f16 %f718, %rs67;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f719, %rs68;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f720, %rs69;}

	// inline asm
	// inline asm
	call (%rd136), _rt_buffer_get_64, (%rd131, %r98, %r288, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	add.f32 	%f721, %f221, %f718;
	add.f32 	%f722, %f222, %f719;
	add.f32 	%f723, %f223, %f720;
	// inline asm
	{  cvt.rn.f16.f32 %rs66, %f723;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs65, %f722;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs64, %f721;}

	// inline asm
	st.v4.u16 	[%rd136], {%rs64, %rs65, %rs66, %rs60};
	bra.uni 	BB0_106;

BB0_105:
	mov.u64 	%rd149, image_RNM2;
	cvta.global.u64 	%rd144, %rd149;
	mov.u32 	%r290, 8;
	// inline asm
	call (%rd143), _rt_buffer_get_64, (%rd144, %r98, %r290, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs73, %f223;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs72, %f222;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs71, %f221;}

	// inline asm
	st.v4.u16 	[%rd143], {%rs71, %rs72, %rs73, %rs60};

BB0_106:
	ld.global.u32 	%r291, [additive];
	setp.eq.s32	%p98, %r291, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs74, %f669;}

	// inline asm
	@%p98 bra 	BB0_108;

	mov.u64 	%rd162, image_RNM3;
	cvta.global.u64 	%rd151, %rd162;
	mov.u32 	%r295, 8;
	// inline asm
	call (%rd150), _rt_buffer_get_64, (%rd151, %r98, %r295, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	ld.v4.u16 	{%rs81, %rs82, %rs83, %rs84}, [%rd150];
	// inline asm
	{  cvt.f32.f16 %f728, %rs81;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f729, %rs82;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f730, %rs83;}

	// inline asm
	// inline asm
	call (%rd156), _rt_buffer_get_64, (%rd151, %r98, %r295, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	add.f32 	%f731, %f224, %f728;
	add.f32 	%f732, %f225, %f729;
	add.f32 	%f733, %f226, %f730;
	// inline asm
	{  cvt.rn.f16.f32 %rs80, %f733;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs79, %f732;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs78, %f731;}

	// inline asm
	st.v4.u16 	[%rd156], {%rs78, %rs79, %rs80, %rs74};
	bra.uni 	BB0_127;

BB0_108:
	mov.u64 	%rd169, image_RNM3;
	cvta.global.u64 	%rd164, %rd169;
	mov.u32 	%r297, 8;
	// inline asm
	call (%rd163), _rt_buffer_get_64, (%rd164, %r98, %r297, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs87, %f226;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs86, %f225;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs85, %f224;}

	// inline asm
	st.v4.u16 	[%rd163], {%rs85, %rs86, %rs87, %rs74};

BB0_127:
	ret;
}


