//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-23083092
// Cuda compilation tools, release 9.1, V9.1.85
// Based on LLVM 3.4svn
//

.version 6.1
.target sm_30
.address_size 64

	// .globl	_Z6oxMainv
.global .align 8 .b8 pixelID[8];
.global .align 8 .b8 resolution[8];
.global .align 4 .b8 normal[12];
.global .align 4 .b8 camPos[12];
.global .align 4 .b8 root[4];
.global .align 4 .u32 imageEnabled;
.global .texref lightmap;
.global .align 16 .b8 tileInfo[16];
.global .align 4 .u32 additive;
.global .align 1 .b8 image[1];
.global .align 1 .b8 image_HDR[1];
.global .align 1 .b8 image_HDR2[1];
.global .align 1 .b8 image_Mask[1];
.global .align 1 .b8 image_RNM0[1];
.global .align 1 .b8 image_RNM1[1];
.global .align 1 .b8 image_RNM2[1];
.global .align 1 .b8 image_RNM3[1];
.global .align 1 .b8 uvpos[1];
.global .align 1 .b8 uvnormal[1];
.global .align 4 .u32 samples;
.global .align 4 .f32 lightInvCutoff;
.global .align 4 .f32 lightRadius;
.global .align 4 .b8 lightPos[12];
.global .align 4 .b8 lightColor[12];
.global .align 4 .u32 ignoreNormal;
.global .align 4 .f32 lightFalloffFakeDistanceMult;
.global .align 4 .b8 _ZN21rti_internal_typeinfo7pixelIDE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10resolutionE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6camPosE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4rootE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12imageEnabledE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8tileInfoE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8additiveE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo7samplesE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14lightInvCutoffE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11lightRadiusE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8lightPosE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10lightColorE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12ignoreNormalE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo28lightFalloffFakeDistanceMultE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 8 .b8 _ZN21rti_internal_typename7pixelIDE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10resolutionE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6camPosE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 16 .b8 _ZN21rti_internal_typename4rootE[9] = {114, 116, 79, 98, 106, 101, 99, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12imageEnabledE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8tileInfoE[6] = {117, 105, 110, 116, 52, 0};
.global .align 4 .b8 _ZN21rti_internal_typename8additiveE[4] = {105, 110, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename7samplesE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename14lightInvCutoffE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename11lightRadiusE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8lightPosE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10lightColorE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12ignoreNormalE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename28lightFalloffFakeDistanceMultE[6] = {102, 108, 111, 97, 116, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum7pixelIDE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10resolutionE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6camPosE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4rootE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12imageEnabledE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8tileInfoE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8additiveE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum7samplesE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14lightInvCutoffE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11lightRadiusE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8lightPosE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10lightColorE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12ignoreNormalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum28lightFalloffFakeDistanceMultE = 4919;
.global .align 16 .b8 _ZN21rti_internal_semantic7pixelIDE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic10resolutionE[12] = {114, 116, 76, 97, 117, 110, 99, 104, 68, 105, 109, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic6normalE[17] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic6camPosE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic4rootE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12imageEnabledE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8tileInfoE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8additiveE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic7samplesE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic14lightInvCutoffE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11lightRadiusE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8lightPosE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic10lightColorE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12ignoreNormalE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic28lightFalloffFakeDistanceMultE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7pixelIDE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10resolutionE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6camPosE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4rootE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12imageEnabledE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8tileInfoE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8additiveE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7samplesE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14lightInvCutoffE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11lightRadiusE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8lightPosE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10lightColorE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12ignoreNormalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation28lightFalloffFakeDistanceMultE[1];

.visible .entry _Z6oxMainv(

)
{
	.local .align 4 .b8 	__local_depot0[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<138>;
	.reg .b16 	%rs<221>;
	.reg .f32 	%f<977>;
	.reg .b32 	%r<245>;
	.reg .b64 	%rd<369>;


	mov.u64 	%rd368, __local_depot0;
	cvta.local.u64 	%SP, %rd368;
	ld.global.v2.u32 	{%r26, %r27}, [pixelID];
	cvt.u64.u32	%rd12, %r26;
	cvt.u64.u32	%rd13, %r27;
	mov.u64 	%rd16, uvnormal;
	cvta.global.u64 	%rd11, %rd16;
	mov.u32 	%r24, 2;
	mov.u32 	%r25, 4;
	mov.u64 	%rd15, 0;
	// inline asm
	call (%rd10), _rt_buffer_get_64, (%rd11, %r24, %r25, %rd12, %rd13, %rd15, %rd15);
	// inline asm
	ld.u32 	%r1, [%rd10];
	shr.u32 	%r30, %r1, 16;
	cvt.u16.u32	%rs1, %r30;
	and.b16  	%rs12, %rs1, 255;
	cvt.u16.u32	%rs13, %r1;
	or.b16  	%rs14, %rs13, %rs12;
	setp.eq.s16	%p7, %rs14, 0;
	mov.f32 	%f950, 0f00000000;
	mov.f32 	%f951, %f950;
	mov.f32 	%f952, %f950;
	@%p7 bra 	BB0_2;

	ld.u8 	%rs15, [%rd10+1];
	and.b16  	%rs17, %rs13, 255;
	cvt.rn.f32.u16	%f128, %rs17;
	div.rn.f32 	%f129, %f128, 0f437F0000;
	fma.rn.f32 	%f130, %f129, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f131, %rs15;
	div.rn.f32 	%f132, %f131, 0f437F0000;
	fma.rn.f32 	%f133, %f132, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f134, %rs12;
	div.rn.f32 	%f135, %f134, 0f437F0000;
	fma.rn.f32 	%f136, %f135, 0f40000000, 0fBF800000;
	mul.f32 	%f137, %f133, %f133;
	fma.rn.f32 	%f138, %f130, %f130, %f137;
	fma.rn.f32 	%f139, %f136, %f136, %f138;
	sqrt.rn.f32 	%f140, %f139;
	rcp.rn.f32 	%f141, %f140;
	mul.f32 	%f950, %f130, %f141;
	mul.f32 	%f951, %f133, %f141;
	mul.f32 	%f952, %f136, %f141;

BB0_2:
	ld.global.v2.u32 	{%r31, %r32}, [pixelID];
	ld.global.v2.u32 	{%r34, %r35}, [tileInfo];
	add.s32 	%r2, %r31, %r34;
	add.s32 	%r3, %r32, %r35;
	setp.eq.f32	%p8, %f951, 0f00000000;
	setp.eq.f32	%p9, %f950, 0f00000000;
	and.pred  	%p10, %p9, %p8;
	setp.eq.f32	%p11, %f952, 0f00000000;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	BB0_116;
	bra.uni 	BB0_3;

BB0_116:
	ld.global.u32 	%r244, [imageEnabled];
	and.b32  	%r194, %r244, 1;
	setp.eq.b32	%p130, %r194, 1;
	@!%p130 bra 	BB0_118;
	bra.uni 	BB0_117;

BB0_117:
	cvt.u64.u32	%rd256, %r2;
	cvt.u64.u32	%rd257, %r3;
	mov.u64 	%rd260, image;
	cvta.global.u64 	%rd255, %rd260;
	// inline asm
	call (%rd254), _rt_buffer_get_64, (%rd255, %r24, %r25, %rd256, %rd257, %rd15, %rd15);
	// inline asm
	mov.u16 	%rs153, 0;
	st.v4.u8 	[%rd254], {%rs153, %rs153, %rs153, %rs153};
	ld.global.u32 	%r244, [imageEnabled];

BB0_118:
	and.b32  	%r197, %r244, 8;
	setp.eq.s32	%p131, %r197, 0;
	@%p131 bra 	BB0_120;

	cvt.u64.u32	%rd264, %r3;
	cvt.u64.u32	%rd263, %r2;
	mov.u64 	%rd267, image_Mask;
	cvta.global.u64 	%rd262, %rd267;
	// inline asm
	call (%rd261), _rt_buffer_get_64, (%rd262, %r24, %r24, %rd263, %rd264, %rd15, %rd15);
	// inline asm
	mov.f32 	%f847, 0f00000000;
	cvt.rzi.u32.f32	%r200, %f847;
	cvt.u16.u32	%rs154, %r200;
	mov.u16 	%rs155, 0;
	st.v2.u8 	[%rd261], {%rs154, %rs155};
	ld.global.u32 	%r244, [imageEnabled];

BB0_120:
	cvt.u64.u32	%rd8, %r2;
	cvt.u64.u32	%rd9, %r3;
	and.b32  	%r201, %r244, 4;
	setp.eq.s32	%p132, %r201, 0;
	@%p132 bra 	BB0_124;

	ld.global.u32 	%r202, [additive];
	setp.eq.s32	%p133, %r202, 0;
	@%p133 bra 	BB0_123;

	mov.u64 	%rd280, image_HDR;
	cvta.global.u64 	%rd269, %rd280;
	mov.u32 	%r206, 8;
	// inline asm
	call (%rd268), _rt_buffer_get_64, (%rd269, %r24, %r206, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs162, %rs163, %rs164, %rs165}, [%rd268];
	// inline asm
	{  cvt.f32.f16 %f848, %rs162;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f849, %rs163;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f850, %rs164;}

	// inline asm
	// inline asm
	call (%rd274), _rt_buffer_get_64, (%rd269, %r24, %r206, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f851, %f848, 0f00000000;
	add.f32 	%f852, %f849, 0f00000000;
	add.f32 	%f853, %f850, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs161, %f853;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs160, %f852;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs159, %f851;}

	// inline asm
	mov.u16 	%rs166, 0;
	st.v4.u16 	[%rd274], {%rs159, %rs160, %rs161, %rs166};
	bra.uni 	BB0_124;

BB0_3:
	ld.global.v2.u32 	{%r41, %r42}, [pixelID];
	cvt.u64.u32	%rd19, %r41;
	cvt.u64.u32	%rd20, %r42;
	mov.u64 	%rd23, uvpos;
	cvta.global.u64 	%rd18, %rd23;
	mov.u32 	%r40, 12;
	// inline asm
	call (%rd17), _rt_buffer_get_64, (%rd18, %r24, %r40, %rd19, %rd20, %rd15, %rd15);
	// inline asm
	ld.global.f32 	%f7, [lightPos];
	ld.f32 	%f12, [%rd17+8];
	ld.f32 	%f10, [%rd17+4];
	ld.f32 	%f8, [%rd17];
	sub.f32 	%f144, %f7, %f8;
	ld.global.f32 	%f9, [lightPos+4];
	sub.f32 	%f145, %f9, %f10;
	ld.global.f32 	%f11, [lightPos+8];
	sub.f32 	%f146, %f11, %f12;
	mul.f32 	%f147, %f145, %f145;
	fma.rn.f32 	%f148, %f144, %f144, %f147;
	fma.rn.f32 	%f149, %f146, %f146, %f148;
	sqrt.rn.f32 	%f150, %f149;
	rcp.rn.f32 	%f151, %f150;
	ld.global.f32 	%f152, [lightFalloffFakeDistanceMult];
	mul.f32 	%f16, %f150, %f152;
	ld.global.f32 	%f153, [lightInvCutoff];
	mul.f32 	%f17, %f150, %f153;
	mov.f32 	%f157, 0f40800000;
	abs.f32 	%f19, %f17;
	setp.lt.f32	%p13, %f19, 0f00800000;
	mul.f32 	%f159, %f19, 0f4B800000;
	selp.f32	%f160, 0fC3170000, 0fC2FE0000, %p13;
	selp.f32	%f161, %f159, %f19, %p13;
	mov.b32 	 %r45, %f161;
	and.b32  	%r46, %r45, 8388607;
	or.b32  	%r47, %r46, 1065353216;
	mov.b32 	 %f162, %r47;
	shr.u32 	%r48, %r45, 23;
	cvt.rn.f32.u32	%f163, %r48;
	add.f32 	%f164, %f160, %f163;
	setp.gt.f32	%p14, %f162, 0f3FB504F3;
	mul.f32 	%f165, %f162, 0f3F000000;
	add.f32 	%f166, %f164, 0f3F800000;
	selp.f32	%f167, %f165, %f162, %p14;
	selp.f32	%f168, %f166, %f164, %p14;
	add.f32 	%f169, %f167, 0fBF800000;
	add.f32 	%f143, %f167, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f142,%f143;
	// inline asm
	add.f32 	%f170, %f169, %f169;
	mul.f32 	%f171, %f142, %f170;
	mul.f32 	%f172, %f171, %f171;
	mov.f32 	%f173, 0f3C4CAF63;
	mov.f32 	%f174, 0f3B18F0FE;
	fma.rn.f32 	%f175, %f174, %f172, %f173;
	mov.f32 	%f176, 0f3DAAAABD;
	fma.rn.f32 	%f177, %f175, %f172, %f176;
	mul.rn.f32 	%f178, %f177, %f172;
	mul.rn.f32 	%f179, %f178, %f171;
	sub.f32 	%f180, %f169, %f171;
	neg.f32 	%f181, %f171;
	add.f32 	%f182, %f180, %f180;
	fma.rn.f32 	%f183, %f181, %f169, %f182;
	mul.rn.f32 	%f184, %f142, %f183;
	add.f32 	%f185, %f179, %f171;
	sub.f32 	%f186, %f171, %f185;
	add.f32 	%f187, %f179, %f186;
	add.f32 	%f188, %f184, %f187;
	add.f32 	%f189, %f185, %f188;
	sub.f32 	%f190, %f185, %f189;
	add.f32 	%f191, %f188, %f190;
	mov.f32 	%f192, 0f3F317200;
	mul.rn.f32 	%f193, %f168, %f192;
	mov.f32 	%f194, 0f35BFBE8E;
	mul.rn.f32 	%f195, %f168, %f194;
	add.f32 	%f196, %f193, %f189;
	sub.f32 	%f197, %f193, %f196;
	add.f32 	%f198, %f189, %f197;
	add.f32 	%f199, %f191, %f198;
	add.f32 	%f200, %f195, %f199;
	add.f32 	%f201, %f196, %f200;
	sub.f32 	%f202, %f196, %f201;
	add.f32 	%f203, %f200, %f202;
	mul.rn.f32 	%f204, %f157, %f201;
	neg.f32 	%f205, %f204;
	fma.rn.f32 	%f206, %f157, %f201, %f205;
	fma.rn.f32 	%f207, %f157, %f203, %f206;
	mov.f32 	%f208, 0f00000000;
	fma.rn.f32 	%f209, %f208, %f201, %f207;
	add.rn.f32 	%f210, %f204, %f209;
	neg.f32 	%f211, %f210;
	add.rn.f32 	%f212, %f204, %f211;
	add.rn.f32 	%f213, %f212, %f209;
	mov.b32 	 %r49, %f210;
	setp.eq.s32	%p15, %r49, 1118925336;
	add.s32 	%r50, %r49, -1;
	mov.b32 	 %f214, %r50;
	add.f32 	%f215, %f213, 0f37000000;
	selp.f32	%f216, %f214, %f210, %p15;
	selp.f32	%f20, %f215, %f213, %p15;
	mul.f32 	%f217, %f216, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f218, %f217;
	mov.f32 	%f219, 0fBF317200;
	fma.rn.f32 	%f220, %f218, %f219, %f216;
	mov.f32 	%f221, 0fB5BFBE8E;
	fma.rn.f32 	%f222, %f218, %f221, %f220;
	mul.f32 	%f223, %f222, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f224, %f223;
	add.f32 	%f225, %f218, 0f00000000;
	ex2.approx.f32 	%f226, %f225;
	mul.f32 	%f227, %f224, %f226;
	setp.lt.f32	%p16, %f216, 0fC2D20000;
	selp.f32	%f228, 0f00000000, %f227, %p16;
	setp.gt.f32	%p17, %f216, 0f42D20000;
	selp.f32	%f953, 0f7F800000, %f228, %p17;
	setp.eq.f32	%p18, %f953, 0f7F800000;
	@%p18 bra 	BB0_5;

	fma.rn.f32 	%f953, %f953, %f20, %f953;

BB0_5:
	mov.f32 	%f888, 0f40000000;
	cvt.rzi.f32.f32	%f887, %f888;
	add.f32 	%f886, %f887, %f887;
	mov.f32 	%f885, 0f40800000;
	sub.f32 	%f884, %f885, %f886;
	abs.f32 	%f883, %f884;
	setp.lt.f32	%p19, %f17, 0f00000000;
	setp.eq.f32	%p20, %f883, 0f3F800000;
	and.pred  	%p1, %p19, %p20;
	mov.b32 	 %r51, %f953;
	xor.b32  	%r52, %r51, -2147483648;
	mov.b32 	 %f229, %r52;
	selp.f32	%f955, %f229, %f953, %p1;
	setp.eq.f32	%p21, %f17, 0f00000000;
	@%p21 bra 	BB0_8;
	bra.uni 	BB0_6;

BB0_8:
	add.f32 	%f232, %f17, %f17;
	selp.f32	%f955, %f232, 0f00000000, %p20;
	bra.uni 	BB0_9;

BB0_6:
	setp.geu.f32	%p22, %f17, 0f00000000;
	@%p22 bra 	BB0_9;

	mov.f32 	%f941, 0f40800000;
	cvt.rzi.f32.f32	%f231, %f941;
	setp.neu.f32	%p23, %f231, 0f40800000;
	selp.f32	%f955, 0f7FFFFFFF, %f955, %p23;

BB0_9:
	abs.f32 	%f889, %f17;
	add.f32 	%f233, %f889, 0f40800000;
	mov.b32 	 %r53, %f233;
	setp.lt.s32	%p25, %r53, 2139095040;
	@%p25 bra 	BB0_14;

	abs.f32 	%f939, %f17;
	setp.gtu.f32	%p26, %f939, 0f7F800000;
	@%p26 bra 	BB0_13;
	bra.uni 	BB0_11;

BB0_13:
	add.f32 	%f955, %f17, 0f40800000;
	bra.uni 	BB0_14;

BB0_11:
	abs.f32 	%f940, %f17;
	setp.neu.f32	%p27, %f940, 0f7F800000;
	@%p27 bra 	BB0_14;

	selp.f32	%f955, 0fFF800000, 0f7F800000, %p1;

BB0_14:
	sub.f32 	%f903, %f11, %f12;
	mul.f32 	%f902, %f903, %f151;
	sub.f32 	%f901, %f7, %f8;
	mul.f32 	%f900, %f901, %f151;
	sub.f32 	%f899, %f9, %f10;
	mul.f32 	%f898, %f899, %f151;
	mov.f32 	%f897, 0fB5BFBE8E;
	mov.f32 	%f896, 0fBF317200;
	mov.f32 	%f895, 0f00000000;
	mov.f32 	%f894, 0f35BFBE8E;
	mov.f32 	%f893, 0f3F317200;
	mov.f32 	%f892, 0f3DAAAABD;
	mov.f32 	%f891, 0f3C4CAF63;
	mov.f32 	%f890, 0f3B18F0FE;
	mov.f32 	%f236, 0f3F800000;
	sub.f32 	%f237, %f236, %f955;
	setp.eq.f32	%p28, %f17, 0f3F800000;
	selp.f32	%f238, 0f00000000, %f237, %p28;
	cvt.sat.f32.f32	%f239, %f238;
	fma.rn.f32 	%f240, %f16, %f16, 0f3F800000;
	div.rn.f32 	%f31, %f239, %f240;
	mul.f32 	%f241, %f951, %f898;
	fma.rn.f32 	%f242, %f950, %f900, %f241;
	fma.rn.f32 	%f243, %f952, %f902, %f242;
	ld.global.u32 	%r54, [ignoreNormal];
	setp.eq.s32	%p29, %r54, 0;
	selp.f32	%f32, %f243, 0f3F800000, %p29;
	fma.rn.f32 	%f244, %f32, 0f3F000000, 0f3F000000;
	cvt.sat.f32.f32	%f245, %f244;
	add.f32 	%f33, %f245, %f245;
	mov.f32 	%f249, 0f41A00000;
	abs.f32 	%f35, %f33;
	setp.lt.f32	%p30, %f35, 0f00800000;
	mul.f32 	%f251, %f35, 0f4B800000;
	selp.f32	%f252, 0fC3170000, 0fC2FE0000, %p30;
	selp.f32	%f253, %f251, %f35, %p30;
	mov.b32 	 %r55, %f253;
	and.b32  	%r56, %r55, 8388607;
	or.b32  	%r57, %r56, 1065353216;
	mov.b32 	 %f254, %r57;
	shr.u32 	%r58, %r55, 23;
	cvt.rn.f32.u32	%f255, %r58;
	add.f32 	%f256, %f252, %f255;
	setp.gt.f32	%p31, %f254, 0f3FB504F3;
	mul.f32 	%f257, %f254, 0f3F000000;
	add.f32 	%f258, %f256, 0f3F800000;
	selp.f32	%f259, %f257, %f254, %p31;
	selp.f32	%f260, %f258, %f256, %p31;
	add.f32 	%f261, %f259, 0fBF800000;
	add.f32 	%f235, %f259, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f234,%f235;
	// inline asm
	add.f32 	%f262, %f261, %f261;
	mul.f32 	%f263, %f234, %f262;
	mul.f32 	%f264, %f263, %f263;
	fma.rn.f32 	%f267, %f890, %f264, %f891;
	fma.rn.f32 	%f269, %f267, %f264, %f892;
	mul.rn.f32 	%f270, %f269, %f264;
	mul.rn.f32 	%f271, %f270, %f263;
	sub.f32 	%f272, %f261, %f263;
	neg.f32 	%f273, %f263;
	add.f32 	%f274, %f272, %f272;
	fma.rn.f32 	%f275, %f273, %f261, %f274;
	mul.rn.f32 	%f276, %f234, %f275;
	add.f32 	%f277, %f271, %f263;
	sub.f32 	%f278, %f263, %f277;
	add.f32 	%f279, %f271, %f278;
	add.f32 	%f280, %f276, %f279;
	add.f32 	%f281, %f277, %f280;
	sub.f32 	%f282, %f277, %f281;
	add.f32 	%f283, %f280, %f282;
	mul.rn.f32 	%f285, %f260, %f893;
	mul.rn.f32 	%f287, %f260, %f894;
	add.f32 	%f288, %f285, %f281;
	sub.f32 	%f289, %f285, %f288;
	add.f32 	%f290, %f281, %f289;
	add.f32 	%f291, %f283, %f290;
	add.f32 	%f292, %f287, %f291;
	add.f32 	%f293, %f288, %f292;
	sub.f32 	%f294, %f288, %f293;
	add.f32 	%f295, %f292, %f294;
	mul.rn.f32 	%f296, %f249, %f293;
	neg.f32 	%f297, %f296;
	fma.rn.f32 	%f298, %f249, %f293, %f297;
	fma.rn.f32 	%f299, %f249, %f295, %f298;
	fma.rn.f32 	%f301, %f895, %f293, %f299;
	add.rn.f32 	%f302, %f296, %f301;
	neg.f32 	%f303, %f302;
	add.rn.f32 	%f304, %f296, %f303;
	add.rn.f32 	%f305, %f304, %f301;
	mov.b32 	 %r59, %f302;
	setp.eq.s32	%p32, %r59, 1118925336;
	add.s32 	%r60, %r59, -1;
	mov.b32 	 %f306, %r60;
	add.f32 	%f307, %f305, 0f37000000;
	selp.f32	%f308, %f306, %f302, %p32;
	selp.f32	%f36, %f307, %f305, %p32;
	mul.f32 	%f309, %f308, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f310, %f309;
	fma.rn.f32 	%f312, %f310, %f896, %f308;
	fma.rn.f32 	%f314, %f310, %f897, %f312;
	mul.f32 	%f315, %f314, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f316, %f315;
	add.f32 	%f317, %f310, 0f00000000;
	ex2.approx.f32 	%f318, %f317;
	mul.f32 	%f319, %f316, %f318;
	setp.lt.f32	%p33, %f308, 0fC2D20000;
	selp.f32	%f320, 0f00000000, %f319, %p33;
	setp.gt.f32	%p34, %f308, 0f42D20000;
	selp.f32	%f956, 0f7F800000, %f320, %p34;
	setp.eq.f32	%p35, %f956, 0f7F800000;
	@%p35 bra 	BB0_16;

	fma.rn.f32 	%f956, %f956, %f36, %f956;

BB0_16:
	mov.f32 	%f947, 0f41200000;
	cvt.rzi.f32.f32	%f946, %f947;
	add.f32 	%f945, %f946, %f946;
	mov.f32 	%f944, 0f41A00000;
	sub.f32 	%f943, %f944, %f945;
	abs.f32 	%f942, %f943;
	setp.lt.f32	%p36, %f33, 0f00000000;
	setp.eq.f32	%p37, %f942, 0f3F800000;
	and.pred  	%p2, %p36, %p37;
	mov.b32 	 %r61, %f956;
	xor.b32  	%r62, %r61, -2147483648;
	mov.b32 	 %f321, %r62;
	selp.f32	%f958, %f321, %f956, %p2;
	setp.eq.f32	%p38, %f33, 0f00000000;
	@%p38 bra 	BB0_19;
	bra.uni 	BB0_17;

BB0_19:
	add.f32 	%f324, %f33, %f33;
	selp.f32	%f958, %f324, 0f00000000, %p37;
	bra.uni 	BB0_20;

BB0_17:
	setp.geu.f32	%p39, %f33, 0f00000000;
	@%p39 bra 	BB0_20;

	mov.f32 	%f949, 0f41A00000;
	cvt.rzi.f32.f32	%f323, %f949;
	setp.neu.f32	%p40, %f323, 0f41A00000;
	selp.f32	%f958, 0f7FFFFFFF, %f958, %p40;

BB0_20:
	add.f32 	%f325, %f35, 0f41A00000;
	mov.b32 	 %r63, %f325;
	setp.lt.s32	%p42, %r63, 2139095040;
	@%p42 bra 	BB0_25;

	setp.gtu.f32	%p43, %f35, 0f7F800000;
	@%p43 bra 	BB0_24;
	bra.uni 	BB0_22;

BB0_24:
	add.f32 	%f958, %f33, 0f41A00000;
	bra.uni 	BB0_25;

BB0_22:
	setp.neu.f32	%p44, %f35, 0f7F800000;
	@%p44 bra 	BB0_25;

	selp.f32	%f958, 0fFF800000, 0f7F800000, %p2;

BB0_25:
	setp.eq.f32	%p45, %f33, 0f3F800000;
	selp.f32	%f326, 0f3F800000, %f958, %p45;
	cvt.sat.f32.f32	%f327, %f326;
	mul.f32 	%f47, %f31, %f327;
	mul.f32 	%f328, %f32, 0f40800000;
	cvt.sat.f32.f32	%f48, %f328;
	mul.f32 	%f329, %f47, %f48;
	ld.global.f32 	%f330, [lightColor+4];
	ld.global.f32 	%f331, [lightColor];
	max.f32 	%f332, %f331, %f330;
	ld.global.f32 	%f333, [lightColor+8];
	max.f32 	%f334, %f332, %f333;
	mul.f32 	%f335, %f329, %f334;
	setp.lt.f32	%p46, %f335, 0f3727C5AC;
	@%p46 bra 	BB0_96;
	bra.uni 	BB0_26;

BB0_96:
	ld.global.u32 	%r242, [imageEnabled];
	and.b32  	%r151, %r242, 1;
	setp.eq.b32	%p122, %r151, 1;
	@!%p122 bra 	BB0_98;
	bra.uni 	BB0_97;

BB0_97:
	cvt.u64.u32	%rd142, %r2;
	cvt.u64.u32	%rd143, %r3;
	mov.u64 	%rd146, image;
	cvta.global.u64 	%rd141, %rd146;
	// inline asm
	call (%rd140), _rt_buffer_get_64, (%rd141, %r24, %r25, %rd142, %rd143, %rd15, %rd15);
	// inline asm
	mov.u16 	%rs89, 1;
	mov.u16 	%rs90, 0;
	st.v4.u8 	[%rd140], {%rs90, %rs90, %rs90, %rs89};
	ld.global.u32 	%r242, [imageEnabled];

BB0_98:
	and.b32  	%r154, %r242, 8;
	setp.eq.s32	%p123, %r154, 0;
	@%p123 bra 	BB0_100;

	cvt.u64.u32	%rd150, %r3;
	cvt.u64.u32	%rd149, %r2;
	mov.u64 	%rd153, image_Mask;
	cvta.global.u64 	%rd148, %rd153;
	// inline asm
	call (%rd147), _rt_buffer_get_64, (%rd148, %r24, %r24, %rd149, %rd150, %rd15, %rd15);
	// inline asm
	mov.f32 	%f804, 0f00000000;
	cvt.rzi.u32.f32	%r157, %f804;
	cvt.u16.u32	%rs91, %r157;
	mov.u16 	%rs92, 255;
	st.v2.u8 	[%rd147], {%rs91, %rs92};
	ld.global.u32 	%r242, [imageEnabled];

BB0_100:
	cvt.u64.u32	%rd6, %r2;
	cvt.u64.u32	%rd7, %r3;
	and.b32  	%r158, %r242, 4;
	setp.eq.s32	%p124, %r158, 0;
	@%p124 bra 	BB0_104;

	ld.global.u32 	%r159, [additive];
	setp.eq.s32	%p125, %r159, 0;
	mov.f32 	%f805, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs93, %f805;}

	// inline asm
	@%p125 bra 	BB0_103;

	mov.u64 	%rd166, image_HDR;
	cvta.global.u64 	%rd155, %rd166;
	mov.u32 	%r163, 8;
	// inline asm
	call (%rd154), _rt_buffer_get_64, (%rd155, %r24, %r163, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs100, %rs101, %rs102, %rs103}, [%rd154];
	// inline asm
	{  cvt.f32.f16 %f806, %rs100;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f807, %rs101;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f808, %rs102;}

	// inline asm
	// inline asm
	call (%rd160), _rt_buffer_get_64, (%rd155, %r24, %r163, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f809, %f806, 0f00000000;
	add.f32 	%f810, %f807, 0f00000000;
	add.f32 	%f811, %f808, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs99, %f811;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs98, %f810;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs97, %f809;}

	// inline asm
	st.v4.u16 	[%rd160], {%rs97, %rs98, %rs99, %rs93};
	bra.uni 	BB0_104;

BB0_26:
	mov.f32 	%f962, 0f00000000;
	mul.f32 	%f337, %f8, 0f3456BF95;
	abs.f32 	%f338, %f950;
	div.rn.f32 	%f339, %f337, %f338;
	abs.f32 	%f340, %f951;
	mul.f32 	%f341, %f10, 0f3456BF95;
	div.rn.f32 	%f342, %f341, %f340;
	abs.f32 	%f343, %f952;
	mul.f32 	%f344, %f12, 0f3456BF95;
	div.rn.f32 	%f345, %f344, %f343;
	abs.f32 	%f346, %f339;
	abs.f32 	%f347, %f342;
	abs.f32 	%f348, %f345;
	mov.f32 	%f349, 0f38D1B717;
	max.f32 	%f350, %f346, %f349;
	max.f32 	%f351, %f347, %f349;
	max.f32 	%f352, %f348, %f349;
	fma.rn.f32 	%f49, %f950, %f350, %f8;
	fma.rn.f32 	%f50, %f951, %f351, %f10;
	fma.rn.f32 	%f51, %f952, %f352, %f12;
	ld.global.u32 	%r238, [samples];
	setp.lt.s32	%p47, %r238, 1;
	@%p47 bra 	BB0_29;

	mul.f32 	%f354, %f49, 0f3456BF95;
	abs.f32 	%f355, %f354;
	mul.f32 	%f356, %f50, 0f3456BF95;
	abs.f32 	%f357, %f356;
	mul.f32 	%f358, %f51, 0f3456BF95;
	abs.f32 	%f359, %f358;
	max.f32 	%f360, %f355, %f357;
	max.f32 	%f361, %f360, %f359;
	max.f32 	%f52, %f361, %f349;
	add.u64 	%rd24, %SP, 0;
	cvta.to.local.u64 	%rd2, %rd24;
	mov.f32 	%f962, 0f00000000;
	mov.u32 	%r237, 0;
	mov.f32 	%f959, %f11;
	mov.f32 	%f960, %f9;
	mov.f32 	%f961, %f7;
	bra.uni 	BB0_28;

BB0_95:
	ld.global.f32 	%f961, [lightPos];
	ld.global.f32 	%f960, [lightPos+4];
	ld.global.f32 	%f959, [lightPos+8];

BB0_28:
	cvt.rn.f32.s32	%f371, %r237;
	mul.f32 	%f372, %f371, 0f3DD32618;
	cvt.rmi.f32.f32	%f373, %f372;
	sub.f32 	%f374, %f372, %f373;
	mul.f32 	%f375, %f371, 0f3DD2F1AA;
	cvt.rmi.f32.f32	%f376, %f375;
	sub.f32 	%f377, %f375, %f376;
	mul.f32 	%f378, %f371, 0f3DC74539;
	cvt.rmi.f32.f32	%f379, %f378;
	sub.f32 	%f380, %f378, %f379;
	add.f32 	%f381, %f377, 0f4199851F;
	add.f32 	%f382, %f380, 0f4199851F;
	add.f32 	%f383, %f374, 0f4199851F;
	mul.f32 	%f384, %f377, %f382;
	fma.rn.f32 	%f385, %f374, %f381, %f384;
	fma.rn.f32 	%f386, %f383, %f380, %f385;
	add.f32 	%f387, %f374, %f386;
	add.f32 	%f388, %f377, %f386;
	add.f32 	%f389, %f380, %f386;
	add.f32 	%f390, %f387, %f388;
	mul.f32 	%f391, %f389, %f390;
	cvt.rmi.f32.f32	%f392, %f391;
	sub.f32 	%f393, %f391, %f392;
	add.f32 	%f394, %f387, %f389;
	mul.f32 	%f395, %f388, %f394;
	cvt.rmi.f32.f32	%f396, %f395;
	sub.f32 	%f397, %f395, %f396;
	add.f32 	%f398, %f388, %f389;
	mul.f32 	%f399, %f387, %f398;
	cvt.rmi.f32.f32	%f400, %f399;
	sub.f32 	%f401, %f399, %f400;
	fma.rn.f32 	%f402, %f393, 0f40000000, 0fBF800000;
	fma.rn.f32 	%f403, %f397, 0f40000000, 0fBF800000;
	fma.rn.f32 	%f404, %f401, 0f40000000, 0fBF800000;
	ld.global.f32 	%f405, [lightRadius];
	fma.rn.f32 	%f406, %f405, %f402, %f961;
	fma.rn.f32 	%f407, %f405, %f403, %f960;
	fma.rn.f32 	%f408, %f405, %f404, %f959;
	sub.f32 	%f409, %f406, %f8;
	sub.f32 	%f410, %f407, %f10;
	sub.f32 	%f411, %f408, %f12;
	mul.f32 	%f412, %f410, %f410;
	fma.rn.f32 	%f413, %f409, %f409, %f412;
	fma.rn.f32 	%f414, %f411, %f411, %f413;
	sqrt.rn.f32 	%f370, %f414;
	rcp.rn.f32 	%f415, %f370;
	mul.f32 	%f366, %f415, %f409;
	mul.f32 	%f367, %f415, %f410;
	mul.f32 	%f368, %f415, %f411;
	mov.u32 	%r68, 1065353216;
	st.local.u32 	[%rd2], %r68;
	ld.global.u32 	%r65, [root];
	mov.u32 	%r66, 1;
	// inline asm
	call _rt_trace_64, (%r65, %f49, %f50, %f51, %f366, %f367, %f368, %r66, %f52, %f370, %rd24, %r25);
	// inline asm
	ld.local.f32 	%f416, [%rd2];
	add.f32 	%f962, %f962, %f416;
	ld.global.u32 	%r238, [samples];
	add.s32 	%r237, %r237, 1;
	setp.lt.s32	%p48, %r237, %r238;
	@%p48 bra 	BB0_95;

BB0_29:
	mov.f32 	%f964, 0f3F800000;
	setp.eq.s32	%p49, %r238, 0;
	@%p49 bra 	BB0_31;

	cvt.rn.f32.s32	%f418, %r238;
	div.rn.f32 	%f964, %f962, %f418;

BB0_31:
	cvt.sat.f32.f32	%f419, %f32;
	mul.f32 	%f420, %f47, %f419;
	mul.f32 	%f421, %f964, %f420;
	ld.global.f32 	%f422, [lightColor];
	mul.f32 	%f61, %f422, %f421;
	ld.global.f32 	%f423, [lightColor+4];
	mul.f32 	%f62, %f423, %f421;
	ld.global.f32 	%f424, [lightColor+8];
	mul.f32 	%f63, %f421, %f424;
	ld.global.u32 	%r240, [imageEnabled];
	and.b32  	%r69, %r240, 8;
	setp.eq.s32	%p50, %r69, 0;
	@%p50 bra 	BB0_44;

	mov.f32 	%f911, 0fB5BFBE8E;
	mov.f32 	%f910, 0fBF317200;
	mov.f32 	%f909, 0f35BFBE8E;
	mov.f32 	%f908, 0f3F317200;
	mov.f32 	%f907, 0f3DAAAABD;
	mov.f32 	%f906, 0f3C4CAF63;
	mov.f32 	%f905, 0f3B18F0FE;
	cvt.u64.u32	%rd28, %r2;
	cvt.u64.u32	%rd29, %r3;
	mov.u64 	%rd32, image_Mask;
	cvta.global.u64 	%rd27, %rd32;
	// inline asm
	call (%rd26), _rt_buffer_get_64, (%rd27, %r24, %r24, %rd28, %rd29, %rd15, %rd15);
	// inline asm
	mov.f32 	%f427, 0f3E68BA2E;
	cvt.rzi.f32.f32	%f428, %f427;
	fma.rn.f32 	%f429, %f428, 0fC0000000, 0f3EE8BA2E;
	abs.f32 	%f64, %f429;
	abs.f32 	%f65, %f964;
	setp.lt.f32	%p51, %f65, 0f00800000;
	mul.f32 	%f430, %f65, 0f4B800000;
	selp.f32	%f431, 0fC3170000, 0fC2FE0000, %p51;
	selp.f32	%f432, %f430, %f65, %p51;
	mov.b32 	 %r72, %f432;
	and.b32  	%r73, %r72, 8388607;
	or.b32  	%r74, %r73, 1065353216;
	mov.b32 	 %f433, %r74;
	shr.u32 	%r75, %r72, 23;
	cvt.rn.f32.u32	%f434, %r75;
	add.f32 	%f435, %f431, %f434;
	setp.gt.f32	%p52, %f433, 0f3FB504F3;
	mul.f32 	%f436, %f433, 0f3F000000;
	add.f32 	%f437, %f435, 0f3F800000;
	selp.f32	%f438, %f436, %f433, %p52;
	selp.f32	%f439, %f437, %f435, %p52;
	add.f32 	%f440, %f438, 0fBF800000;
	add.f32 	%f426, %f438, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f425,%f426;
	// inline asm
	add.f32 	%f441, %f440, %f440;
	mul.f32 	%f442, %f425, %f441;
	mul.f32 	%f443, %f442, %f442;
	fma.rn.f32 	%f446, %f905, %f443, %f906;
	fma.rn.f32 	%f448, %f446, %f443, %f907;
	mul.rn.f32 	%f449, %f448, %f443;
	mul.rn.f32 	%f450, %f449, %f442;
	sub.f32 	%f451, %f440, %f442;
	neg.f32 	%f452, %f442;
	add.f32 	%f453, %f451, %f451;
	fma.rn.f32 	%f454, %f452, %f440, %f453;
	mul.rn.f32 	%f455, %f425, %f454;
	add.f32 	%f456, %f450, %f442;
	sub.f32 	%f457, %f442, %f456;
	add.f32 	%f458, %f450, %f457;
	add.f32 	%f459, %f455, %f458;
	add.f32 	%f460, %f456, %f459;
	sub.f32 	%f461, %f456, %f460;
	add.f32 	%f462, %f459, %f461;
	mul.rn.f32 	%f464, %f439, %f908;
	mul.rn.f32 	%f466, %f439, %f909;
	add.f32 	%f467, %f464, %f460;
	sub.f32 	%f468, %f464, %f467;
	add.f32 	%f469, %f460, %f468;
	add.f32 	%f470, %f462, %f469;
	add.f32 	%f471, %f466, %f470;
	add.f32 	%f472, %f467, %f471;
	sub.f32 	%f473, %f467, %f472;
	add.f32 	%f474, %f471, %f473;
	mov.f32 	%f475, 0f3EE8BA2E;
	mul.rn.f32 	%f476, %f475, %f472;
	neg.f32 	%f477, %f476;
	fma.rn.f32 	%f478, %f475, %f472, %f477;
	fma.rn.f32 	%f479, %f475, %f474, %f478;
	mov.f32 	%f480, 0f00000000;
	fma.rn.f32 	%f481, %f480, %f472, %f479;
	add.rn.f32 	%f482, %f476, %f481;
	neg.f32 	%f483, %f482;
	add.rn.f32 	%f484, %f476, %f483;
	add.rn.f32 	%f485, %f484, %f481;
	mov.b32 	 %r76, %f482;
	setp.eq.s32	%p53, %r76, 1118925336;
	add.s32 	%r77, %r76, -1;
	mov.b32 	 %f486, %r77;
	add.f32 	%f487, %f485, 0f37000000;
	selp.f32	%f488, %f486, %f482, %p53;
	selp.f32	%f66, %f487, %f485, %p53;
	mul.f32 	%f489, %f488, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f490, %f489;
	fma.rn.f32 	%f492, %f490, %f910, %f488;
	fma.rn.f32 	%f494, %f490, %f911, %f492;
	mul.f32 	%f495, %f494, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f496, %f495;
	add.f32 	%f497, %f490, 0f00000000;
	ex2.approx.f32 	%f498, %f497;
	mul.f32 	%f499, %f496, %f498;
	setp.lt.f32	%p54, %f488, 0fC2D20000;
	selp.f32	%f500, 0f00000000, %f499, %p54;
	setp.gt.f32	%p55, %f488, 0f42D20000;
	selp.f32	%f965, 0f7F800000, %f500, %p55;
	setp.eq.f32	%p56, %f965, 0f7F800000;
	@%p56 bra 	BB0_34;

	fma.rn.f32 	%f965, %f965, %f66, %f965;

BB0_34:
	setp.lt.f32	%p57, %f964, 0f00000000;
	setp.eq.f32	%p58, %f64, 0f3F800000;
	and.pred  	%p3, %p57, %p58;
	mov.b32 	 %r78, %f965;
	xor.b32  	%r79, %r78, -2147483648;
	mov.b32 	 %f501, %r79;
	selp.f32	%f967, %f501, %f965, %p3;
	setp.eq.f32	%p59, %f964, 0f00000000;
	@%p59 bra 	BB0_37;
	bra.uni 	BB0_35;

BB0_37:
	add.f32 	%f504, %f964, %f964;
	selp.f32	%f967, %f504, 0f00000000, %p58;
	bra.uni 	BB0_38;

BB0_123:
	mov.u64 	%rd287, image_HDR;
	cvta.global.u64 	%rd282, %rd287;
	mov.u32 	%r208, 8;
	// inline asm
	call (%rd281), _rt_buffer_get_64, (%rd282, %r24, %r208, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f854, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs167, %f854;}

	// inline asm
	mov.u16 	%rs168, 0;
	st.v4.u16 	[%rd281], {%rs167, %rs167, %rs167, %rs168};

BB0_124:
	ld.global.u32 	%r209, [additive];
	setp.eq.s32	%p134, %r209, 0;
	@%p134 bra 	BB0_126;

	mov.u64 	%rd300, image_RNM0;
	cvta.global.u64 	%rd289, %rd300;
	mov.u32 	%r213, 8;
	// inline asm
	call (%rd288), _rt_buffer_get_64, (%rd289, %r24, %r213, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs175, %rs176, %rs177, %rs178}, [%rd288];
	// inline asm
	{  cvt.f32.f16 %f855, %rs175;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f856, %rs176;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f857, %rs177;}

	// inline asm
	// inline asm
	call (%rd294), _rt_buffer_get_64, (%rd289, %r24, %r213, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f858, %f855, 0f00000000;
	add.f32 	%f859, %f856, 0f00000000;
	add.f32 	%f860, %f857, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs174, %f860;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs173, %f859;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs172, %f858;}

	// inline asm
	mov.u16 	%rs179, 0;
	st.v4.u16 	[%rd294], {%rs172, %rs173, %rs174, %rs179};
	bra.uni 	BB0_127;

BB0_126:
	mov.u64 	%rd307, image_RNM0;
	cvta.global.u64 	%rd302, %rd307;
	mov.u32 	%r215, 8;
	// inline asm
	call (%rd301), _rt_buffer_get_64, (%rd302, %r24, %r215, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f861, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs180, %f861;}

	// inline asm
	mov.u16 	%rs181, 0;
	st.v4.u16 	[%rd301], {%rs180, %rs180, %rs180, %rs181};

BB0_127:
	ld.global.u32 	%r216, [additive];
	setp.eq.s32	%p135, %r216, 0;
	@%p135 bra 	BB0_129;

	mov.u64 	%rd320, image_RNM1;
	cvta.global.u64 	%rd309, %rd320;
	mov.u32 	%r220, 8;
	// inline asm
	call (%rd308), _rt_buffer_get_64, (%rd309, %r24, %r220, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs188, %rs189, %rs190, %rs191}, [%rd308];
	// inline asm
	{  cvt.f32.f16 %f862, %rs188;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f863, %rs189;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f864, %rs190;}

	// inline asm
	// inline asm
	call (%rd314), _rt_buffer_get_64, (%rd309, %r24, %r220, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f865, %f862, 0f00000000;
	add.f32 	%f866, %f863, 0f00000000;
	add.f32 	%f867, %f864, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs187, %f867;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs186, %f866;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs185, %f865;}

	// inline asm
	mov.u16 	%rs192, 0;
	st.v4.u16 	[%rd314], {%rs185, %rs186, %rs187, %rs192};
	bra.uni 	BB0_130;

BB0_129:
	mov.u64 	%rd327, image_RNM1;
	cvta.global.u64 	%rd322, %rd327;
	mov.u32 	%r222, 8;
	// inline asm
	call (%rd321), _rt_buffer_get_64, (%rd322, %r24, %r222, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f868, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs193, %f868;}

	// inline asm
	mov.u16 	%rs194, 0;
	st.v4.u16 	[%rd321], {%rs193, %rs193, %rs193, %rs194};

BB0_130:
	ld.global.u32 	%r223, [additive];
	setp.eq.s32	%p136, %r223, 0;
	@%p136 bra 	BB0_132;

	mov.u64 	%rd340, image_RNM2;
	cvta.global.u64 	%rd329, %rd340;
	mov.u32 	%r227, 8;
	// inline asm
	call (%rd328), _rt_buffer_get_64, (%rd329, %r24, %r227, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs201, %rs202, %rs203, %rs204}, [%rd328];
	// inline asm
	{  cvt.f32.f16 %f869, %rs201;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f870, %rs202;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f871, %rs203;}

	// inline asm
	// inline asm
	call (%rd334), _rt_buffer_get_64, (%rd329, %r24, %r227, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f872, %f869, 0f00000000;
	add.f32 	%f873, %f870, 0f00000000;
	add.f32 	%f874, %f871, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs200, %f874;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs199, %f873;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs198, %f872;}

	// inline asm
	mov.u16 	%rs205, 0;
	st.v4.u16 	[%rd334], {%rs198, %rs199, %rs200, %rs205};
	bra.uni 	BB0_133;

BB0_132:
	mov.u64 	%rd347, image_RNM2;
	cvta.global.u64 	%rd342, %rd347;
	mov.u32 	%r229, 8;
	// inline asm
	call (%rd341), _rt_buffer_get_64, (%rd342, %r24, %r229, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f875, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs206, %f875;}

	// inline asm
	mov.u16 	%rs207, 0;
	st.v4.u16 	[%rd341], {%rs206, %rs206, %rs206, %rs207};

BB0_133:
	ld.global.u32 	%r230, [additive];
	setp.eq.s32	%p137, %r230, 0;
	@%p137 bra 	BB0_135;

	mov.u64 	%rd360, image_RNM3;
	cvta.global.u64 	%rd349, %rd360;
	mov.u32 	%r234, 8;
	// inline asm
	call (%rd348), _rt_buffer_get_64, (%rd349, %r24, %r234, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs214, %rs215, %rs216, %rs217}, [%rd348];
	// inline asm
	{  cvt.f32.f16 %f876, %rs214;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f877, %rs215;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f878, %rs216;}

	// inline asm
	// inline asm
	call (%rd354), _rt_buffer_get_64, (%rd349, %r24, %r234, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f879, %f876, 0f00000000;
	add.f32 	%f880, %f877, 0f00000000;
	add.f32 	%f881, %f878, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs213, %f881;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs212, %f880;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs211, %f879;}

	// inline asm
	mov.u16 	%rs218, 0;
	st.v4.u16 	[%rd354], {%rs211, %rs212, %rs213, %rs218};
	bra.uni 	BB0_136;

BB0_135:
	mov.u64 	%rd367, image_RNM3;
	cvta.global.u64 	%rd362, %rd367;
	mov.u32 	%r236, 8;
	// inline asm
	call (%rd361), _rt_buffer_get_64, (%rd362, %r24, %r236, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f882, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs219, %f882;}

	// inline asm
	mov.u16 	%rs220, 0;
	st.v4.u16 	[%rd361], {%rs219, %rs219, %rs219, %rs220};
	bra.uni 	BB0_136;

BB0_103:
	mov.u64 	%rd173, image_HDR;
	cvta.global.u64 	%rd168, %rd173;
	mov.u32 	%r165, 8;
	// inline asm
	call (%rd167), _rt_buffer_get_64, (%rd168, %r24, %r165, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f812, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs104, %f812;}

	// inline asm
	st.v4.u16 	[%rd167], {%rs104, %rs104, %rs104, %rs93};

BB0_104:
	ld.global.u32 	%r166, [additive];
	setp.eq.s32	%p126, %r166, 0;
	mov.f32 	%f813, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs105, %f813;}

	// inline asm
	@%p126 bra 	BB0_106;

	mov.u64 	%rd186, image_RNM0;
	cvta.global.u64 	%rd175, %rd186;
	mov.u32 	%r170, 8;
	// inline asm
	call (%rd174), _rt_buffer_get_64, (%rd175, %r24, %r170, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs112, %rs113, %rs114, %rs115}, [%rd174];
	// inline asm
	{  cvt.f32.f16 %f814, %rs112;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f815, %rs113;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f816, %rs114;}

	// inline asm
	// inline asm
	call (%rd180), _rt_buffer_get_64, (%rd175, %r24, %r170, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f817, %f814, 0f00000000;
	add.f32 	%f818, %f815, 0f00000000;
	add.f32 	%f819, %f816, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs111, %f819;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs110, %f818;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs109, %f817;}

	// inline asm
	st.v4.u16 	[%rd180], {%rs109, %rs110, %rs111, %rs105};
	bra.uni 	BB0_107;

BB0_106:
	mov.u64 	%rd193, image_RNM0;
	cvta.global.u64 	%rd188, %rd193;
	mov.u32 	%r172, 8;
	// inline asm
	call (%rd187), _rt_buffer_get_64, (%rd188, %r24, %r172, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f820, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs116, %f820;}

	// inline asm
	st.v4.u16 	[%rd187], {%rs116, %rs116, %rs116, %rs105};

BB0_107:
	ld.global.u32 	%r173, [additive];
	setp.eq.s32	%p127, %r173, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs117, %f813;}

	// inline asm
	@%p127 bra 	BB0_109;

	mov.u64 	%rd206, image_RNM1;
	cvta.global.u64 	%rd195, %rd206;
	mov.u32 	%r177, 8;
	// inline asm
	call (%rd194), _rt_buffer_get_64, (%rd195, %r24, %r177, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs124, %rs125, %rs126, %rs127}, [%rd194];
	// inline asm
	{  cvt.f32.f16 %f822, %rs124;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f823, %rs125;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f824, %rs126;}

	// inline asm
	// inline asm
	call (%rd200), _rt_buffer_get_64, (%rd195, %r24, %r177, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f825, %f822, 0f00000000;
	add.f32 	%f826, %f823, 0f00000000;
	add.f32 	%f827, %f824, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs123, %f827;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs122, %f826;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs121, %f825;}

	// inline asm
	st.v4.u16 	[%rd200], {%rs121, %rs122, %rs123, %rs117};
	bra.uni 	BB0_110;

BB0_109:
	mov.u64 	%rd213, image_RNM1;
	cvta.global.u64 	%rd208, %rd213;
	mov.u32 	%r179, 8;
	// inline asm
	call (%rd207), _rt_buffer_get_64, (%rd208, %r24, %r179, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f828, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs128, %f828;}

	// inline asm
	st.v4.u16 	[%rd207], {%rs128, %rs128, %rs128, %rs117};

BB0_110:
	ld.global.u32 	%r180, [additive];
	setp.eq.s32	%p128, %r180, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs129, %f813;}

	// inline asm
	@%p128 bra 	BB0_112;

	mov.u64 	%rd226, image_RNM2;
	cvta.global.u64 	%rd215, %rd226;
	mov.u32 	%r184, 8;
	// inline asm
	call (%rd214), _rt_buffer_get_64, (%rd215, %r24, %r184, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs136, %rs137, %rs138, %rs139}, [%rd214];
	// inline asm
	{  cvt.f32.f16 %f830, %rs136;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f831, %rs137;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f832, %rs138;}

	// inline asm
	// inline asm
	call (%rd220), _rt_buffer_get_64, (%rd215, %r24, %r184, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f833, %f830, 0f00000000;
	add.f32 	%f834, %f831, 0f00000000;
	add.f32 	%f835, %f832, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs135, %f835;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs134, %f834;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs133, %f833;}

	// inline asm
	st.v4.u16 	[%rd220], {%rs133, %rs134, %rs135, %rs129};
	bra.uni 	BB0_113;

BB0_112:
	mov.u64 	%rd233, image_RNM2;
	cvta.global.u64 	%rd228, %rd233;
	mov.u32 	%r186, 8;
	// inline asm
	call (%rd227), _rt_buffer_get_64, (%rd228, %r24, %r186, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f836, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs140, %f836;}

	// inline asm
	st.v4.u16 	[%rd227], {%rs140, %rs140, %rs140, %rs129};

BB0_113:
	ld.global.u32 	%r187, [additive];
	setp.eq.s32	%p129, %r187, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs141, %f813;}

	// inline asm
	@%p129 bra 	BB0_115;

	mov.u64 	%rd246, image_RNM3;
	cvta.global.u64 	%rd235, %rd246;
	mov.u32 	%r191, 8;
	// inline asm
	call (%rd234), _rt_buffer_get_64, (%rd235, %r24, %r191, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs148, %rs149, %rs150, %rs151}, [%rd234];
	// inline asm
	{  cvt.f32.f16 %f838, %rs148;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f839, %rs149;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f840, %rs150;}

	// inline asm
	// inline asm
	call (%rd240), _rt_buffer_get_64, (%rd235, %r24, %r191, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f841, %f838, 0f00000000;
	add.f32 	%f842, %f839, 0f00000000;
	add.f32 	%f843, %f840, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs147, %f843;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs146, %f842;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs145, %f841;}

	// inline asm
	st.v4.u16 	[%rd240], {%rs145, %rs146, %rs147, %rs141};
	bra.uni 	BB0_136;

BB0_115:
	mov.u64 	%rd253, image_RNM3;
	cvta.global.u64 	%rd248, %rd253;
	mov.u32 	%r193, 8;
	// inline asm
	call (%rd247), _rt_buffer_get_64, (%rd248, %r24, %r193, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f844, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs152, %f844;}

	// inline asm
	st.v4.u16 	[%rd247], {%rs152, %rs152, %rs152, %rs141};
	bra.uni 	BB0_136;

BB0_35:
	setp.geu.f32	%p60, %f964, 0f00000000;
	@%p60 bra 	BB0_38;

	cvt.rzi.f32.f32	%f503, %f475;
	setp.neu.f32	%p61, %f503, 0f3EE8BA2E;
	selp.f32	%f967, 0f7FFFFFFF, %f967, %p61;

BB0_38:
	add.f32 	%f505, %f65, 0f3EE8BA2E;
	mov.b32 	 %r80, %f505;
	setp.lt.s32	%p63, %r80, 2139095040;
	@%p63 bra 	BB0_43;

	setp.gtu.f32	%p64, %f65, 0f7F800000;
	@%p64 bra 	BB0_42;
	bra.uni 	BB0_40;

BB0_42:
	add.f32 	%f967, %f964, 0f3EE8BA2E;
	bra.uni 	BB0_43;

BB0_40:
	setp.neu.f32	%p65, %f65, 0f7F800000;
	@%p65 bra 	BB0_43;

	selp.f32	%f967, 0fFF800000, 0f7F800000, %p3;

BB0_43:
	mul.f32 	%f506, %f967, 0f437F0000;
	setp.eq.f32	%p66, %f964, 0f3F800000;
	selp.f32	%f507, 0f437F0000, %f506, %p66;
	cvt.rzi.u32.f32	%r81, %f507;
	cvt.u16.u32	%rs19, %r81;
	mov.u16 	%rs20, 255;
	st.v2.u8 	[%rd26], {%rs19, %rs20};
	ld.global.u32 	%r240, [imageEnabled];

BB0_44:
	and.b32  	%r82, %r240, 1;
	setp.eq.b32	%p67, %r82, 1;
	@!%p67 bra 	BB0_79;
	bra.uni 	BB0_45;

BB0_45:
	mov.f32 	%f918, 0fB5BFBE8E;
	mov.f32 	%f917, 0fBF317200;
	mov.f32 	%f916, 0f35BFBE8E;
	mov.f32 	%f915, 0f3F317200;
	mov.f32 	%f914, 0f3DAAAABD;
	mov.f32 	%f913, 0f3C4CAF63;
	mov.f32 	%f912, 0f3B18F0FE;
	mov.f32 	%f510, 0f3E666666;
	cvt.rzi.f32.f32	%f511, %f510;
	fma.rn.f32 	%f512, %f511, 0fC0000000, 0f3EE66666;
	abs.f32 	%f77, %f512;
	abs.f32 	%f78, %f61;
	setp.lt.f32	%p68, %f78, 0f00800000;
	mul.f32 	%f513, %f78, 0f4B800000;
	selp.f32	%f514, 0fC3170000, 0fC2FE0000, %p68;
	selp.f32	%f515, %f513, %f78, %p68;
	mov.b32 	 %r83, %f515;
	and.b32  	%r84, %r83, 8388607;
	or.b32  	%r85, %r84, 1065353216;
	mov.b32 	 %f516, %r85;
	shr.u32 	%r86, %r83, 23;
	cvt.rn.f32.u32	%f517, %r86;
	add.f32 	%f518, %f514, %f517;
	setp.gt.f32	%p69, %f516, 0f3FB504F3;
	mul.f32 	%f519, %f516, 0f3F000000;
	add.f32 	%f520, %f518, 0f3F800000;
	selp.f32	%f521, %f519, %f516, %p69;
	selp.f32	%f522, %f520, %f518, %p69;
	add.f32 	%f523, %f521, 0fBF800000;
	add.f32 	%f509, %f521, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f508,%f509;
	// inline asm
	add.f32 	%f524, %f523, %f523;
	mul.f32 	%f525, %f508, %f524;
	mul.f32 	%f526, %f525, %f525;
	fma.rn.f32 	%f529, %f912, %f526, %f913;
	fma.rn.f32 	%f531, %f529, %f526, %f914;
	mul.rn.f32 	%f532, %f531, %f526;
	mul.rn.f32 	%f533, %f532, %f525;
	sub.f32 	%f534, %f523, %f525;
	neg.f32 	%f535, %f525;
	add.f32 	%f536, %f534, %f534;
	fma.rn.f32 	%f537, %f535, %f523, %f536;
	mul.rn.f32 	%f538, %f508, %f537;
	add.f32 	%f539, %f533, %f525;
	sub.f32 	%f540, %f525, %f539;
	add.f32 	%f541, %f533, %f540;
	add.f32 	%f542, %f538, %f541;
	add.f32 	%f543, %f539, %f542;
	sub.f32 	%f544, %f539, %f543;
	add.f32 	%f545, %f542, %f544;
	mul.rn.f32 	%f547, %f522, %f915;
	mul.rn.f32 	%f549, %f522, %f916;
	add.f32 	%f550, %f547, %f543;
	sub.f32 	%f551, %f547, %f550;
	add.f32 	%f552, %f543, %f551;
	add.f32 	%f553, %f545, %f552;
	add.f32 	%f554, %f549, %f553;
	add.f32 	%f555, %f550, %f554;
	sub.f32 	%f556, %f550, %f555;
	add.f32 	%f557, %f554, %f556;
	mov.f32 	%f558, 0f3EE66666;
	mul.rn.f32 	%f559, %f558, %f555;
	neg.f32 	%f560, %f559;
	fma.rn.f32 	%f561, %f558, %f555, %f560;
	fma.rn.f32 	%f562, %f558, %f557, %f561;
	mov.f32 	%f563, 0f00000000;
	fma.rn.f32 	%f564, %f563, %f555, %f562;
	add.rn.f32 	%f565, %f559, %f564;
	neg.f32 	%f566, %f565;
	add.rn.f32 	%f567, %f559, %f566;
	add.rn.f32 	%f568, %f567, %f564;
	mov.b32 	 %r87, %f565;
	setp.eq.s32	%p70, %r87, 1118925336;
	add.s32 	%r88, %r87, -1;
	mov.b32 	 %f569, %r88;
	add.f32 	%f570, %f568, 0f37000000;
	selp.f32	%f571, %f569, %f565, %p70;
	selp.f32	%f79, %f570, %f568, %p70;
	mul.f32 	%f572, %f571, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f573, %f572;
	fma.rn.f32 	%f575, %f573, %f917, %f571;
	fma.rn.f32 	%f577, %f573, %f918, %f575;
	mul.f32 	%f578, %f577, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f579, %f578;
	add.f32 	%f580, %f573, 0f00000000;
	ex2.approx.f32 	%f581, %f580;
	mul.f32 	%f582, %f579, %f581;
	setp.lt.f32	%p71, %f571, 0fC2D20000;
	selp.f32	%f583, 0f00000000, %f582, %p71;
	setp.gt.f32	%p72, %f571, 0f42D20000;
	selp.f32	%f968, 0f7F800000, %f583, %p72;
	setp.eq.f32	%p73, %f968, 0f7F800000;
	@%p73 bra 	BB0_47;

	fma.rn.f32 	%f968, %f968, %f79, %f968;

BB0_47:
	setp.lt.f32	%p74, %f61, 0f00000000;
	setp.eq.f32	%p75, %f77, 0f3F800000;
	and.pred  	%p4, %p74, %p75;
	mov.b32 	 %r89, %f968;
	xor.b32  	%r90, %r89, -2147483648;
	mov.b32 	 %f584, %r90;
	selp.f32	%f970, %f584, %f968, %p4;
	setp.eq.f32	%p76, %f61, 0f00000000;
	@%p76 bra 	BB0_50;
	bra.uni 	BB0_48;

BB0_50:
	add.f32 	%f587, %f61, %f61;
	selp.f32	%f970, %f587, 0f00000000, %p75;
	bra.uni 	BB0_51;

BB0_48:
	setp.geu.f32	%p77, %f61, 0f00000000;
	@%p77 bra 	BB0_51;

	cvt.rzi.f32.f32	%f586, %f558;
	setp.neu.f32	%p78, %f586, 0f3EE66666;
	selp.f32	%f970, 0f7FFFFFFF, %f970, %p78;

BB0_51:
	add.f32 	%f588, %f78, 0f3EE66666;
	mov.b32 	 %r91, %f588;
	setp.lt.s32	%p80, %r91, 2139095040;
	@%p80 bra 	BB0_56;

	setp.gtu.f32	%p81, %f78, 0f7F800000;
	@%p81 bra 	BB0_55;
	bra.uni 	BB0_53;

BB0_55:
	add.f32 	%f970, %f61, 0f3EE66666;
	bra.uni 	BB0_56;

BB0_53:
	setp.neu.f32	%p82, %f78, 0f7F800000;
	@%p82 bra 	BB0_56;

	selp.f32	%f970, 0fFF800000, 0f7F800000, %p4;

BB0_56:
	mov.f32 	%f925, 0fB5BFBE8E;
	mov.f32 	%f924, 0fBF317200;
	mov.f32 	%f923, 0f35BFBE8E;
	mov.f32 	%f922, 0f3F317200;
	mov.f32 	%f921, 0f3DAAAABD;
	mov.f32 	%f920, 0f3C4CAF63;
	mov.f32 	%f919, 0f3B18F0FE;
	setp.eq.f32	%p83, %f61, 0f3F800000;
	selp.f32	%f90, 0f3F800000, %f970, %p83;
	abs.f32 	%f91, %f62;
	setp.lt.f32	%p84, %f91, 0f00800000;
	mul.f32 	%f591, %f91, 0f4B800000;
	selp.f32	%f592, 0fC3170000, 0fC2FE0000, %p84;
	selp.f32	%f593, %f591, %f91, %p84;
	mov.b32 	 %r92, %f593;
	and.b32  	%r93, %r92, 8388607;
	or.b32  	%r94, %r93, 1065353216;
	mov.b32 	 %f594, %r94;
	shr.u32 	%r95, %r92, 23;
	cvt.rn.f32.u32	%f595, %r95;
	add.f32 	%f596, %f592, %f595;
	setp.gt.f32	%p85, %f594, 0f3FB504F3;
	mul.f32 	%f597, %f594, 0f3F000000;
	add.f32 	%f598, %f596, 0f3F800000;
	selp.f32	%f599, %f597, %f594, %p85;
	selp.f32	%f600, %f598, %f596, %p85;
	add.f32 	%f601, %f599, 0fBF800000;
	add.f32 	%f590, %f599, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f589,%f590;
	// inline asm
	add.f32 	%f602, %f601, %f601;
	mul.f32 	%f603, %f589, %f602;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f607, %f919, %f604, %f920;
	fma.rn.f32 	%f609, %f607, %f604, %f921;
	mul.rn.f32 	%f610, %f609, %f604;
	mul.rn.f32 	%f611, %f610, %f603;
	sub.f32 	%f612, %f601, %f603;
	neg.f32 	%f613, %f603;
	add.f32 	%f614, %f612, %f612;
	fma.rn.f32 	%f615, %f613, %f601, %f614;
	mul.rn.f32 	%f616, %f589, %f615;
	add.f32 	%f617, %f611, %f603;
	sub.f32 	%f618, %f603, %f617;
	add.f32 	%f619, %f611, %f618;
	add.f32 	%f620, %f616, %f619;
	add.f32 	%f621, %f617, %f620;
	sub.f32 	%f622, %f617, %f621;
	add.f32 	%f623, %f620, %f622;
	mul.rn.f32 	%f625, %f600, %f922;
	mul.rn.f32 	%f627, %f600, %f923;
	add.f32 	%f628, %f625, %f621;
	sub.f32 	%f629, %f625, %f628;
	add.f32 	%f630, %f621, %f629;
	add.f32 	%f631, %f623, %f630;
	add.f32 	%f632, %f627, %f631;
	add.f32 	%f633, %f628, %f632;
	sub.f32 	%f634, %f628, %f633;
	add.f32 	%f635, %f632, %f634;
	mul.rn.f32 	%f637, %f558, %f633;
	neg.f32 	%f638, %f637;
	fma.rn.f32 	%f639, %f558, %f633, %f638;
	fma.rn.f32 	%f640, %f558, %f635, %f639;
	fma.rn.f32 	%f642, %f563, %f633, %f640;
	add.rn.f32 	%f643, %f637, %f642;
	neg.f32 	%f644, %f643;
	add.rn.f32 	%f645, %f637, %f644;
	add.rn.f32 	%f646, %f645, %f642;
	mov.b32 	 %r96, %f643;
	setp.eq.s32	%p86, %r96, 1118925336;
	add.s32 	%r97, %r96, -1;
	mov.b32 	 %f647, %r97;
	add.f32 	%f648, %f646, 0f37000000;
	selp.f32	%f649, %f647, %f643, %p86;
	selp.f32	%f92, %f648, %f646, %p86;
	mul.f32 	%f650, %f649, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f651, %f650;
	fma.rn.f32 	%f653, %f651, %f924, %f649;
	fma.rn.f32 	%f655, %f651, %f925, %f653;
	mul.f32 	%f656, %f655, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f657, %f656;
	add.f32 	%f658, %f651, 0f00000000;
	ex2.approx.f32 	%f659, %f658;
	mul.f32 	%f660, %f657, %f659;
	setp.lt.f32	%p87, %f649, 0fC2D20000;
	selp.f32	%f661, 0f00000000, %f660, %p87;
	setp.gt.f32	%p88, %f649, 0f42D20000;
	selp.f32	%f971, 0f7F800000, %f661, %p88;
	setp.eq.f32	%p89, %f971, 0f7F800000;
	@%p89 bra 	BB0_58;

	fma.rn.f32 	%f971, %f971, %f92, %f971;

BB0_58:
	setp.lt.f32	%p90, %f62, 0f00000000;
	and.pred  	%p5, %p90, %p75;
	mov.b32 	 %r98, %f971;
	xor.b32  	%r99, %r98, -2147483648;
	mov.b32 	 %f662, %r99;
	selp.f32	%f973, %f662, %f971, %p5;
	setp.eq.f32	%p92, %f62, 0f00000000;
	@%p92 bra 	BB0_61;
	bra.uni 	BB0_59;

BB0_61:
	add.f32 	%f665, %f62, %f62;
	selp.f32	%f973, %f665, 0f00000000, %p75;
	bra.uni 	BB0_62;

BB0_59:
	setp.geu.f32	%p93, %f62, 0f00000000;
	@%p93 bra 	BB0_62;

	cvt.rzi.f32.f32	%f664, %f558;
	setp.neu.f32	%p94, %f664, 0f3EE66666;
	selp.f32	%f973, 0f7FFFFFFF, %f973, %p94;

BB0_62:
	add.f32 	%f666, %f91, 0f3EE66666;
	mov.b32 	 %r100, %f666;
	setp.lt.s32	%p96, %r100, 2139095040;
	@%p96 bra 	BB0_67;

	setp.gtu.f32	%p97, %f91, 0f7F800000;
	@%p97 bra 	BB0_66;
	bra.uni 	BB0_64;

BB0_66:
	add.f32 	%f973, %f62, 0f3EE66666;
	bra.uni 	BB0_67;

BB0_64:
	setp.neu.f32	%p98, %f91, 0f7F800000;
	@%p98 bra 	BB0_67;

	selp.f32	%f973, 0fFF800000, 0f7F800000, %p5;

BB0_67:
	mov.f32 	%f932, 0fB5BFBE8E;
	mov.f32 	%f931, 0fBF317200;
	mov.f32 	%f930, 0f35BFBE8E;
	mov.f32 	%f929, 0f3F317200;
	mov.f32 	%f928, 0f3DAAAABD;
	mov.f32 	%f927, 0f3C4CAF63;
	mov.f32 	%f926, 0f3B18F0FE;
	setp.eq.f32	%p99, %f62, 0f3F800000;
	selp.f32	%f103, 0f3F800000, %f973, %p99;
	abs.f32 	%f104, %f63;
	setp.lt.f32	%p100, %f104, 0f00800000;
	mul.f32 	%f669, %f104, 0f4B800000;
	selp.f32	%f670, 0fC3170000, 0fC2FE0000, %p100;
	selp.f32	%f671, %f669, %f104, %p100;
	mov.b32 	 %r101, %f671;
	and.b32  	%r102, %r101, 8388607;
	or.b32  	%r103, %r102, 1065353216;
	mov.b32 	 %f672, %r103;
	shr.u32 	%r104, %r101, 23;
	cvt.rn.f32.u32	%f673, %r104;
	add.f32 	%f674, %f670, %f673;
	setp.gt.f32	%p101, %f672, 0f3FB504F3;
	mul.f32 	%f675, %f672, 0f3F000000;
	add.f32 	%f676, %f674, 0f3F800000;
	selp.f32	%f677, %f675, %f672, %p101;
	selp.f32	%f678, %f676, %f674, %p101;
	add.f32 	%f679, %f677, 0fBF800000;
	add.f32 	%f668, %f677, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f667,%f668;
	// inline asm
	add.f32 	%f680, %f679, %f679;
	mul.f32 	%f681, %f667, %f680;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f685, %f926, %f682, %f927;
	fma.rn.f32 	%f687, %f685, %f682, %f928;
	mul.rn.f32 	%f688, %f687, %f682;
	mul.rn.f32 	%f689, %f688, %f681;
	sub.f32 	%f690, %f679, %f681;
	neg.f32 	%f691, %f681;
	add.f32 	%f692, %f690, %f690;
	fma.rn.f32 	%f693, %f691, %f679, %f692;
	mul.rn.f32 	%f694, %f667, %f693;
	add.f32 	%f695, %f689, %f681;
	sub.f32 	%f696, %f681, %f695;
	add.f32 	%f697, %f689, %f696;
	add.f32 	%f698, %f694, %f697;
	add.f32 	%f699, %f695, %f698;
	sub.f32 	%f700, %f695, %f699;
	add.f32 	%f701, %f698, %f700;
	mul.rn.f32 	%f703, %f678, %f929;
	mul.rn.f32 	%f705, %f678, %f930;
	add.f32 	%f706, %f703, %f699;
	sub.f32 	%f707, %f703, %f706;
	add.f32 	%f708, %f699, %f707;
	add.f32 	%f709, %f701, %f708;
	add.f32 	%f710, %f705, %f709;
	add.f32 	%f711, %f706, %f710;
	sub.f32 	%f712, %f706, %f711;
	add.f32 	%f713, %f710, %f712;
	mul.rn.f32 	%f715, %f558, %f711;
	neg.f32 	%f716, %f715;
	fma.rn.f32 	%f717, %f558, %f711, %f716;
	fma.rn.f32 	%f718, %f558, %f713, %f717;
	fma.rn.f32 	%f720, %f563, %f711, %f718;
	add.rn.f32 	%f721, %f715, %f720;
	neg.f32 	%f722, %f721;
	add.rn.f32 	%f723, %f715, %f722;
	add.rn.f32 	%f724, %f723, %f720;
	mov.b32 	 %r105, %f721;
	setp.eq.s32	%p102, %r105, 1118925336;
	add.s32 	%r106, %r105, -1;
	mov.b32 	 %f725, %r106;
	add.f32 	%f726, %f724, 0f37000000;
	selp.f32	%f727, %f725, %f721, %p102;
	selp.f32	%f105, %f726, %f724, %p102;
	mul.f32 	%f728, %f727, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f729, %f728;
	fma.rn.f32 	%f731, %f729, %f931, %f727;
	fma.rn.f32 	%f733, %f729, %f932, %f731;
	mul.f32 	%f734, %f733, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f735, %f734;
	add.f32 	%f736, %f729, 0f00000000;
	ex2.approx.f32 	%f737, %f736;
	mul.f32 	%f738, %f735, %f737;
	setp.lt.f32	%p103, %f727, 0fC2D20000;
	selp.f32	%f739, 0f00000000, %f738, %p103;
	setp.gt.f32	%p104, %f727, 0f42D20000;
	selp.f32	%f974, 0f7F800000, %f739, %p104;
	setp.eq.f32	%p105, %f974, 0f7F800000;
	@%p105 bra 	BB0_69;

	fma.rn.f32 	%f974, %f974, %f105, %f974;

BB0_69:
	setp.lt.f32	%p106, %f63, 0f00000000;
	and.pred  	%p6, %p106, %p75;
	mov.b32 	 %r107, %f974;
	xor.b32  	%r108, %r107, -2147483648;
	mov.b32 	 %f740, %r108;
	selp.f32	%f976, %f740, %f974, %p6;
	setp.eq.f32	%p108, %f63, 0f00000000;
	@%p108 bra 	BB0_72;
	bra.uni 	BB0_70;

BB0_72:
	add.f32 	%f743, %f63, %f63;
	selp.f32	%f976, %f743, 0f00000000, %p75;
	bra.uni 	BB0_73;

BB0_70:
	setp.geu.f32	%p109, %f63, 0f00000000;
	@%p109 bra 	BB0_73;

	cvt.rzi.f32.f32	%f742, %f558;
	setp.neu.f32	%p110, %f742, 0f3EE66666;
	selp.f32	%f976, 0f7FFFFFFF, %f976, %p110;

BB0_73:
	add.f32 	%f744, %f104, 0f3EE66666;
	mov.b32 	 %r109, %f744;
	setp.lt.s32	%p112, %r109, 2139095040;
	@%p112 bra 	BB0_78;

	setp.gtu.f32	%p113, %f104, 0f7F800000;
	@%p113 bra 	BB0_77;
	bra.uni 	BB0_75;

BB0_77:
	add.f32 	%f976, %f63, 0f3EE66666;
	bra.uni 	BB0_78;

BB0_75:
	setp.neu.f32	%p114, %f104, 0f7F800000;
	@%p114 bra 	BB0_78;

	selp.f32	%f976, 0fFF800000, 0f7F800000, %p6;

BB0_78:
	setp.eq.f32	%p115, %f63, 0f3F800000;
	selp.f32	%f745, 0f3F800000, %f976, %p115;
	cvt.u64.u32	%rd36, %r3;
	cvt.u64.u32	%rd35, %r2;
	mov.u64 	%rd39, image;
	cvta.global.u64 	%rd34, %rd39;
	// inline asm
	call (%rd33), _rt_buffer_get_64, (%rd34, %r24, %r25, %rd35, %rd36, %rd15, %rd15);
	// inline asm
	cvt.sat.f32.f32	%f746, %f745;
	mul.f32 	%f747, %f746, 0f437FFD71;
	cvt.rzi.u32.f32	%r112, %f747;
	cvt.sat.f32.f32	%f748, %f103;
	mul.f32 	%f749, %f748, 0f437FFD71;
	cvt.rzi.u32.f32	%r113, %f749;
	cvt.sat.f32.f32	%f750, %f90;
	mul.f32 	%f751, %f750, 0f437FFD71;
	cvt.rzi.u32.f32	%r114, %f751;
	cvt.u16.u32	%rs21, %r112;
	cvt.u16.u32	%rs22, %r114;
	cvt.u16.u32	%rs23, %r113;
	mov.u16 	%rs24, 255;
	st.v4.u8 	[%rd33], {%rs21, %rs23, %rs22, %rs24};
	ld.global.u32 	%r240, [imageEnabled];

BB0_79:
	cvt.u64.u32	%rd4, %r2;
	cvt.u64.u32	%rd5, %r3;
	and.b32  	%r115, %r240, 4;
	setp.eq.s32	%p116, %r115, 0;
	@%p116 bra 	BB0_83;

	ld.global.u32 	%r116, [additive];
	setp.eq.s32	%p117, %r116, 0;
	mov.f32 	%f752, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs25, %f752;}

	// inline asm
	@%p117 bra 	BB0_82;

	mov.u64 	%rd52, image_HDR;
	cvta.global.u64 	%rd41, %rd52;
	mov.u32 	%r120, 8;
	// inline asm
	call (%rd40), _rt_buffer_get_64, (%rd41, %r24, %r120, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs32, %rs33, %rs34, %rs35}, [%rd40];
	// inline asm
	{  cvt.f32.f16 %f753, %rs32;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f754, %rs33;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f755, %rs34;}

	// inline asm
	// inline asm
	call (%rd46), _rt_buffer_get_64, (%rd41, %r24, %r120, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f756, %f61, %f753;
	add.f32 	%f757, %f62, %f754;
	add.f32 	%f758, %f63, %f755;
	// inline asm
	{  cvt.rn.f16.f32 %rs31, %f758;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs30, %f757;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs29, %f756;}

	// inline asm
	st.v4.u16 	[%rd46], {%rs29, %rs30, %rs31, %rs25};
	bra.uni 	BB0_83;

BB0_82:
	mov.u64 	%rd59, image_HDR;
	cvta.global.u64 	%rd54, %rd59;
	mov.u32 	%r122, 8;
	// inline asm
	call (%rd53), _rt_buffer_get_64, (%rd54, %r24, %r122, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs38, %f63;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs37, %f62;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs36, %f61;}

	// inline asm
	st.v4.u16 	[%rd53], {%rs36, %rs37, %rs38, %rs25};

BB0_83:
	mul.f32 	%f763, %f47, 0f3E800000;
	mul.f32 	%f764, %f763, %f964;
	mul.f32 	%f765, %f48, %f764;
	ld.global.f32 	%f766, [lightColor];
	mul.f32 	%f116, %f765, %f766;
	ld.global.f32 	%f767, [lightColor+4];
	mul.f32 	%f117, %f765, %f767;
	ld.global.f32 	%f768, [lightColor+8];
	mul.f32 	%f118, %f765, %f768;
	ld.global.u32 	%r123, [additive];
	setp.eq.s32	%p118, %r123, 0;
	mov.f32 	%f762, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs39, %f762;}

	// inline asm
	@%p118 bra 	BB0_85;

	mov.u64 	%rd72, image_RNM0;
	cvta.global.u64 	%rd61, %rd72;
	mov.u32 	%r127, 8;
	// inline asm
	call (%rd60), _rt_buffer_get_64, (%rd61, %r24, %r127, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs46, %rs47, %rs48, %rs49}, [%rd60];
	// inline asm
	{  cvt.f32.f16 %f769, %rs46;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f770, %rs47;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f771, %rs48;}

	// inline asm
	// inline asm
	call (%rd66), _rt_buffer_get_64, (%rd61, %r24, %r127, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f772, %f116, %f769;
	add.f32 	%f773, %f117, %f770;
	add.f32 	%f774, %f118, %f771;
	// inline asm
	{  cvt.rn.f16.f32 %rs45, %f774;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs44, %f773;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs43, %f772;}

	// inline asm
	st.v4.u16 	[%rd66], {%rs43, %rs44, %rs45, %rs39};
	bra.uni 	BB0_86;

BB0_85:
	mov.u64 	%rd79, image_RNM0;
	cvta.global.u64 	%rd74, %rd79;
	mov.u32 	%r129, 8;
	// inline asm
	call (%rd73), _rt_buffer_get_64, (%rd74, %r24, %r129, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs52, %f118;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs51, %f117;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs50, %f116;}

	// inline asm
	st.v4.u16 	[%rd73], {%rs50, %rs51, %rs52, %rs39};

BB0_86:
	sub.f32 	%f938, %f11, %f12;
	mul.f32 	%f937, %f938, %f151;
	sub.f32 	%f936, %f7, %f8;
	mul.f32 	%f935, %f936, %f151;
	sub.f32 	%f934, %f9, %f10;
	mul.f32 	%f933, %f934, %f151;
	fma.rn.f32 	%f119, %f935, 0f3F000000, 0f3F000000;
	fma.rn.f32 	%f120, %f933, 0f3F000000, 0f3F000000;
	fma.rn.f32 	%f121, %f937, 0f3F000000, 0f3F000000;
	ld.global.u32 	%r130, [additive];
	setp.eq.s32	%p119, %r130, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs53, %f762;}

	// inline asm
	@%p119 bra 	BB0_88;

	mov.u64 	%rd92, image_RNM1;
	cvta.global.u64 	%rd81, %rd92;
	mov.u32 	%r134, 8;
	// inline asm
	call (%rd80), _rt_buffer_get_64, (%rd81, %r24, %r134, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs60, %rs61, %rs62, %rs63}, [%rd80];
	// inline asm
	{  cvt.f32.f16 %f779, %rs60;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f780, %rs61;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f781, %rs62;}

	// inline asm
	// inline asm
	call (%rd86), _rt_buffer_get_64, (%rd81, %r24, %r134, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f782, %f119, %f779;
	add.f32 	%f783, %f119, %f780;
	add.f32 	%f784, %f119, %f781;
	// inline asm
	{  cvt.rn.f16.f32 %rs59, %f784;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs58, %f783;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs57, %f782;}

	// inline asm
	st.v4.u16 	[%rd86], {%rs57, %rs58, %rs59, %rs53};
	bra.uni 	BB0_89;

BB0_88:
	mov.u64 	%rd99, image_RNM1;
	cvta.global.u64 	%rd94, %rd99;
	mov.u32 	%r136, 8;
	// inline asm
	call (%rd93), _rt_buffer_get_64, (%rd94, %r24, %r136, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs64, %f119;}

	// inline asm
	st.v4.u16 	[%rd93], {%rs64, %rs64, %rs64, %rs53};

BB0_89:
	ld.global.u32 	%r137, [additive];
	setp.eq.s32	%p120, %r137, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs65, %f762;}

	// inline asm
	@%p120 bra 	BB0_91;

	mov.u64 	%rd112, image_RNM2;
	cvta.global.u64 	%rd101, %rd112;
	mov.u32 	%r141, 8;
	// inline asm
	call (%rd100), _rt_buffer_get_64, (%rd101, %r24, %r141, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs72, %rs73, %rs74, %rs75}, [%rd100];
	// inline asm
	{  cvt.f32.f16 %f787, %rs72;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f788, %rs73;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f789, %rs74;}

	// inline asm
	// inline asm
	call (%rd106), _rt_buffer_get_64, (%rd101, %r24, %r141, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f790, %f120, %f787;
	add.f32 	%f791, %f120, %f788;
	add.f32 	%f792, %f120, %f789;
	// inline asm
	{  cvt.rn.f16.f32 %rs71, %f792;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs70, %f791;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs69, %f790;}

	// inline asm
	st.v4.u16 	[%rd106], {%rs69, %rs70, %rs71, %rs65};
	bra.uni 	BB0_92;

BB0_91:
	mov.u64 	%rd119, image_RNM2;
	cvta.global.u64 	%rd114, %rd119;
	mov.u32 	%r143, 8;
	// inline asm
	call (%rd113), _rt_buffer_get_64, (%rd114, %r24, %r143, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs76, %f120;}

	// inline asm
	st.v4.u16 	[%rd113], {%rs76, %rs76, %rs76, %rs65};

BB0_92:
	ld.global.u32 	%r144, [additive];
	setp.eq.s32	%p121, %r144, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs77, %f762;}

	// inline asm
	@%p121 bra 	BB0_94;

	mov.u64 	%rd132, image_RNM3;
	cvta.global.u64 	%rd121, %rd132;
	mov.u32 	%r148, 8;
	// inline asm
	call (%rd120), _rt_buffer_get_64, (%rd121, %r24, %r148, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs84, %rs85, %rs86, %rs87}, [%rd120];
	// inline asm
	{  cvt.f32.f16 %f795, %rs84;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f796, %rs85;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f797, %rs86;}

	// inline asm
	// inline asm
	call (%rd126), _rt_buffer_get_64, (%rd121, %r24, %r148, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f798, %f121, %f795;
	add.f32 	%f799, %f121, %f796;
	add.f32 	%f800, %f121, %f797;
	// inline asm
	{  cvt.rn.f16.f32 %rs83, %f800;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs82, %f799;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs81, %f798;}

	// inline asm
	st.v4.u16 	[%rd126], {%rs81, %rs82, %rs83, %rs77};
	bra.uni 	BB0_136;

BB0_94:
	mov.u64 	%rd139, image_RNM3;
	cvta.global.u64 	%rd134, %rd139;
	mov.u32 	%r150, 8;
	// inline asm
	call (%rd133), _rt_buffer_get_64, (%rd134, %r24, %r150, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs88, %f121;}

	// inline asm
	st.v4.u16 	[%rd133], {%rs88, %rs88, %rs88, %rs77};

BB0_136:
	ret;
}


